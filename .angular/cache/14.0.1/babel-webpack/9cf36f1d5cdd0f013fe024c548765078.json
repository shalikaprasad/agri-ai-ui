{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport let AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    constructor(router, snackBar) {\n      this.router = router;\n      this.snackBar = snackBar;\n      this.subject = new Subject();\n      this.keepAfterRouteChange = false;\n      this.config = {\n        duration: 3000,\n        horizontalPosition: 'right',\n        verticalPosition: 'top'\n      }; // clear alert messages on route change unless 'keepAfterRouteChange' flag is true\n      // this.router.events.subscribe(event => {\n      //   if (event instanceof NavigationStart) {\n      //     if (this.keepAfterRouteChange) {\n      //       // only keep for a single route change\n      //       this.keepAfterRouteChange = false;\n      //     } else {\n      //       // clear alert message\n      //       this.clear();\n      //     }\n      //   }\n      // });\n    }\n\n    getAlert() {\n      return this.subject.asObservable();\n    }\n\n    success(message) {\n      this.config.panelClass = ['notification', 'success'];\n      const snackBarRef = this.snackBar.open(message, '', this.config);\n      snackBarRef.afterDismissed().subscribe(() => {\n        console.log('snackbar dismiss');\n      }); // this.subject.next({ type: 'success', text: message });\n    }\n\n    warn(message) {\n      this.config.panelClass = ['notification', 'warn'];\n      this.snackBar.open(message, '', this.config); // this.subject.next({ type: 'success', text: message });\n    }\n\n    error(message, keepAfterRouteChange = false) {\n      this.keepAfterRouteChange = keepAfterRouteChange;\n      this.subject.next({\n        type: 'error',\n        text: message\n      });\n    }\n\n    clear() {\n      // clear by calling subject.next() without parameters\n      this.subject.unsubscribe();\n    }\n\n  }\n\n  AlertService.ɵfac = function AlertService_Factory(t) {\n    return new (t || AlertService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.MatSnackBar));\n  };\n\n  AlertService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlertService,\n    factory: AlertService.ɵfac,\n    providedIn: 'root'\n  });\n  return AlertService;\n})();","map":null,"metadata":{},"sourceType":"module"}