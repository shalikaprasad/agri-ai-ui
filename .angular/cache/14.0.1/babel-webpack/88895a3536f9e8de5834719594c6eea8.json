{"ast":null,"code":"import { PeriodicElement } from 'projects/administration/src/app/module/common/project-analysis/project-analysis.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"projects/tools/src/lib/project.service\";\nimport * as i2 from \"projects/tools/src/lib/crop.service\";\nexport let DashboardService = /*#__PURE__*/(() => {\n  class DashboardService {\n    constructor(projectService, cropService) {\n      this.projectService = projectService;\n      this.cropService = cropService;\n      this.array = [];\n      this.crops = [];\n      this.chart = [];\n      this.pieChartProjectCountFarmer = [];\n      this.pieChartCountForCrop = [];\n      this.pieChartCountForProfit = [];\n      this.countForCrop = [];\n      this.countForProfit = [];\n      this.projectCountFarmer = [];\n      this.tableProjectCountFarmer = [];\n    }\n\n    bigChart(data) {\n      this.array = data;\n      let i = 0;\n\n      for (const projects of this.array) {\n        this.chart[i] = {\n          name: projects.name,\n          data: projects.array\n        };\n        i++;\n      }\n\n      return this.chart;\n    } // return [{\n    //   name: this.array[0],\n    //   data: [502, 635, 809, 947, 1402, 3634, 5268]\n    // }, {\n    //   name: this.array[1],\n    //   data: [106, 107, 111, 133, 221, 767, 1766]\n    // }, {\n    //   name: this.array[3],\n    //   data: [163, 203, 276, 408, 547, 729, 628]\n    // }, {\n    //   name: 'America',\n    //   data: [18, 31, 54, 156, 339, 818, 1201]\n    // }, {\n    //   name: 'Oceania',\n    //   data: [2, 2, 2, 6, 13, 30, 46]\n    // }];\n\n\n    cards() {\n      return [71, 78, 39, 66];\n    }\n\n    pieChartFarmerProjects(data) {\n      this.projectCountFarmer = data;\n      let i = 0;\n\n      for (const projects of this.projectCountFarmer) {\n        if (projects.isBigger) {\n          this.pieChartProjectCountFarmer[i] = {\n            name: projects.name + 'V',\n            y: projects.total,\n            sliced: true,\n            selected: true\n          };\n        } else {\n          this.pieChartProjectCountFarmer[i] = {\n            name: projects.name + 'V',\n            y: projects.total\n          };\n        }\n\n        i++;\n      }\n\n      return this.pieChartProjectCountFarmer; // return [{\n      //   name: 'Chrome',\n      //   y: 61.41,\n      //   sliced: true,\n      //   selected: true\n      // }, {\n      //   name: 'Internet Explorer',\n      //   y: 11.84\n      // }, {\n      //   name: 'Firefox',\n      //   y: 10.85\n      // }, {\n      //   name: 'Edge',\n      //   y: 4.67\n      // }, {\n      //   name: 'Safari',\n      //   y: 4.18\n      // }, {\n      //   name: 'Sogou Explorer',\n      //   y: 1.64\n      // }, {\n      //   name: 'Opera',\n      //   y: 1.6\n      // }, {\n      //   name: 'QQ',\n      //   y: 1.2\n      // }, {\n      //   name: 'Other',\n      //   y: 2.61\n      // }];\n    }\n\n    pieChartCropCounts(data) {\n      this.countForCrop = data;\n      let i = 0;\n\n      for (const projects of this.countForCrop) {\n        if (projects.isBigger) {\n          this.pieChartCountForCrop[i] = {\n            name: projects.name,\n            y: projects.total,\n            sliced: true,\n            selected: true\n          };\n        } else {\n          this.pieChartCountForCrop[i] = {\n            name: projects.name,\n            y: projects.total\n          };\n        }\n\n        i++;\n      }\n\n      return this.pieChartCountForCrop;\n    }\n\n    pieChartProfitCounts(data) {\n      this.countForProfit = data;\n      let i = 0;\n\n      for (const projects of this.countForProfit) {\n        if (projects.isBigger) {\n          this.pieChartCountForProfit[i] = {\n            name: projects.name,\n            y: projects.number,\n            sliced: true,\n            selected: true\n          };\n        } else {\n          this.pieChartCountForProfit[i] = {\n            name: projects.name,\n            y: projects.number\n          };\n        }\n\n        i++;\n      }\n\n      return this.pieChartCountForProfit;\n    }\n\n    matTableFarmerProjects() {\n      let i = 0;\n      const tableDataList = [];\n\n      for (const projects of this.projectCountFarmer) {\n        const tableData = new PeriodicElement();\n        tableData.orders = i + 1;\n        tableData.name = projects.name + 'V';\n        tableData.projects = projects.total;\n        tableDataList[i] = tableData;\n        i++;\n      }\n\n      return tableDataList;\n    }\n\n  }\n\n  DashboardService.ɵfac = function DashboardService_Factory(t) {\n    return new (t || DashboardService)(i0.ɵɵinject(i1.ProjectService), i0.ɵɵinject(i2.CropService));\n  };\n\n  DashboardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DashboardService,\n    factory: DashboardService.ɵfac,\n    providedIn: 'root'\n  });\n  return DashboardService;\n})();","map":null,"metadata":{},"sourceType":"module"}