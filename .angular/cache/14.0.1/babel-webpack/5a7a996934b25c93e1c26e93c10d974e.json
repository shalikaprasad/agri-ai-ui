{"ast":null,"code":"import { Animation, Browser, ChildProperty, Collection, Complex, Component, Draggable, Droppable, Event, EventHandler, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getElement, getInstance, getRandomId, getUniqueID, getValue, isBlazor, isNullOrUndefined, isRippleEnabled, isUndefined, isVisible, matches, merge, remove, removeClass, rippleEffect, select, selectAll, setStyleAttribute, setValue } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { Popup, calculatePosition, createSpinner, fit, getScrollableParent, getZindexPartial, hideSpinner, isCollide, showSpinner } from '@syncfusion/ej2-popups';\nimport { Button, createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { Input } from '@syncfusion/ej2-inputs';\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst CLS_ROOT = 'e-hscroll';\nconst CLS_RTL = 'e-rtl';\nconst CLS_DISABLE = 'e-overlay';\nconst CLS_HSCROLLBAR = 'e-hscroll-bar';\nconst CLS_HSCROLLCON = 'e-hscroll-content';\nconst CLS_NAVARROW = 'e-nav-arrow';\nconst CLS_NAVRIGHTARROW = 'e-nav-right-arrow';\nconst CLS_NAVLEFTARROW = 'e-nav-left-arrow';\nconst CLS_HSCROLLNAV = 'e-scroll-nav';\nconst CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav';\nconst CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav';\nconst CLS_DEVICE = 'e-scroll-device';\nconst CLS_OVERLAY = 'e-scroll-overlay';\nconst CLS_RIGHTOVERLAY = 'e-scroll-right-overlay';\nconst CLS_LEFTOVERLAY = 'e-scroll-left-overlay';\nconst OVERLAY_MAXWID = 40;\n/**\n * HScroll module is introduces horizontal scroller when content exceeds the current viewing area.\n * It can be useful for the components like Toolbar, Tab which needs horizontal scrolling alone.\n * Hidden content can be view by touch moving or icon click.\n * ```html\n * <div id=\"scroll\"/>\n * <script>\n *   var scrollObj = new HScroll();\n *   scrollObj.appendTo(\"#scroll\");\n * </script>\n * ```\n */\n\nlet HScroll = /*#__PURE__*/(() => {\n  let HScroll = class HScroll extends Component {\n    /**\n     * Initializes a new instance of the HScroll class.\n     *\n     * @param {HScrollModel} options  - Specifies HScroll model properties as options.\n     * @param {string | HTMLElement} element  - Specifies the element for which horizontal scrolling applies.\n     */\n    constructor(options, element) {\n      super(options, element);\n    }\n    /**\n     * Initialize the event handler\n     *\n     * @private\n     * @returns {void}\n     */\n\n\n    preRender() {\n      this.browser = Browser.info.name;\n      this.browserCheck = this.browser === 'mozilla';\n      this.isDevice = Browser.isDevice;\n      this.customStep = true;\n      const element = this.element;\n      this.ieCheck = this.browser === 'edge' || this.browser === 'msie';\n      this.initialize();\n\n      if (element.id === '') {\n        element.id = getUniqueID('hscroll');\n        this.uniqueId = true;\n      }\n\n      element.style.display = 'block';\n\n      if (this.enableRtl) {\n        element.classList.add(CLS_RTL);\n      }\n    }\n    /**\n     * To Initialize the horizontal scroll  rendering\n     *\n     * @private\n     * @returns {void}\n     */\n\n\n    render() {\n      this.touchModule = new Touch(this.element, {\n        scroll: this.touchHandler.bind(this),\n        swipe: this.swipeHandler.bind(this)\n      });\n      EventHandler.add(this.scrollEle, 'scroll', this.scrollHandler, this);\n\n      if (!this.isDevice) {\n        this.createNavIcon(this.element);\n      } else {\n        this.element.classList.add(CLS_DEVICE);\n        this.createOverlay(this.element);\n      }\n\n      this.setScrollState();\n    }\n\n    setScrollState() {\n      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {\n        this.scrollStep = this.scrollEle.offsetWidth;\n        this.customStep = false;\n      } else {\n        this.customStep = true;\n      }\n    }\n\n    initialize() {\n      const scrollEle = this.createElement('div', {\n        className: CLS_HSCROLLCON\n      });\n      const scrollDiv = this.createElement('div', {\n        className: CLS_HSCROLLBAR\n      });\n      scrollDiv.setAttribute('tabindex', '-1');\n      const ele = this.element;\n      const innerEle = [].slice.call(ele.children);\n\n      for (const ele of innerEle) {\n        scrollEle.appendChild(ele);\n      }\n\n      scrollDiv.appendChild(scrollEle);\n      ele.appendChild(scrollDiv);\n      scrollDiv.style.overflowX = 'hidden';\n      this.scrollEle = scrollDiv;\n      this.scrollItems = scrollEle;\n    }\n\n    getPersistData() {\n      const keyEntity = ['scrollStep'];\n      return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Returns the current module name.\n     *\n     * @returns {string} - It returns the current module name.\n     * @private\n     */\n\n\n    getModuleName() {\n      return 'hScroll';\n    }\n    /**\n     * Removes the control from the DOM and also removes all its related events.\n     *\n     * @returns {void}\n     */\n\n\n    destroy() {\n      const ele = this.element;\n      ele.style.display = '';\n      ele.classList.remove(CLS_ROOT);\n      ele.classList.remove(CLS_DEVICE);\n      const nav = selectAll('.e-' + ele.id + '_nav.' + CLS_HSCROLLNAV, ele);\n      const overlay = selectAll('.' + CLS_OVERLAY, ele);\n      [].slice.call(overlay).forEach(ele => {\n        detach(ele);\n      });\n\n      for (const elem of [].slice.call(this.scrollItems.children)) {\n        ele.appendChild(elem);\n      }\n\n      if (this.uniqueId) {\n        this.element.removeAttribute('id');\n      }\n\n      detach(this.scrollEle);\n\n      if (nav.length > 0) {\n        detach(nav[0]);\n\n        if (!isNullOrUndefined(nav[1])) {\n          detach(nav[1]);\n        }\n      }\n\n      EventHandler.remove(this.scrollEle, 'scroll', this.scrollHandler);\n      this.touchModule.destroy();\n      this.touchModule = null;\n      super.destroy();\n    }\n    /**\n     * Specifies the value to disable/enable the HScroll component.\n     * When set to `true` , the component will be disabled.\n     *\n     * @param  {boolean} value - Based on this Boolean value, HScroll will be enabled (false) or disabled (true).\n     * @returns {void}.\n     */\n\n\n    disable(value) {\n      const navEles = selectAll('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);\n\n      if (value) {\n        this.element.classList.add(CLS_DISABLE);\n      } else {\n        this.element.classList.remove(CLS_DISABLE);\n      }\n\n      [].slice.call(navEles).forEach(el => {\n        el.setAttribute('tabindex', !value ? '0' : '-1');\n      });\n    }\n\n    createOverlay(element) {\n      const id = element.id.concat('_nav');\n      const rightOverlayEle = this.createElement('div', {\n        className: CLS_OVERLAY + ' ' + CLS_RIGHTOVERLAY\n      });\n      const clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);\n      const rightEle = this.createElement('div', {\n        id: id.concat('_right'),\n        className: clsRight\n      });\n      const navItem = this.createElement('div', {\n        className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'\n      });\n      rightEle.appendChild(navItem);\n      const leftEle = this.createElement('div', {\n        className: CLS_OVERLAY + ' ' + CLS_LEFTOVERLAY\n      });\n\n      if (this.ieCheck) {\n        rightEle.classList.add('e-ie-align');\n      }\n\n      element.appendChild(rightOverlayEle);\n      element.appendChild(rightEle);\n      element.insertBefore(leftEle, element.firstChild);\n      this.eventBinding([rightEle]);\n    }\n\n    createNavIcon(element) {\n      const id = element.id.concat('_nav');\n      const clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);\n      const rightAttributes = {\n        'role': 'button',\n        'id': id.concat('_right'),\n        'aria-label': 'Scroll right'\n      };\n      const nav = this.createElement('div', {\n        className: clsRight,\n        attrs: rightAttributes\n      });\n      nav.setAttribute('aria-disabled', 'false');\n      const navItem = this.createElement('div', {\n        className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'\n      });\n      const clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT);\n      const leftAttributes = {\n        'role': 'button',\n        'id': id.concat('_left'),\n        'aria-label': 'Scroll left'\n      };\n      const navEle = this.createElement('div', {\n        className: clsLeft + ' ' + CLS_DISABLE,\n        attrs: leftAttributes\n      });\n      navEle.setAttribute('aria-disabled', 'true');\n      const navLeftItem = this.createElement('div', {\n        className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons'\n      });\n      navEle.appendChild(navLeftItem);\n      nav.appendChild(navItem);\n      element.appendChild(nav);\n      element.insertBefore(navEle, element.firstChild);\n\n      if (this.ieCheck) {\n        nav.classList.add('e-ie-align');\n        navEle.classList.add('e-ie-align');\n      }\n\n      this.eventBinding([nav, navEle]);\n    }\n\n    onKeyPress(e) {\n      if (e.key === 'Enter') {\n        const timeoutFun = () => {\n          this.keyTimeout = true;\n          this.eleScrolling(10, e.target, true);\n        };\n\n        this.keyTimer = window.setTimeout(() => {\n          timeoutFun();\n        }, 100);\n      }\n    }\n\n    onKeyUp(e) {\n      if (e.key !== 'Enter') {\n        return;\n      }\n\n      if (this.keyTimeout) {\n        this.keyTimeout = false;\n      } else {\n        e.target.click();\n      }\n\n      clearTimeout(this.keyTimer);\n    }\n\n    eventBinding(ele) {\n      [].slice.call(ele).forEach(el => {\n        new Touch(el, {\n          tapHold: this.tabHoldHandler.bind(this),\n          tapHoldThreshold: 500\n        });\n        el.addEventListener('keydown', this.onKeyPress.bind(this));\n        el.addEventListener('keyup', this.onKeyUp.bind(this));\n        el.addEventListener('mouseup', this.repeatScroll.bind(this));\n        el.addEventListener('touchend', this.repeatScroll.bind(this));\n        el.addEventListener('contextmenu', e => {\n          e.preventDefault();\n        });\n        EventHandler.add(el, 'click', this.clickEventHandler, this);\n      });\n    }\n\n    repeatScroll() {\n      clearInterval(this.timeout);\n    }\n\n    tabHoldHandler(e) {\n      let trgt = e.originalEvent.target;\n      trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;\n      const scrollDis = 10;\n\n      const timeoutFun = () => {\n        this.eleScrolling(scrollDis, trgt, true);\n      };\n\n      this.timeout = window.setInterval(() => {\n        timeoutFun();\n      }, 50);\n    }\n\n    contains(ele, className) {\n      return ele.classList.contains(className);\n    }\n\n    eleScrolling(scrollDis, trgt, isContinuous) {\n      const rootEle = this.element;\n      let classList$$1 = trgt.classList;\n\n      if (classList$$1.contains(CLS_HSCROLLNAV)) {\n        classList$$1 = trgt.querySelector('.' + CLS_NAVARROW).classList;\n      }\n\n      if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {\n        scrollDis = -scrollDis;\n      }\n\n      if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {\n        if (classList$$1.contains(CLS_NAVRIGHTARROW)) {\n          this.frameScrollRequest(scrollDis, 'add', isContinuous);\n        } else {\n          this.frameScrollRequest(scrollDis, '', isContinuous);\n        }\n      } else {\n        if (classList$$1.contains(CLS_NAVLEFTARROW)) {\n          this.frameScrollRequest(scrollDis, 'add', isContinuous);\n        } else {\n          this.frameScrollRequest(scrollDis, '', isContinuous);\n        }\n      }\n    }\n\n    clickEventHandler(e) {\n      this.eleScrolling(this.scrollStep, e.target, false);\n    }\n\n    swipeHandler(e) {\n      const swipeEle = this.scrollEle;\n      let distance;\n\n      if (e.velocity <= 1) {\n        distance = e.distanceX / (e.velocity * 10);\n      } else {\n        distance = e.distanceX / e.velocity;\n      }\n\n      let start = 0.5;\n\n      const animate = () => {\n        const step = Math.sin(start);\n\n        if (step <= 0) {\n          window.cancelAnimationFrame(step);\n        } else {\n          if (e.swipeDirection === 'Left') {\n            swipeEle.scrollLeft += distance * step;\n          } else if (e.swipeDirection === 'Right') {\n            swipeEle.scrollLeft -= distance * step;\n          }\n\n          start -= 0.5;\n          window.requestAnimationFrame(animate);\n        }\n      };\n\n      animate();\n    }\n\n    scrollUpdating(scrollVal, action) {\n      if (action === 'add') {\n        this.scrollEle.scrollLeft += scrollVal;\n      } else {\n        this.scrollEle.scrollLeft -= scrollVal;\n      }\n    }\n\n    frameScrollRequest(scrollVal, action, isContinuous) {\n      const step = 10;\n\n      if (isContinuous) {\n        this.scrollUpdating(scrollVal, action);\n        return;\n      }\n\n      if (!this.customStep) {\n        [].slice.call(selectAll('.' + CLS_OVERLAY, this.element)).forEach(el => {\n          scrollVal -= el.offsetWidth;\n        });\n      }\n\n      const animate = () => {\n        let scrollValue;\n        let scrollStep;\n\n        if (this.contains(this.element, CLS_RTL) && this.browserCheck) {\n          scrollValue = -scrollVal;\n          scrollStep = -step;\n        } else {\n          scrollValue = scrollVal;\n          scrollStep = step;\n        }\n\n        if (scrollValue < step) {\n          window.cancelAnimationFrame(scrollStep);\n        } else {\n          this.scrollUpdating(scrollStep, action);\n          scrollVal -= scrollStep;\n          window.requestAnimationFrame(animate);\n        }\n      };\n\n      animate();\n    }\n\n    touchHandler(e) {\n      const ele = this.scrollEle;\n      let distance = e.distanceX;\n\n      if (this.ieCheck && this.contains(this.element, CLS_RTL)) {\n        distance = -distance;\n      }\n\n      if (e.scrollDirection === 'Left') {\n        ele.scrollLeft = ele.scrollLeft + distance;\n      } else if (e.scrollDirection === 'Right') {\n        ele.scrollLeft = ele.scrollLeft - distance;\n      }\n    }\n\n    arrowDisabling(addDisable, removeDisable) {\n      if (this.isDevice) {\n        const arrowEle = isNullOrUndefined(addDisable) ? removeDisable : addDisable;\n        const arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);\n\n        if (isNullOrUndefined(addDisable)) {\n          classList(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);\n        } else {\n          classList(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);\n        }\n      } else if (addDisable && removeDisable) {\n        addDisable.classList.add(CLS_DISABLE);\n        addDisable.setAttribute('aria-disabled', 'true');\n        addDisable.removeAttribute('tabindex');\n        removeDisable.classList.remove(CLS_DISABLE);\n        removeDisable.setAttribute('aria-disabled', 'false');\n        removeDisable.setAttribute('tabindex', '0');\n      }\n\n      this.repeatScroll();\n    }\n\n    scrollHandler(e) {\n      const target = e.target;\n      const width = target.offsetWidth;\n      const rootEle = this.element;\n      const navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT);\n      const navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT);\n      let leftOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);\n      let rightOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);\n      let scrollLeft = target.scrollLeft;\n\n      if (scrollLeft <= 0) {\n        scrollLeft = -scrollLeft;\n      }\n\n      if (this.isDevice) {\n        if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {\n          leftOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);\n          rightOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);\n        }\n\n        if (scrollLeft < OVERLAY_MAXWID) {\n          leftOverlay.style.width = scrollLeft + 'px';\n        } else {\n          leftOverlay.style.width = '40px';\n        }\n\n        if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {\n          rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + 'px';\n        } else {\n          rightOverlay.style.width = '40px';\n        }\n      }\n\n      if (scrollLeft === 0) {\n        this.arrowDisabling(navLeftEle, navRightEle);\n      } else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) {\n        this.arrowDisabling(navRightEle, navLeftEle);\n      } else {\n        const disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);\n\n        if (disEle) {\n          disEle.classList.remove(CLS_DISABLE);\n          disEle.setAttribute('aria-disabled', 'false');\n          disEle.setAttribute('tabindex', '0');\n        }\n      }\n    }\n    /**\n     * Gets called when the model property changes.The data that describes the old and new values of property that changed.\n     *\n     * @param  {HScrollModel} newProp - It contains the new value of data.\n     * @param  {HScrollModel} oldProp - It contains the old value of data.\n     * @returns {void}\n     * @private\n     */\n\n\n    onPropertyChanged(newProp, oldProp) {\n      for (const prop of Object.keys(newProp)) {\n        switch (prop) {\n          case 'scrollStep':\n            this.setScrollState();\n            break;\n\n          case 'enableRtl':\n            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);\n            break;\n        }\n      }\n    }\n\n  };\n\n  __decorate([Property(null)], HScroll.prototype, \"scrollStep\", void 0);\n\n  HScroll = __decorate([NotifyPropertyChanges], HScroll);\n  return HScroll;\n})();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst CLS_ROOT$1 = 'e-vscroll';\nconst CLS_RTL$1 = 'e-rtl';\nconst CLS_DISABLE$1 = 'e-overlay';\nconst CLS_VSCROLLBAR = 'e-vscroll-bar';\nconst CLS_VSCROLLCON = 'e-vscroll-content';\nconst CLS_NAVARROW$1 = 'e-nav-arrow';\nconst CLS_NAVUPARROW = 'e-nav-up-arrow';\nconst CLS_NAVDOWNARROW = 'e-nav-down-arrow';\nconst CLS_VSCROLLNAV = 'e-scroll-nav';\nconst CLS_VSCROLLNAVUP = 'e-scroll-up-nav';\nconst CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav';\nconst CLS_DEVICE$1 = 'e-scroll-device';\nconst CLS_OVERLAY$1 = 'e-scroll-overlay';\nconst CLS_UPOVERLAY = 'e-scroll-up-overlay';\nconst CLS_DOWNOVERLAY = 'e-scroll-down-overlay';\nconst OVERLAY_MAXWID$1 = 40;\n/**\n * VScroll module is introduces vertical scroller when content exceeds the current viewing area.\n * It can be useful for the components like Toolbar, Tab which needs vertical scrolling alone.\n * Hidden content can be view by touch moving or icon click.\n * ```html\n * <div id=\"scroll\"/>\n * <script>\n *   var scrollObj = new VScroll();\n *   scrollObj.appendTo(\"#scroll\");\n * </script>\n * ```\n */\n\nlet VScroll = class VScroll extends Component {\n  /**\n   * Initializes a new instance of the VScroll class.\n   *\n   * @param {VScrollModel} options  - Specifies VScroll model properties as options.\n   * @param {string | HTMLElement} element  - Specifies the element for which vertical scrolling applies.\n   */\n  constructor(options, element) {\n    super(options, element);\n  }\n  /**\n   * Initialize the event handler\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    this.browser = Browser.info.name;\n    this.browserCheck = this.browser === 'mozilla';\n    this.isDevice = Browser.isDevice;\n    this.customStep = true;\n    const ele = this.element;\n    this.ieCheck = this.browser === 'edge' || this.browser === 'msie';\n    this.initialize();\n\n    if (ele.id === '') {\n      ele.id = getUniqueID('vscroll');\n      this.uniqueId = true;\n    }\n\n    ele.style.display = 'block';\n\n    if (this.enableRtl) {\n      ele.classList.add(CLS_RTL$1);\n    }\n  }\n  /**\n   * To Initialize the vertical scroll rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.touchModule = new Touch(this.element, {\n      scroll: this.touchHandler.bind(this),\n      swipe: this.swipeHandler.bind(this)\n    });\n    EventHandler.add(this.scrollEle, 'scroll', this.scrollEventHandler, this);\n\n    if (!this.isDevice) {\n      this.createNavIcon(this.element);\n    } else {\n      this.element.classList.add(CLS_DEVICE$1);\n      this.createOverlayElement(this.element);\n    }\n\n    this.setScrollState();\n    EventHandler.add(this.element, 'wheel', this.wheelEventHandler, this);\n  }\n\n  setScrollState() {\n    if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {\n      this.scrollStep = this.scrollEle.offsetHeight;\n      this.customStep = false;\n    } else {\n      this.customStep = true;\n    }\n  }\n\n  initialize() {\n    const scrollCnt = createElement('div', {\n      className: CLS_VSCROLLCON\n    });\n    const scrollBar = createElement('div', {\n      className: CLS_VSCROLLBAR\n    });\n    scrollBar.setAttribute('tabindex', '-1');\n    const ele = this.element;\n    const innerEle = [].slice.call(ele.children);\n\n    for (const ele of innerEle) {\n      scrollCnt.appendChild(ele);\n    }\n\n    scrollBar.appendChild(scrollCnt);\n    ele.appendChild(scrollBar);\n    scrollBar.style.overflow = 'hidden';\n    this.scrollEle = scrollBar;\n    this.scrollItems = scrollCnt;\n  }\n\n  getPersistData() {\n    const keyEntity = ['scrollStep'];\n    return this.addOnPersist(keyEntity);\n  }\n  /**\n   * Returns the current module name.\n   *\n   * @returns {string} - It returns the current module name.\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'vScroll';\n  }\n  /**\n   * Removes the control from the DOM and also removes all its related events.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    const el = this.element;\n    el.style.display = '';\n    removeClass([this.element], [CLS_ROOT$1, CLS_DEVICE$1]);\n    const navs = selectAll('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el);\n    const overlays = selectAll('.' + CLS_OVERLAY$1, el);\n    [].slice.call(overlays).forEach(ele => {\n      detach(ele);\n    });\n\n    for (const elem of [].slice.call(this.scrollItems.children)) {\n      el.appendChild(elem);\n    }\n\n    if (this.uniqueId) {\n      this.element.removeAttribute('id');\n    }\n\n    detach(this.scrollEle);\n\n    if (navs.length > 0) {\n      detach(navs[0]);\n\n      if (!isNullOrUndefined(navs[1])) {\n        detach(navs[1]);\n      }\n    }\n\n    EventHandler.remove(this.scrollEle, 'scroll', this.scrollEventHandler);\n    this.touchModule.destroy();\n    this.touchModule = null;\n    super.destroy();\n  }\n  /**\n   * Specifies the value to disable/enable the VScroll component.\n   * When set to `true` , the component will be disabled.\n   *\n   * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).\n   * @returns {void}.\n   */\n\n\n  disable(value) {\n    const navEle = selectAll('.e-scroll-nav:not(.' + CLS_DISABLE$1 + ')', this.element);\n\n    if (value) {\n      this.element.classList.add(CLS_DISABLE$1);\n    } else {\n      this.element.classList.remove(CLS_DISABLE$1);\n    }\n\n    [].slice.call(navEle).forEach(el => {\n      el.setAttribute('tabindex', !value ? '0' : '-1');\n    });\n  }\n\n  createOverlayElement(element) {\n    const id = element.id.concat('_nav');\n    const downOverlayEle = createElement('div', {\n      className: CLS_OVERLAY$1 + ' ' + CLS_DOWNOVERLAY\n    });\n    const clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);\n    const downEle = createElement('div', {\n      id: id.concat('down'),\n      className: clsDown\n    });\n    const navItem = createElement('div', {\n      className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'\n    });\n    downEle.appendChild(navItem);\n    const upEle = createElement('div', {\n      className: CLS_OVERLAY$1 + ' ' + CLS_UPOVERLAY\n    });\n\n    if (this.ieCheck) {\n      downEle.classList.add('e-ie-align');\n    }\n\n    element.appendChild(downOverlayEle);\n    element.appendChild(downEle);\n    element.insertBefore(upEle, element.firstChild);\n    this.eventBinding([downEle]);\n  }\n\n  createNavIcon(element) {\n    const id = element.id.concat('_nav');\n    const clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);\n    const nav = createElement('div', {\n      id: id.concat('_down'),\n      className: clsDown\n    });\n    nav.setAttribute('aria-disabled', 'false');\n    const navItem = createElement('div', {\n      className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'\n    });\n    const clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP);\n    const navElement = createElement('div', {\n      id: id.concat('_up'),\n      className: clsUp + ' ' + CLS_DISABLE$1\n    });\n    navElement.setAttribute('aria-disabled', 'true');\n    const navUpItem = createElement('div', {\n      className: CLS_NAVUPARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'\n    });\n    navElement.appendChild(navUpItem);\n    nav.appendChild(navItem);\n    nav.setAttribute('tabindex', '0');\n    element.appendChild(nav);\n    element.insertBefore(navElement, element.firstChild);\n\n    if (this.ieCheck) {\n      nav.classList.add('e-ie-align');\n      navElement.classList.add('e-ie-align');\n    }\n\n    this.eventBinding([nav, navElement]);\n  }\n\n  onKeyPress(ev) {\n    if (ev.key === 'Enter') {\n      const timeoutFun = () => {\n        this.keyTimeout = true;\n        this.eleScrolling(10, ev.target, true);\n      };\n\n      this.keyTimer = window.setTimeout(() => {\n        timeoutFun();\n      }, 100);\n    }\n  }\n\n  onKeyUp(ev) {\n    if (ev.key !== 'Enter') {\n      return;\n    }\n\n    if (this.keyTimeout) {\n      this.keyTimeout = false;\n    } else {\n      ev.target.click();\n    }\n\n    clearTimeout(this.keyTimer);\n  }\n\n  eventBinding(element) {\n    [].slice.call(element).forEach(ele => {\n      new Touch(ele, {\n        tapHold: this.tabHoldHandler.bind(this),\n        tapHoldThreshold: 500\n      });\n      ele.addEventListener('keydown', this.onKeyPress.bind(this));\n      ele.addEventListener('keyup', this.onKeyUp.bind(this));\n      ele.addEventListener('mouseup', this.repeatScroll.bind(this));\n      ele.addEventListener('touchend', this.repeatScroll.bind(this));\n      ele.addEventListener('contextmenu', e => {\n        e.preventDefault();\n      });\n      EventHandler.add(ele, 'click', this.clickEventHandler, this);\n    });\n  }\n\n  repeatScroll() {\n    clearInterval(this.timeout);\n  }\n\n  tabHoldHandler(ev) {\n    let trgt = ev.originalEvent.target;\n    trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;\n    const scrollDistance = 10;\n\n    const timeoutFun = () => {\n      this.eleScrolling(scrollDistance, trgt, true);\n    };\n\n    this.timeout = window.setInterval(() => {\n      timeoutFun();\n    }, 50);\n  }\n\n  contains(element, className) {\n    return element.classList.contains(className);\n  }\n\n  eleScrolling(scrollDis, trgt, isContinuous) {\n    let classList$$1 = trgt.classList;\n\n    if (classList$$1.contains(CLS_VSCROLLNAV)) {\n      classList$$1 = trgt.querySelector('.' + CLS_NAVARROW$1).classList;\n    }\n\n    if (classList$$1.contains(CLS_NAVDOWNARROW)) {\n      this.frameScrollRequest(scrollDis, 'add', isContinuous);\n    } else if (classList$$1.contains(CLS_NAVUPARROW)) {\n      this.frameScrollRequest(scrollDis, '', isContinuous);\n    }\n  }\n\n  clickEventHandler(event) {\n    this.eleScrolling(this.scrollStep, event.target, false);\n  }\n\n  wheelEventHandler(e) {\n    e.preventDefault();\n    this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? 'add' : '', false);\n  }\n\n  swipeHandler(e) {\n    const swipeElement = this.scrollEle;\n    let distance;\n\n    if (e.velocity <= 1) {\n      distance = e.distanceY / (e.velocity * 10);\n    } else {\n      distance = e.distanceY / e.velocity;\n    }\n\n    let start = 0.5;\n\n    const animate = () => {\n      const step = Math.sin(start);\n\n      if (step <= 0) {\n        window.cancelAnimationFrame(step);\n      } else {\n        if (e.swipeDirection === 'Up') {\n          swipeElement.scrollTop += distance * step;\n        } else if (e.swipeDirection === 'Down') {\n          swipeElement.scrollTop -= distance * step;\n        }\n\n        start -= 0.02;\n        window.requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  }\n\n  scrollUpdating(scrollVal, action) {\n    if (action === 'add') {\n      this.scrollEle.scrollTop += scrollVal;\n    } else {\n      this.scrollEle.scrollTop -= scrollVal;\n    }\n  }\n\n  frameScrollRequest(scrollValue, action, isContinuous) {\n    const step = 10;\n\n    if (isContinuous) {\n      this.scrollUpdating(scrollValue, action);\n      return;\n    }\n\n    if (!this.customStep) {\n      [].slice.call(selectAll('.' + CLS_OVERLAY$1, this.element)).forEach(el => {\n        scrollValue -= el.offsetHeight;\n      });\n    }\n\n    const animate = () => {\n      if (scrollValue < step) {\n        window.cancelAnimationFrame(step);\n      } else {\n        this.scrollUpdating(step, action);\n        scrollValue -= step;\n        window.requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  }\n\n  touchHandler(e) {\n    const el = this.scrollEle;\n    const distance = e.distanceY;\n\n    if (e.scrollDirection === 'Up') {\n      el.scrollTop = el.scrollTop + distance;\n    } else if (e.scrollDirection === 'Down') {\n      el.scrollTop = el.scrollTop - distance;\n    }\n  }\n\n  arrowDisabling(addDisableCls, removeDisableCls) {\n    if (this.isDevice) {\n      const arrowEle = isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;\n      const arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW$1);\n\n      if (isNullOrUndefined(addDisableCls)) {\n        classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);\n      } else {\n        classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);\n      }\n    } else {\n      addDisableCls.classList.add(CLS_DISABLE$1);\n      addDisableCls.setAttribute('aria-disabled', 'true');\n      addDisableCls.removeAttribute('tabindex');\n      removeDisableCls.classList.remove(CLS_DISABLE$1);\n      removeDisableCls.setAttribute('aria-disabled', 'false');\n      removeDisableCls.setAttribute('tabindex', '0');\n    }\n\n    this.repeatScroll();\n  }\n\n  scrollEventHandler(e) {\n    const target = e.target;\n    const height = target.offsetHeight;\n    const navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP);\n    const navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN);\n    const upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY);\n    const downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY);\n    let scrollTop = target.scrollTop;\n\n    if (scrollTop <= 0) {\n      scrollTop = -scrollTop;\n    }\n\n    if (this.isDevice) {\n      if (scrollTop < OVERLAY_MAXWID$1) {\n        upOverlay.style.height = scrollTop + 'px';\n      } else {\n        upOverlay.style.height = '40px';\n      }\n\n      if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID$1) {\n        downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + 'px';\n      } else {\n        downOverlay.style.height = '40px';\n      }\n    }\n\n    if (scrollTop === 0) {\n      this.arrowDisabling(navUpEle, navDownEle);\n    } else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) {\n      this.arrowDisabling(navDownEle, navUpEle);\n    } else {\n      const disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + CLS_DISABLE$1);\n\n      if (disEle) {\n        disEle.classList.remove(CLS_DISABLE$1);\n        disEle.setAttribute('aria-disabled', 'false');\n        disEle.setAttribute('tabindex', '0');\n      }\n    }\n  }\n  /**\n   * Gets called when the model property changes.The data that describes the old and new values of property that changed.\n   *\n   * @param  {VScrollModel} newProp - It contains the new value of data.\n   * @param  {VScrollModel} oldProp - It contains the old value of data.\n   * @returns {void}\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'scrollStep':\n          this.setScrollState();\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.element.classList.add(CLS_RTL$1);\n          } else {\n            this.element.classList.remove(CLS_RTL$1);\n          }\n\n          break;\n      }\n    }\n  }\n\n};\n\n__decorate$1([Property(null)], VScroll.prototype, \"scrollStep\", void 0);\n\nVScroll = __decorate$1([NotifyPropertyChanges], VScroll);\n/**\n * Used to add scroll in menu.\n *\n * @param {createElementType} createElement - Specifies the create element model\n * @param {HTMLElement} container - Specifies the element container\n * @param {HTMLElement} content - Specifies the content element\n * @param {string} scrollType - Specifies the scroll type\n * @param {boolean} enableRtl - Specifies the enable RTL property\n * @param {boolean} offset - Specifies the offset value\n * @returns {HTMLElement} - Element\n * @hidden\n */\n\nfunction addScrolling(createElement$$1, container, content, scrollType, enableRtl, offset) {\n  let containerOffset;\n  let contentOffset;\n  const parentElem = container.parentElement;\n\n  if (scrollType === 'vscroll') {\n    containerOffset = offset || container.getBoundingClientRect().height;\n    contentOffset = content.getBoundingClientRect().height;\n  } else {\n    containerOffset = container.getBoundingClientRect().width;\n    contentOffset = content.getBoundingClientRect().width;\n  }\n\n  if (containerOffset < contentOffset) {\n    return createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset);\n  } else if (parentElem) {\n    const width = parentElem.getBoundingClientRect().width;\n\n    if (width < containerOffset && scrollType === 'hscroll') {\n      contentOffset = width;\n      container.style.maxWidth = width + 'px';\n      return createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset);\n    }\n\n    return content;\n  } else {\n    return content;\n  }\n}\n/**\n * Used to create scroll bar in menu.\n *\n * @param {createElementType} createElement - Specifies the create element model\n * @param {HTMLElement} container - Specifies the element container\n * @param {HTMLElement} content - Specifies the content element\n * @param {string} scrollType - Specifies the scroll type\n * @param {boolean} enableRtl - Specifies the enable RTL property\n * @param {boolean} offset - Specifies the offset value\n * @returns {HTMLElement} - Element\n * @hidden\n */\n\n\nfunction createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset) {\n  const scrollEle = createElement$$1('div', {\n    className: 'e-menu-' + scrollType\n  });\n  container.appendChild(scrollEle);\n  scrollEle.appendChild(content);\n\n  if (offset) {\n    scrollEle.style.overflow = 'hidden';\n    scrollEle.style.height = offset + 'px';\n  } else {\n    scrollEle.style.maxHeight = container.style.maxHeight;\n    container.style.overflow = 'hidden';\n  }\n\n  let scrollObj;\n\n  if (scrollType === 'vscroll') {\n    scrollObj = new VScroll({\n      enableRtl: enableRtl\n    }, scrollEle);\n    scrollObj.scrollStep = select('.e-' + scrollType + '-bar', container).offsetHeight / 2;\n  } else {\n    scrollObj = new HScroll({\n      enableRtl: enableRtl\n    }, scrollEle);\n    scrollObj.scrollStep = select('.e-' + scrollType + '-bar', container).offsetWidth;\n  }\n\n  return scrollEle;\n}\n/**\n * Used to destroy the scroll option.\n *\n * @param {VScroll | HScroll} scrollObj - Specifies the scroller object\n * @param {Element} element - Specifies the element\n * @param {HTMLElement} skipEle - Specifies the skip  element\n * @returns {void}\n * @hidden\n */\n\n\nfunction destroyScroll(scrollObj, element, skipEle) {\n  if (scrollObj) {\n    const menu = select('.e-menu-parent', element);\n\n    if (menu) {\n      if (!skipEle || skipEle === menu) {\n        scrollObj.destroy();\n        element.parentElement.appendChild(menu);\n        detach(element);\n      }\n    } else {\n      scrollObj.destroy();\n      detach(element);\n    }\n  }\n}\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst ENTER = 'enter';\nconst ESCAPE = 'escape';\nconst FOCUSED = 'e-focused';\nconst HEADER = 'e-menu-header';\nconst SELECTED = 'e-selected';\nconst SEPARATOR = 'e-separator';\nconst UPARROW = 'uparrow';\nconst DOWNARROW = 'downarrow';\nconst LEFTARROW = 'leftarrow';\nconst RIGHTARROW = 'rightarrow';\nconst HOME = 'home';\nconst END = 'end';\nconst TAB = 'tab';\nconst CARET = 'e-caret';\nconst ITEM = 'e-menu-item';\nconst DISABLED = 'e-disabled';\nconst HIDE = 'e-menu-hide';\nconst ICONS = 'e-icons';\nconst RTL = 'e-rtl';\nconst POPUP = 'e-menu-popup';\nconst TEMPLATE_PROPERTY = 'Template';\n/**\n * Configures the field options of the Menu.\n */\n\nclass FieldSettings extends ChildProperty {}\n\n__decorate$2([Property('id')], FieldSettings.prototype, \"itemId\", void 0);\n\n__decorate$2([Property('parentId')], FieldSettings.prototype, \"parentId\", void 0);\n\n__decorate$2([Property('text')], FieldSettings.prototype, \"text\", void 0);\n\n__decorate$2([Property('iconCss')], FieldSettings.prototype, \"iconCss\", void 0);\n\n__decorate$2([Property('url')], FieldSettings.prototype, \"url\", void 0);\n\n__decorate$2([Property('separator')], FieldSettings.prototype, \"separator\", void 0);\n\n__decorate$2([Property('items')], FieldSettings.prototype, \"children\", void 0);\n/**\n * Specifies menu items.\n */\n\n\nclass MenuItem extends ChildProperty {}\n\n__decorate$2([Property(null)], MenuItem.prototype, \"iconCss\", void 0);\n\n__decorate$2([Property('')], MenuItem.prototype, \"id\", void 0);\n\n__decorate$2([Property(false)], MenuItem.prototype, \"separator\", void 0);\n\n__decorate$2([Collection([], MenuItem)], MenuItem.prototype, \"items\", void 0);\n\n__decorate$2([Property('')], MenuItem.prototype, \"text\", void 0);\n\n__decorate$2([Property('')], MenuItem.prototype, \"url\", void 0);\n/**\n * Animation configuration settings.\n */\n\n\nclass MenuAnimationSettings extends ChildProperty {}\n\n__decorate$2([Property('SlideDown')], MenuAnimationSettings.prototype, \"effect\", void 0);\n\n__decorate$2([Property(400)], MenuAnimationSettings.prototype, \"duration\", void 0);\n\n__decorate$2([Property('ease')], MenuAnimationSettings.prototype, \"easing\", void 0);\n/**\n * Base class for Menu and ContextMenu components.\n *\n *  @private\n */\n\n\nlet MenuBase = class MenuBase extends Component {\n  /**\n   * Constructor for creating the widget.\n   *\n   * @private\n   * @param {MenuBaseModel} options - Specifies the menu base model\n   * @param {string | HTMLUListElement} element - Specifies the element\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.navIdx = [];\n    this.animation = new Animation({});\n    this.isTapHold = false;\n    this.tempItem = [];\n    this.showSubMenuOn = 'Auto';\n  }\n  /**\n   * Initialized third party configuration settings.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    if (!this.isMenu) {\n      let ul;\n\n      if (this.element.tagName === 'EJS-CONTEXTMENU') {\n        ul = this.createElement('ul', {\n          id: getUniqueID(this.getModuleName()),\n          className: 'e-control e-lib e-' + this.getModuleName()\n        });\n        const ejInst = getValue('ej2_instances', this.element);\n        removeClass([this.element], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);\n        this.clonedElement = this.element;\n        this.element = ul;\n        setValue('ej2_instances', ejInst, this.element);\n      } else {\n        ul = this.createElement('ul', {\n          id: getUniqueID(this.getModuleName())\n        });\n        append([].slice.call(this.element.cloneNode(true).children), ul);\n        const refEle = this.element.nextElementSibling;\n\n        if (refEle) {\n          this.element.parentElement.insertBefore(ul, refEle);\n        } else {\n          this.element.parentElement.appendChild(ul);\n        }\n\n        this.clonedElement = ul;\n      }\n\n      this.clonedElement.style.display = 'none';\n    }\n\n    if (this.element.tagName === 'EJS-MENU') {\n      let ele = this.element;\n      const ejInstance = getValue('ej2_instances', ele);\n      const ul = this.createElement('ul');\n      const wrapper = this.createElement('EJS-MENU', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      for (let idx = 0, len = ele.attributes.length; idx < len; idx++) {\n        ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);\n      }\n\n      ele.parentNode.insertBefore(wrapper, ele);\n      detach(ele);\n      ele = ul;\n      wrapper.appendChild(ele);\n      setValue('ej2_instances', ejInstance, ele);\n      this.clonedElement = wrapper;\n      this.element = ele;\n\n      if (!this.element.id) {\n        this.element.id = getUniqueID(this.getModuleName());\n      }\n    }\n  }\n  /**\n   * Initialize the control rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initialize();\n    this.renderItems();\n    this.wireEvents();\n    this.renderComplete();\n    const wrapper = this.getWrapper();\n\n    if (this.template && this.enableScrolling && (this.isReact || this.isAngular)) {\n      requestAnimationFrame(() => {\n        addScrolling(this.createElement, wrapper, this.element, 'hscroll', this.enableRtl);\n      });\n    }\n  }\n\n  initialize() {\n    let wrapper = this.getWrapper();\n\n    if (!wrapper) {\n      wrapper = this.createElement('div', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      if (this.isMenu) {\n        this.element.parentElement.insertBefore(wrapper, this.element);\n      } else {\n        document.body.appendChild(wrapper);\n      }\n    }\n\n    if (this.cssClass) {\n      addClass([wrapper], this.cssClass.split(' '));\n    }\n\n    if (this.enableRtl) {\n      wrapper.classList.add(RTL);\n    }\n\n    wrapper.appendChild(this.element);\n\n    if (this.isMenu && this.hamburgerMode) {\n      if (!this.target) {\n        this.createHeaderContainer(wrapper);\n      }\n    }\n\n    this.defaultOption = this.showItemOnClick;\n  }\n\n  renderItems() {\n    if (!this.items.length) {\n      const items = ListBase.createJsonFromElement(this.element, {\n        fields: {\n          child: 'items'\n        }\n      });\n      this.setProperties({\n        items: items\n      }, true);\n\n      if (isBlazor() && !this.isMenu) {\n        this.element = this.removeChildElement(this.element);\n      } else {\n        this.element.innerHTML = '';\n      }\n    }\n\n    const ul = this.createItems(this.items);\n    append(Array.prototype.slice.call(ul.children), this.element);\n    this.element.classList.add('e-menu-parent');\n\n    if (this.isMenu) {\n      if (!this.hamburgerMode && this.element.classList.contains('e-vertical')) {\n        this.setBlankIconStyle(this.element);\n      }\n\n      if (this.enableScrolling) {\n        const wrapper = this.getWrapper();\n\n        if (this.element.classList.contains('e-vertical')) {\n          addScrolling(this.createElement, wrapper, this.element, 'vscroll', this.enableRtl);\n        } else {\n          addScrolling(this.createElement, wrapper, this.element, 'hscroll', this.enableRtl);\n        }\n      }\n    }\n  }\n\n  wireEvents() {\n    const wrapper = this.getWrapper();\n\n    if (this.target) {\n      let target;\n      const targetElems = selectAll(this.target);\n\n      for (let i = 0, len = targetElems.length; i < len; i++) {\n        target = targetElems[i];\n\n        if (this.isMenu) {\n          EventHandler.add(target, 'click', this.menuHeaderClickHandler, this);\n        } else {\n          if (Browser.isIos) {\n            new Touch(target, {\n              tapHold: this.touchHandler.bind(this)\n            });\n          } else {\n            EventHandler.add(target, 'contextmenu', this.cmenuHandler, this);\n          }\n        }\n      }\n\n      this.targetElement = target;\n\n      if (!this.isMenu) {\n        EventHandler.add(this.targetElement, 'scroll', this.scrollHandler, this);\n\n        for (const parent of getScrollableParent(this.targetElement)) {\n          EventHandler.add(parent, 'scroll', this.scrollHandler, this);\n        }\n      }\n    }\n\n    if (!Browser.isDevice) {\n      this.delegateMoverHandler = this.moverHandler.bind(this);\n      this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);\n      EventHandler.add(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler, this);\n      EventHandler.add(document, 'mousedown', this.delegateMouseDownHandler, this);\n    }\n\n    this.delegateClickHandler = this.clickHandler.bind(this);\n    EventHandler.add(document, 'click', this.delegateClickHandler, this);\n    this.wireKeyboardEvent(wrapper);\n    this.rippleFn = rippleEffect(wrapper, {\n      selector: '.' + ITEM\n    });\n  }\n\n  wireKeyboardEvent(element) {\n    const keyConfigs = {\n      downarrow: DOWNARROW,\n      uparrow: UPARROW,\n      enter: ENTER,\n      leftarrow: LEFTARROW,\n      rightarrow: RIGHTARROW,\n      escape: ESCAPE\n    };\n\n    if (this.isMenu) {\n      keyConfigs.home = HOME;\n      keyConfigs.end = END;\n      keyConfigs.tab = TAB;\n    }\n\n    new KeyboardEvents(element, {\n      keyAction: this.keyBoardHandler.bind(this),\n      keyConfigs: keyConfigs\n    });\n  }\n\n  mouseDownHandler(e) {\n    if (closest(e.target, '.e-' + this.getModuleName() + '-wrapper') !== this.getWrapper() && !closest(e.target, '.e-' + this.getModuleName() + '-popup')) {\n      this.closeMenu(this.isMenu ? null : this.navIdx.length, e);\n    }\n  }\n\n  keyBoardHandler(e) {\n    let actionName = '';\n    const trgt = e.target;\n    let actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains('e-vertical') && this.navIdx.length < 1;\n    e.preventDefault();\n\n    if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains('e-scroll-nav')) {\n      this.removeLIStateByClass([FOCUSED, SELECTED], [closest(trgt, '.e-' + this.getModuleName() + '-wrapper')]);\n    }\n\n    if (actionNeeded) {\n      switch (e.action) {\n        case RIGHTARROW:\n          actionName = RIGHTARROW;\n          e.action = DOWNARROW;\n          break;\n\n        case LEFTARROW:\n          actionName = LEFTARROW;\n          e.action = UPARROW;\n          break;\n\n        case DOWNARROW:\n          actionName = DOWNARROW;\n          e.action = RIGHTARROW;\n          break;\n\n        case UPARROW:\n          actionName = UPARROW;\n          e.action = '';\n          break;\n      }\n    } else if (this.enableRtl) {\n      switch (e.action) {\n        case LEFTARROW:\n          actionNeeded = true;\n          actionName = LEFTARROW;\n          e.action = RIGHTARROW;\n          break;\n\n        case RIGHTARROW:\n          actionNeeded = true;\n          actionName = RIGHTARROW;\n          e.action = LEFTARROW;\n          break;\n      }\n    }\n\n    switch (e.action) {\n      case DOWNARROW:\n      case UPARROW:\n      case END:\n      case HOME:\n      case TAB:\n        this.upDownKeyHandler(e);\n        break;\n\n      case RIGHTARROW:\n        this.rightEnterKeyHandler(e);\n        break;\n\n      case LEFTARROW:\n        this.leftEscKeyHandler(e);\n        break;\n\n      case ENTER:\n        if (this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {\n          this.menuHeaderClickHandler(e);\n        } else {\n          this.rightEnterKeyHandler(e);\n        }\n\n        break;\n\n      case ESCAPE:\n        this.leftEscKeyHandler(e);\n        break;\n    }\n\n    if (actionNeeded) {\n      e.action = actionName;\n    }\n  }\n\n  upDownKeyHandler(e) {\n    const cul = this.getUlByNavIdx();\n    const defaultIdx = e.action === DOWNARROW || e.action === HOME || e.action === TAB ? 0 : cul.childElementCount - 1;\n    let fliIdx = defaultIdx;\n    const fli = this.getLIByClass(cul, FOCUSED);\n\n    if (fli) {\n      if (e.action !== END && e.action !== HOME) {\n        fliIdx = this.getIdx(cul, fli);\n      }\n\n      fli.classList.remove(FOCUSED);\n\n      if (e.action !== END && e.action !== HOME) {\n        if (e.action === DOWNARROW) {\n          fliIdx++;\n        } else {\n          fliIdx--;\n        }\n\n        if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {\n          fliIdx = defaultIdx;\n        }\n      }\n    }\n\n    const cli = cul.children[fliIdx];\n    fliIdx = this.isValidLI(cli, fliIdx, e.action);\n    cul.children[fliIdx].classList.add(FOCUSED);\n    cul.children[fliIdx].focus();\n  }\n\n  isValidLI(cli, index, action) {\n    const cul = this.getUlByNavIdx();\n\n    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n      if (action === DOWNARROW || action === RIGHTARROW) {\n        index++;\n      } else {\n        index--;\n      }\n    }\n\n    cli = cul.children[index];\n\n    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n      index = this.isValidLI(cli, index, action);\n    }\n\n    return index;\n  }\n\n  getUlByNavIdx(navIdxLen = this.navIdx.length) {\n    if (this.isMenu) {\n      const popup = [this.getWrapper()].concat([].slice.call(selectAll('.' + POPUP)))[navIdxLen];\n      return isNullOrUndefined(popup) ? null : select('.e-menu-parent', popup);\n    } else {\n      return this.getWrapper().children[navIdxLen];\n    }\n  }\n\n  rightEnterKeyHandler(e) {\n    let eventArgs;\n    const cul = this.getUlByNavIdx();\n    const fli = this.getLIByClass(cul, FOCUSED);\n\n    if (fli) {\n      const fliIdx = this.getIdx(cul, fli);\n      const navIdx = this.navIdx.concat(fliIdx);\n      const item = this.getItem(navIdx);\n\n      if (item.items.length) {\n        this.navIdx.push(fliIdx);\n        this.keyType = 'right';\n        this.action = e.action;\n        this.openMenu(fli, item, -1, -1, e);\n      } else {\n        if (e.action === ENTER) {\n          if (this.isMenu && this.navIdx.length === 0) {\n            this.removeLIStateByClass([SELECTED], [this.getWrapper()]);\n          } else {\n            fli.classList.remove(FOCUSED);\n          }\n\n          fli.classList.add(SELECTED);\n          eventArgs = {\n            element: fli,\n            item: item,\n            event: e\n          };\n          this.trigger('select', eventArgs);\n          this.closeMenu(null, e);\n        }\n      }\n    }\n  }\n\n  leftEscKeyHandler(e) {\n    if (this.navIdx.length) {\n      this.keyType = 'left';\n      this.closeMenu(this.navIdx.length, e);\n    } else {\n      if (e.action === ESCAPE) {\n        this.closeMenu(null, e);\n      }\n    }\n  }\n\n  scrollHandler(e) {\n    this.closeMenu(null, e);\n  }\n\n  touchHandler(e) {\n    this.isTapHold = true;\n    this.cmenuHandler(e.originalEvent);\n  }\n\n  cmenuHandler(e) {\n    e.preventDefault();\n    this.isCMenu = true;\n    this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;\n    this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;\n    this.closeMenu(null, e);\n\n    if (this.isCMenu) {\n      if (this.canOpen(e.target)) {\n        this.openMenu(null, null, this.pageY, this.pageX, e);\n      }\n\n      this.isCMenu = false;\n    }\n  } // eslint:disable-next-line:max-func-body-length\n\n\n  closeMenu(ulIndex = 0, e = null, isIterated) {\n    if (this.isMenuVisible()) {\n      let sli;\n      let item;\n      const wrapper = this.getWrapper();\n      let beforeCloseArgs;\n      let items;\n      const popups = this.getPopups();\n      let isClose = false;\n      const cnt = this.isMenu ? popups.length + 1 : wrapper.childElementCount;\n      const ul = this.isMenu && cnt !== 1 ? select('.e-ul', popups[cnt - 2]) : selectAll('.e-menu-parent', wrapper)[cnt - 1];\n\n      if (this.isMenu && ul.classList.contains('e-menu')) {\n        sli = this.getLIByClass(ul, SELECTED);\n\n        if (sli) {\n          sli.classList.remove(SELECTED);\n        }\n\n        isClose = true;\n      }\n\n      if (!isClose) {\n        const liElem = e && e.target && this.getLI(e.target);\n\n        if (liElem) {\n          this.cli = liElem;\n        } else {\n          this.cli = ul.children[0];\n        }\n\n        item = this.navIdx.length ? this.getItem(this.navIdx) : null;\n        items = item ? item.items : this.items;\n        beforeCloseArgs = {\n          element: ul,\n          parentItem: item,\n          items: items,\n          event: e,\n          cancel: false,\n          isFocused: true\n        };\n        this.trigger('beforeClose', beforeCloseArgs, observedCloseArgs => {\n          let popupEle;\n          let closeArgs;\n          let popupId = '';\n          let popupObj;\n          const isOpen = !observedCloseArgs.cancel;\n\n          if (isOpen || this.isCMenu) {\n            if (this.isMenu) {\n              popupEle = closest(ul, '.' + POPUP);\n\n              if (this.hamburgerMode) {\n                popupEle.parentElement.style.minHeight = '';\n                closest(ul, '.e-menu-item').setAttribute('aria-expanded', 'false');\n              }\n\n              this.unWireKeyboardEvent(popupEle);\n              destroyScroll(getInstance(popupEle.children[0], VScroll), popupEle.children[0]);\n              popupObj = getInstance(popupEle, Popup);\n              popupObj.hide();\n              popupId = popupEle.id;\n              popupObj.destroy();\n              detach(popupEle);\n            } else {\n              this.toggleAnimation(ul, false);\n            }\n\n            closeArgs = {\n              element: ul,\n              parentItem: item,\n              items: items\n            };\n            this.trigger('onClose', closeArgs);\n            this.navIdx.pop();\n          }\n\n          this.updateReactTemplate();\n          let trgtliId;\n          let closedLi;\n          let trgtLi;\n          const trgtpopUp = this.getWrapper() && this.getUlByNavIdx();\n\n          if (this.isCMenu) {\n            if (this.canOpen(e.target)) {\n              this.openMenu(null, null, this.pageY, this.pageX, e);\n            }\n\n            this.isCMenu = false;\n          }\n\n          if (this.isMenu && trgtpopUp && popupId.length) {\n            trgtliId = new RegExp('(.*)-ej2menu-' + this.element.id + '-popup').exec(popupId)[1];\n            closedLi = trgtpopUp.querySelector('[id=\"' + trgtliId + '\"]');\n            trgtLi = liElem && trgtpopUp.querySelector('[id=\"' + liElem.id + '\"]');\n          }\n\n          const submenus = liElem && liElem.querySelectorAll('.e-menu-item');\n\n          if (isOpen && this.hamburgerMode && ulIndex && !submenus.length) {\n            this.afterCloseMenu(e);\n          } else if (isOpen && !this.hamburgerMode && this.navIdx.length && closedLi && !trgtLi && this.keyType !== \"left\") {\n            let ele = e && e.target.classList.contains('e-vscroll') ? closest(e.target, '.e-menu-wrapper') : null;\n\n            if (ele) {\n              ele = ele.querySelector('.e-menu-item');\n\n              if (this.showItemOnClick || ele && this.getIndex(ele.id, true).length <= this.navIdx.length) {\n                this.closeMenu(this.navIdx[this.navIdx.length - 1], e, true);\n              }\n            } else {\n              this.closeMenu(this.navIdx[this.navIdx.length - 1], e);\n            }\n          } else if (isOpen && !isIterated && !ulIndex && (this.hamburgerMode && this.navIdx.length || this.navIdx.length === 1)) {\n            this.closeMenu(null, e);\n          } else if (isOpen && isNullOrUndefined(ulIndex) && this.navIdx.length) {\n            this.closeMenu(null, e);\n          } else if (isOpen && !this.isMenu && !ulIndex && this.navIdx.length === 0 && !this.isMenusClosed) {\n            this.isMenusClosed = true;\n            this.closeMenu(0, e);\n          } else if (isOpen && this.isMenu && e && e.target && this.navIdx.length !== 0 && closest(e.target, '.e-menu-parent.e-control')) {\n            this.closeMenu(0, e);\n          } else if (isOpen && !this.isMenu && selectAll('.e-menu-parent', wrapper)[ulIndex - 1] && e.which === 3) {\n            this.closeMenu(null, e);\n          } else {\n            if (isOpen && (this.keyType === 'right' || this.keyType === 'click')) {\n              this.afterCloseMenu(e);\n            } else {\n              const cul = this.getUlByNavIdx();\n              const sli = this.getLIByClass(cul, SELECTED);\n\n              if (sli) {\n                sli.setAttribute('aria-expanded', 'false');\n                sli.classList.remove(SELECTED);\n\n                if (observedCloseArgs.isFocused && liElem || this.keyType === \"left\") {\n                  sli.classList.add(FOCUSED);\n                  sli.focus();\n                }\n              }\n\n              if (!isOpen && this.hamburgerMode && liElem && liElem.getAttribute('aria-expanded') === 'false' && liElem.getAttribute('aria-haspopup') === 'true') {\n                if (closest(liElem, '.e-menu-parent.e-control')) {\n                  this.navIdx = [];\n                } else {\n                  this.navIdx.pop();\n                }\n\n                this.navIdx.push(this.cliIdx);\n                const item = this.getItem(this.navIdx);\n                liElem.setAttribute('aria-expanded', 'true');\n                this.openMenu(liElem, item, -1, -1, e);\n              }\n            }\n\n            if (this.navIdx.length < 1) {\n              if (this.showSubMenuOn === 'Hover' || this.showSubMenuOn === 'Click') {\n                this.showItemOnClick = this.defaultOption;\n                this.showSubMenuOn = 'Auto';\n              }\n            }\n          }\n\n          this.removeStateWrapper();\n        });\n      }\n    }\n  }\n\n  updateReactTemplate() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this.isReact && this.template && this.navIdx.length === 0) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const portals = this.portals.splice(0, this.items.length);\n      this.clearTemplate(['template']); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      this.portals = portals;\n      this.renderReactTemplates();\n    }\n  }\n\n  getMenuItemModel(item, level) {\n    if (isNullOrUndefined(item)) {\n      return null;\n    }\n\n    if (isNullOrUndefined(level)) {\n      level = 0;\n    }\n\n    const fields = this.getFields(level);\n    return {\n      text: item[fields.text],\n      id: item[fields.id],\n      items: item[fields.child],\n      separator: item[fields.separator],\n      iconCss: item[fields.iconCss],\n      url: item[fields.url]\n    };\n  }\n\n  getPopups() {\n    const popups = [];\n    [].slice.call(document.querySelectorAll('.' + POPUP)).forEach(elem => {\n      if (!isNullOrUndefined(elem.querySelector('.' + ITEM)) && this.getIndex(elem.querySelector('.' + ITEM).id, true).length) {\n        popups.push(elem);\n      }\n    });\n    return popups;\n  }\n\n  isMenuVisible() {\n    return this.navIdx.length > 0 || this.element.classList.contains('e-contextmenu') && isVisible(this.element).valueOf();\n  }\n\n  canOpen(target) {\n    let canOpen = true;\n\n    if (this.filter) {\n      canOpen = false;\n      const filter = this.filter.split(' ');\n\n      for (let i = 0, len = filter.length; i < len; i++) {\n        if (closest(target, '.' + filter[i])) {\n          canOpen = true;\n          break;\n        }\n      }\n    }\n\n    return canOpen;\n  }\n\n  openMenu(li, item, top = 0, left = 0, e = null, target = this.targetElement) {\n    const wrapper = this.getWrapper();\n    this.lItem = li;\n    const elemId = this.element.id !== '' ? this.element.id : 'menu';\n    this.isMenusClosed = false;\n\n    if (isNullOrUndefined(top)) {\n      top = -1;\n    }\n\n    if (isNullOrUndefined(left)) {\n      left = -1;\n    }\n\n    if (li) {\n      this.uList = this.createItems(item[this.getField('children', this.navIdx.length - 1)]);\n\n      if (!this.isMenu && Browser.isDevice) {\n        wrapper.lastChild.style.display = 'none';\n        const data = {\n          text: item[this.getField('text')].toString(),\n          iconCss: ICONS + ' e-previous'\n        };\n        const hdata = new MenuItem(this.items[0], 'items', data, true);\n        const hli = this.createItems([hdata]).children[0];\n        hli.classList.add(HEADER);\n        this.uList.insertBefore(hli, this.uList.children[0]);\n      }\n\n      if (this.isMenu) {\n        this.popupWrapper = this.createElement('div', {\n          className: 'e-' + this.getModuleName() + '-wrapper ' + POPUP,\n          id: li.id + '-ej2menu-' + elemId + '-popup'\n        });\n\n        if (this.hamburgerMode) {\n          top = li.offsetHeight;\n          li.appendChild(this.popupWrapper);\n        } else {\n          document.body.appendChild(this.popupWrapper);\n        }\n\n        this.isNestedOrVertical = this.element.classList.contains('e-vertical') || this.navIdx.length !== 1;\n        this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);\n\n        if (this.template) {\n          this.renderReactTemplates();\n        }\n\n        if (this.hamburgerMode) {\n          this.calculateIndentSize(this.uList, li);\n        } else {\n          if (this.cssClass) {\n            addClass([this.popupWrapper], this.cssClass.split(' '));\n          }\n\n          this.popupObj.hide();\n        }\n\n        if (!this.hamburgerMode && !this.showItemOnClick && this.hoverDelay) {\n          window.clearInterval(this.timer);\n          this.timer = window.setTimeout(() => {\n            this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, 'menu');\n          }, this.hoverDelay);\n        } else {\n          this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, 'menu');\n        }\n      } else {\n        this.uList.style.zIndex = this.element.style.zIndex;\n        wrapper.appendChild(this.uList);\n\n        if (!this.showItemOnClick && this.hoverDelay) {\n          window.clearInterval(this.timer);\n          this.timer = window.setTimeout(() => {\n            this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n          }, this.hoverDelay);\n        } else {\n          this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n        }\n      }\n    } else {\n      this.uList = this.element;\n      this.uList.style.zIndex = getZindexPartial(target ? target : this.element).toString();\n      this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n    }\n  }\n\n  calculateIndentSize(ul, li) {\n    const liStyle = getComputedStyle(li);\n    let liIndent = parseInt(liStyle.textIndent, 10);\n\n    if (this.navIdx.length < 2 && !li.classList.contains('e-blankicon')) {\n      liIndent *= 2;\n    } else {\n      liIndent += liIndent / 4;\n    }\n\n    ul.style.textIndent = liIndent + 'px';\n    const blankIconElem = ul.querySelectorAll('.e-blankicon');\n\n    if (blankIconElem && blankIconElem.length) {\n      const menuIconElem = ul.querySelector('.e-menu-icon');\n      const menuIconElemStyle = getComputedStyle(menuIconElem);\n      const blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;\n\n      for (let i = 0; i < blankIconElem.length; i++) {\n        blankIconElem[i].style.textIndent = blankIconIndent + 'px';\n      }\n    }\n  }\n\n  generatePopup(popupWrapper, ul, li, isNestedOrVertical) {\n    const popupObj = new Popup(popupWrapper, {\n      actionOnScroll: this.hamburgerMode ? 'none' : 'reposition',\n      relateTo: li,\n      collision: this.hamburgerMode ? {\n        X: 'none',\n        Y: 'none'\n      } : {\n        X: isNestedOrVertical || this.enableRtl ? 'none' : 'flip',\n        Y: 'fit'\n      },\n      position: isNestedOrVertical && !this.hamburgerMode ? {\n        X: 'right',\n        Y: 'top'\n      } : {\n        X: 'left',\n        Y: 'bottom'\n      },\n      targetType: 'relative',\n      enableRtl: this.enableRtl,\n      content: ul,\n      open: () => {\n        const scrollEle = select('.e-menu-vscroll', popupObj.element);\n\n        if (scrollEle) {\n          scrollEle.style.height = 'inherit';\n          scrollEle.style.maxHeight = '';\n        }\n\n        const ul = select('.e-ul', popupObj.element);\n        popupObj.element.style.maxHeight = '';\n        ul.focus();\n        this.triggerOpen(ul);\n      }\n    });\n    return popupObj;\n  }\n\n  createHeaderContainer(wrapper) {\n    wrapper = wrapper || this.getWrapper();\n    const spanElem = this.createElement('span', {\n      className: 'e-' + this.getModuleName() + '-header'\n    });\n    const tempTitle = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.title) : this.title;\n    const spanTitle = this.createElement('span', {\n      className: 'e-' + this.getModuleName() + '-title',\n      innerHTML: tempTitle\n    });\n    const spanIcon = this.createElement('span', {\n      className: 'e-icons e-' + this.getModuleName() + '-icon',\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    spanElem.appendChild(spanTitle);\n    spanElem.appendChild(spanIcon);\n    wrapper.insertBefore(spanElem, this.element);\n  }\n\n  openHamburgerMenu(e) {\n    if (this.hamburgerMode) {\n      this.triggerBeforeOpen(null, this.element, null, e, 0, 0, 'hamburger');\n    }\n  }\n\n  closeHamburgerMenu(e) {\n    const beforeCloseArgs = {\n      element: this.element,\n      parentItem: null,\n      event: e,\n      items: this.items,\n      cancel: false\n    };\n    this.trigger('beforeClose', beforeCloseArgs, observedHamburgerCloseArgs => {\n      if (!observedHamburgerCloseArgs.cancel) {\n        this.closeMenu(null, e);\n        this.element.classList.add('e-hide-menu');\n        this.trigger('onClose', {\n          element: this.element,\n          parentItem: null,\n          items: this.items\n        });\n      }\n    });\n  }\n\n  callFit(element, x, y, top, left) {\n    return fit(element, null, {\n      X: x,\n      Y: y\n    }, {\n      top: top,\n      left: left\n    });\n  }\n\n  triggerBeforeOpen(li, ul, item, e, top, left, type) {\n    const items = li ? item[this.getField('children', this.navIdx.length - 1)] : this.items;\n    const eventArgs = {\n      element: ul,\n      items: items,\n      parentItem: item,\n      event: e,\n      cancel: false,\n      top: top,\n      left: left,\n      showSubMenuOn: 'Auto'\n    };\n    const menuType = type;\n    this.trigger('beforeOpen', eventArgs, observedOpenArgs => {\n      switch (menuType) {\n        case 'menu':\n          if (!this.hamburgerMode) {\n            if (observedOpenArgs.showSubMenuOn !== 'Auto') {\n              this.showItemOnClick = !this.defaultOption;\n              this.showSubMenuOn = observedOpenArgs.showSubMenuOn;\n            }\n\n            this.top = observedOpenArgs.top;\n            this.left = observedOpenArgs.left;\n          }\n\n          this.popupWrapper.style.display = 'block';\n\n          if (!this.hamburgerMode) {\n            this.popupWrapper.style.maxHeight = this.popupWrapper.getBoundingClientRect().height + 'px';\n\n            if (this.enableScrolling) {\n              addScrolling(this.createElement, this.popupWrapper, this.uList, 'vscroll', this.enableRtl);\n            }\n\n            this.checkScrollOffset(e);\n          }\n\n          if (!this.hamburgerMode && !this.left && !this.top) {\n            this.popupObj.refreshPosition(this.lItem, true);\n            this.left = parseInt(this.popupWrapper.style.left, 10);\n            this.top = parseInt(this.popupWrapper.style.top, 10);\n\n            if (this.enableRtl) {\n              this.left = this.isNestedOrVertical ? this.left - this.popupWrapper.offsetWidth - this.lItem.parentElement.offsetWidth + 2 : this.left - this.popupWrapper.offsetWidth + this.lItem.offsetWidth;\n            }\n\n            if (this.template && (this.isReact || this.isAngular)) {\n              requestAnimationFrame(() => {\n                this.collision();\n                this.popupWrapper.style.display = '';\n              });\n            } else {\n              this.collision();\n              this.popupWrapper.style.display = '';\n            }\n          } else {\n            this.popupObj.collision = {\n              X: 'none',\n              Y: 'none'\n            };\n            this.popupWrapper.style.display = '';\n          }\n\n          break;\n\n        case 'none':\n          this.top = observedOpenArgs.top;\n          this.left = observedOpenArgs.left;\n          break;\n\n        case 'hamburger':\n          if (!observedOpenArgs.cancel) {\n            this.element.classList.remove('e-hide-menu');\n            this.triggerOpen(this.element);\n          }\n\n          break;\n      }\n\n      if (menuType !== 'hamburger') {\n        if (observedOpenArgs.cancel) {\n          if (this.isMenu) {\n            this.popupObj.destroy();\n            detach(this.popupWrapper);\n          } else if (ul.className.indexOf('e-ul') > -1) {\n            detach(ul);\n          }\n\n          this.navIdx.pop();\n        } else {\n          if (this.isMenu) {\n            if (this.hamburgerMode) {\n              this.popupWrapper.style.top = this.top + 'px';\n              this.popupWrapper.style.left = 0 + 'px';\n              this.toggleAnimation(this.popupWrapper);\n            } else {\n              this.setBlankIconStyle(this.popupWrapper);\n              this.wireKeyboardEvent(this.popupWrapper);\n              rippleEffect(this.popupWrapper, {\n                selector: '.' + ITEM\n              });\n              this.popupWrapper.style.left = this.left + 'px';\n              this.popupWrapper.style.top = this.top + 'px';\n              const animationOptions = this.animationSettings.effect !== 'None' ? {\n                name: this.animationSettings.effect,\n                duration: this.animationSettings.duration,\n                timingFunction: this.animationSettings.easing\n              } : null;\n              this.popupObj.show(animationOptions, this.lItem);\n            }\n          } else {\n            this.setBlankIconStyle(this.uList);\n            this.setPosition(this.lItem, this.uList, this.top, this.left);\n            this.toggleAnimation(this.uList);\n          }\n        }\n      }\n\n      if (this.keyType === 'right') {\n        let cul = this.getUlByNavIdx();\n        li.classList.remove(FOCUSED);\n\n        if (this.isMenu && this.navIdx.length === 1) {\n          this.removeLIStateByClass([SELECTED], [this.getWrapper()]);\n        }\n\n        li.classList.add(SELECTED);\n\n        if (this.action === ENTER) {\n          const eventArgs = {\n            element: li,\n            item: item,\n            event: e\n          };\n          this.trigger('select', eventArgs);\n        }\n\n        li.focus();\n        cul = this.getUlByNavIdx();\n        const index = this.isValidLI(cul.children[0], 0, this.action);\n        cul.children[index].classList.add(FOCUSED);\n        cul.children[index].focus();\n      }\n    });\n  }\n\n  collision() {\n    let collide;\n    collide = isCollide(this.popupWrapper, null, this.left, this.top);\n\n    if ((this.isNestedOrVertical || this.enableRtl) && (collide.indexOf('right') > -1 || collide.indexOf('left') > -1)) {\n      this.popupObj.collision.X = 'none';\n      const offWidth = closest(this.lItem, '.e-' + this.getModuleName() + '-wrapper').offsetWidth;\n      this.left = this.enableRtl ? calculatePosition(this.lItem, this.isNestedOrVertical ? 'right' : 'left', 'top').left : this.left - this.popupWrapper.offsetWidth - offWidth + 2;\n    }\n\n    collide = isCollide(this.popupWrapper, null, this.left, this.top);\n\n    if (collide.indexOf('left') > -1 || collide.indexOf('right') > -1) {\n      this.left = this.callFit(this.popupWrapper, true, false, this.top, this.left).left;\n    }\n\n    this.popupWrapper.style.left = this.left + 'px';\n  }\n\n  setBlankIconStyle(menu) {\n    const blankIconList = [].slice.call(menu.getElementsByClassName('e-blankicon'));\n\n    if (!blankIconList.length) {\n      return;\n    }\n\n    const iconLi = menu.querySelector('.e-menu-item:not(.e-blankicon):not(.e-separator)');\n    const icon = iconLi.querySelector('.e-menu-icon');\n\n    if (!icon) {\n      return;\n    }\n\n    const cssProp = this.enableRtl ? {\n      padding: 'paddingRight',\n      margin: 'marginLeft'\n    } : {\n      padding: 'paddingLeft',\n      margin: 'marginRight'\n    };\n    const iconCssProps = getComputedStyle(icon);\n    let iconSize = parseInt(iconCssProps.fontSize, 10);\n\n    if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {\n      iconSize = parseInt(iconCssProps.width, 10);\n    } // eslint:disable\n\n\n    const size = `${iconSize + parseInt( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    iconCssProps[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10)}px`;\n    blankIconList.forEach(li => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      li.style[cssProp.padding] = size;\n    }); // eslint:enable\n  }\n\n  checkScrollOffset(e) {\n    const wrapper = this.getWrapper();\n\n    if (wrapper.children[0].classList.contains('e-menu-hscroll') && this.navIdx.length === 1) {\n      const trgt = isNullOrUndefined(e) ? this.element : closest(e.target, '.' + ITEM);\n      const offsetEle = select('.e-hscroll-bar', wrapper);\n\n      if (offsetEle.scrollLeft > trgt.offsetLeft) {\n        offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;\n      }\n\n      const offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;\n      const offsetRight = trgt.offsetLeft + trgt.offsetWidth;\n\n      if (offsetLeft < offsetRight) {\n        offsetEle.scrollLeft += offsetRight - offsetLeft;\n      }\n    }\n  }\n\n  setPosition(li, ul, top, left) {\n    const px = 'px';\n    this.toggleVisiblity(ul);\n\n    if (ul === this.element || left > -1 && top > -1) {\n      let collide = isCollide(ul, null, left, top);\n\n      if (collide.indexOf('right') > -1) {\n        left = left - ul.offsetWidth;\n      }\n\n      if (collide.indexOf('bottom') > -1) {\n        const offset = this.callFit(ul, false, true, top, left);\n        top = offset.top - 20;\n\n        if (top < 0) {\n          const newTop = pageYOffset + document.documentElement.clientHeight - ul.getBoundingClientRect().height;\n\n          if (newTop > -1) {\n            top = newTop;\n          }\n        }\n      }\n\n      collide = isCollide(ul, null, left, top);\n\n      if (collide.indexOf('left') > -1) {\n        const offset = this.callFit(ul, true, false, top, left);\n        left = offset.left;\n      }\n    } else {\n      if (Browser.isDevice) {\n        top = Number(this.element.style.top.replace(px, ''));\n        left = Number(this.element.style.left.replace(px, ''));\n      } else {\n        const x = this.enableRtl ? 'left' : 'right';\n        let offset = calculatePosition(li, x, 'top');\n        top = offset.top;\n        left = offset.left;\n        const collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);\n        const xCollision = collide.indexOf('left') > -1 || collide.indexOf('right') > -1;\n\n        if (xCollision) {\n          offset = calculatePosition(li, this.enableRtl ? 'right' : 'left', 'top');\n          left = offset.left;\n        }\n\n        if (this.enableRtl || xCollision) {\n          left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;\n        }\n\n        if (collide.indexOf('bottom') > -1) {\n          offset = this.callFit(ul, false, true, top, left);\n          top = offset.top;\n        }\n      }\n    }\n\n    this.toggleVisiblity(ul, false);\n    ul.style.top = top + px;\n    ul.style.left = left + px;\n  }\n\n  toggleVisiblity(ul, isVisible$$1 = true) {\n    ul.style.visibility = isVisible$$1 ? 'hidden' : '';\n    ul.style.display = isVisible$$1 ? 'block' : 'none';\n  }\n\n  createItems(items) {\n    const level = this.navIdx ? this.navIdx.length : 0;\n    const fields = this.getFields(level);\n    const showIcon = this.hasField(items, this.getField('iconCss', level));\n    const listBaseOptions = {\n      showIcon: showIcon,\n      moduleName: 'menu',\n      fields: fields,\n      template: this.template,\n      itemNavigable: true,\n      itemCreating: args => {\n        if (!args.curData[args.fields[fields.id]]) {\n          args.curData[args.fields[fields.id]] = getUniqueID('menuitem');\n        }\n\n        args.curData.htmlAttributes = {\n          role: 'menuitem',\n          tabindex: '-1'\n        };\n\n        if (this.isMenu && !args.curData[this.getField('separator', level)]) {\n          args.curData.htmlAttributes['aria-label'] = args.curData[args.fields.text];\n        }\n\n        if (args.curData[args.fields[fields.iconCss]] === '') {\n          args.curData[args.fields[fields.iconCss]] = null;\n        }\n      },\n      itemCreated: args => {\n        if (args.curData[this.getField('separator', level)]) {\n          args.item.classList.add(SEPARATOR);\n          args.item.removeAttribute('role');\n        }\n\n        if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[this.getField('separator', level)]) {\n          args.item.classList.add('e-blankicon');\n        }\n\n        if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {\n          const span = this.createElement('span', {\n            className: ICONS + ' ' + CARET\n          });\n          args.item.appendChild(span);\n          args.item.setAttribute('aria-haspopup', 'true');\n          args.item.setAttribute('aria-expanded', 'false');\n\n          if (!this.isMenu) {\n            args.item.removeAttribute('role');\n          }\n\n          args.item.classList.add('e-menu-caret-icon');\n        }\n\n        if (this.isMenu && this.template) {\n          args.item.setAttribute('id', args.curData[args.fields.id].toString());\n          args.item.removeAttribute('data-uid');\n\n          if (args.item.classList.contains('e-level-1')) {\n            args.item.classList.remove('e-level-1');\n          }\n\n          if (args.item.classList.contains('e-has-child')) {\n            args.item.classList.remove('e-has-child');\n          }\n        }\n\n        const eventArgs = {\n          item: args.curData,\n          element: args.item\n        };\n        this.trigger('beforeItemRender', eventArgs);\n      }\n    };\n    this.setProperties({\n      'items': this.items\n    }, true);\n\n    if (this.isMenu) {\n      listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;\n    }\n\n    const ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template, this);\n    ul.setAttribute('tabindex', '0');\n\n    if (this.isMenu) {\n      ul.setAttribute('role', 'menu');\n    }\n\n    return ul;\n  }\n\n  moverHandler(e) {\n    const trgt = e.target;\n    this.liTrgt = trgt;\n    const cli = this.getLI(trgt);\n    const wrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : this.getWrapper();\n    const hdrWrapper = this.getWrapper();\n    const regex = new RegExp('-ej2menu-(.*)-popup');\n    let ulId;\n    let isDifferentElem = false;\n\n    if (!wrapper) {\n      return;\n    }\n\n    if (wrapper.id !== '') {\n      ulId = regex.exec(wrapper.id)[1];\n    } else {\n      ulId = wrapper.querySelector('ul').id;\n    }\n\n    if (ulId !== this.element.id) {\n      this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);\n\n      if (this.navIdx.length) {\n        isDifferentElem = true;\n      } else {\n        return;\n      }\n    }\n\n    if (cli && closest(cli, '.e-' + this.getModuleName() + '-wrapper') && !isDifferentElem) {\n      this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);\n      this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);\n      cli.classList.add(FOCUSED);\n\n      if (!this.showItemOnClick) {\n        this.clickHandler(e);\n      }\n    } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {\n      this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));\n    }\n\n    if (this.isMenu) {\n      if (!this.showItemOnClick && trgt.parentElement !== wrapper && !closest(trgt, '.e-' + this.getModuleName() + '-popup') && (!cli || cli && !this.getIndex(cli.id, true).length) && this.showSubMenuOn !== 'Hover') {\n        this.removeLIStateByClass([FOCUSED], [wrapper]);\n\n        if (this.navIdx.length) {\n          this.isClosed = true;\n          this.closeMenu(null, e);\n        }\n      } else if (isDifferentElem && !this.showItemOnClick) {\n        if (this.navIdx.length) {\n          this.isClosed = true;\n          this.closeMenu(null, e);\n        }\n      }\n\n      if (!this.isClosed) {\n        this.removeStateWrapper();\n      }\n\n      this.isClosed = false;\n    }\n  }\n\n  removeStateWrapper() {\n    if (this.liTrgt) {\n      const wrapper = closest(this.liTrgt, '.e-menu-vscroll');\n\n      if (this.liTrgt.tagName === 'DIV' && wrapper) {\n        this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);\n      }\n    }\n  }\n\n  removeLIStateByClass(classList$$1, element) {\n    let li;\n\n    for (let i = 0; i < element.length; i++) {\n      classList$$1.forEach(className => {\n        li = select('.' + className, element[i]);\n\n        if (li) {\n          li.classList.remove(className);\n        }\n      });\n    }\n  }\n\n  getField(propName, level = 0) {\n    const fieldName = this.fields[propName];\n    return typeof fieldName === 'string' ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();\n  }\n\n  getFields(level = 0) {\n    return {\n      id: this.getField('itemId', level),\n      iconCss: this.getField('iconCss', level),\n      text: this.getField('text', level),\n      url: this.getField('url', level),\n      child: this.getField('children', level),\n      separator: this.getField('separator', level)\n    };\n  }\n\n  hasField(items, field) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      if (items[i][field]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  menuHeaderClickHandler(e) {\n    if (closest(e.target, '.e-menu-wrapper').querySelector('ul.e-menu-parent').id !== this.element.id) {\n      return;\n    }\n\n    if (this.element.className.indexOf('e-hide-menu') > -1) {\n      this.openHamburgerMenu(e);\n    } else {\n      this.closeHamburgerMenu(e);\n    }\n  }\n\n  clickHandler(e) {\n    if (this.isTapHold) {\n      this.isTapHold = false;\n    } else {\n      const wrapper = this.getWrapper();\n      const trgt = e.target;\n      const cli = this.cli = this.getLI(trgt);\n      const regex = new RegExp('-ej2menu-(.*)-popup');\n      const cliWrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : null;\n      const isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);\n\n      if (Browser.isDevice && this.isMenu) {\n        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));\n        this.mouseDownHandler(e);\n      }\n\n      if (cli && cliWrapper && this.isMenu) {\n        const cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector('.e-menu-parent').id;\n\n        if (this.element.id !== cliWrapperId) {\n          return;\n        }\n      }\n\n      if (isInstLI && e.type === 'click' && !cli.classList.contains(HEADER)) {\n        this.setLISelected(cli);\n        const navIdx = this.getIndex(cli.id, true);\n        const item = this.getItem(navIdx);\n        const eventArgs = {\n          element: cli,\n          item: item,\n          event: e\n        };\n        this.trigger('select', eventArgs);\n      }\n\n      if (isInstLI && (e.type === 'mouseover' || Browser.isDevice || this.showItemOnClick)) {\n        let ul;\n\n        if (cli.classList.contains(HEADER)) {\n          ul = wrapper.children[this.navIdx.length - 1];\n          this.toggleAnimation(ul);\n          const sli = this.getLIByClass(ul, SELECTED);\n\n          if (sli) {\n            sli.classList.remove(SELECTED);\n          }\n\n          detach(cli.parentNode);\n          this.navIdx.pop();\n        } else {\n          if (!cli.classList.contains(SEPARATOR)) {\n            this.showSubMenu = true;\n            const cul = cli.parentNode;\n            this.cliIdx = this.getIdx(cul, cli);\n\n            if (this.isMenu || !Browser.isDevice) {\n              const culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), closest(cul, '.' + 'e-' + this.getModuleName() + '-wrapper')) : this.getIdx(wrapper, cul);\n\n              if (this.navIdx[culIdx] === this.cliIdx) {\n                this.showSubMenu = false;\n              }\n\n              if (culIdx !== this.navIdx.length && (e.type !== 'mouseover' || this.showSubMenu)) {\n                const sli = this.getLIByClass(cul, SELECTED);\n\n                if (sli) {\n                  sli.classList.remove(SELECTED);\n                }\n\n                this.isClosed = true;\n                this.keyType = 'click';\n\n                if (this.showItemOnClick) {\n                  this.setLISelected(cli);\n                }\n\n                this.closeMenu(culIdx + 1, e);\n\n                if (this.showItemOnClick) {\n                  this.setLISelected(cli);\n                }\n              }\n            }\n\n            if (!this.isClosed) {\n              this.afterCloseMenu(e);\n            }\n\n            this.isClosed = false;\n          }\n        }\n      } else {\n        if (this.isMenu && trgt.tagName === 'DIV' && this.navIdx.length && closest(trgt, '.e-menu-vscroll')) {\n          const popupEle = closest(trgt, '.' + POPUP);\n          const cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;\n\n          if (cIdx < this.navIdx.length) {\n            this.closeMenu(cIdx + 1, e);\n\n            if (popupEle) {\n              this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);\n            }\n          }\n        } else if (this.isMenu && this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {\n          this.menuHeaderClickHandler(e);\n        } else {\n          if (trgt.tagName !== 'UL' || (this.isMenu ? trgt.parentElement.classList.contains('e-menu-wrapper') && !this.getIndex(trgt.querySelector('.' + ITEM).id, true).length : trgt.parentElement !== wrapper)) {\n            if (!cli) {\n              this.removeLIStateByClass([SELECTED], [wrapper]);\n            }\n\n            if (!cli || !cli.querySelector('.' + CARET)) {\n              this.closeMenu(null, e);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  afterCloseMenu(e) {\n    let isHeader;\n\n    if (this.showSubMenu) {\n      if (this.showItemOnClick && this.navIdx.length === 0) {\n        isHeader = closest(e.target, '.e-menu-parent.e-control');\n      } else {\n        isHeader = closest(this.element, '.e-menu-parent.e-control');\n      }\n\n      const idx = this.navIdx.concat(this.cliIdx);\n      const item = this.getItem(idx);\n\n      if (item && item[this.getField('children', idx.length - 1)] && item[this.getField('children', idx.length - 1)].length) {\n        if (e.type === 'mouseover' || Browser.isDevice && this.isMenu) {\n          this.setLISelected(this.cli);\n        }\n\n        if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute('aria-expanded') === 'false') {\n          this.cli.setAttribute('aria-expanded', 'true');\n          this.navIdx.push(this.cliIdx);\n          this.openMenu(this.cli, item, null, null, e);\n        }\n      } else {\n        if (e.type !== 'mouseover') {\n          this.closeMenu(null, e);\n        }\n      }\n\n      if (!isHeader) {\n        const cul = this.getUlByNavIdx();\n        const sli = this.getLIByClass(cul, SELECTED);\n\n        if (sli) {\n          sli.setAttribute('aria-expanded', 'false');\n          sli.classList.remove(SELECTED);\n        }\n      }\n    }\n\n    this.keyType = '';\n  }\n\n  setLISelected(li) {\n    const sli = this.getLIByClass(li.parentElement, SELECTED);\n\n    if (sli) {\n      sli.classList.remove(SELECTED);\n    }\n\n    if (!this.isMenu) {\n      li.classList.remove(FOCUSED);\n    }\n\n    li.classList.add(SELECTED);\n  }\n\n  getLIByClass(ul, classname) {\n    for (let i = 0, len = ul.children.length; i < len; i++) {\n      if (ul.children[i].classList.contains(classname)) {\n        return ul.children[i];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * This method is used to get the index of the menu item in the Menu based on the argument.\n   *\n   * @param {MenuItem | string} item - item be passed to get the index | id to be passed to get the item index.\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\n   * @returns {void}\n   */\n\n\n  getItemIndex(item, isUniqueId) {\n    let idx;\n\n    if (typeof item === 'string') {\n      idx = item;\n    } else {\n      idx = item.id;\n    }\n\n    const isText = isUniqueId === false ? false : true;\n    const navIdx = this.getIndex(idx, isText);\n    return navIdx;\n  }\n  /**\n   * This method is used to set the menu item in the Menu based on the argument.\n   *\n   * @param {MenuItem} item - item need to be updated.\n   * @param {string} id - id / text to be passed to update the item.\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\n   * @returns {void}\n   */\n\n\n  setItem(item, id, isUniqueId) {\n    let idx;\n\n    if (isUniqueId) {\n      idx = id ? id : item.id;\n    } else {\n      idx = id ? id : item.text;\n    }\n\n    const navIdx = this.getIndex(idx, isUniqueId);\n    const newItem = this.getItem(navIdx);\n    newItem.iconCss = item.iconCss || newItem.iconCss;\n    newItem.text = item.text || newItem.text;\n    newItem.url = item.url || newItem.url;\n    newItem.separator = item.separator || newItem.separator;\n  }\n\n  getItem(navIdx) {\n    navIdx = navIdx.slice();\n    const idx = navIdx.pop();\n    const items = this.getItems(navIdx);\n    return items[idx];\n  }\n\n  getItems(navIdx) {\n    let items = this.items;\n\n    for (let i = 0; i < navIdx.length; i++) {\n      items = items[navIdx[i]][this.getField('children', i)];\n    }\n\n    return items;\n  }\n\n  setItems(newItems, navIdx) {\n    const items = this.getItems(navIdx);\n    items.splice(0, items.length);\n\n    for (let i = 0; i < newItems.length; i++) {\n      items.splice(i, 0, newItems[i]);\n    }\n  }\n\n  getIdx(ul, li, skipHdr = true) {\n    let idx = Array.prototype.indexOf.call(ul.children, li);\n\n    if (skipHdr && ul.children[0].classList.contains(HEADER)) {\n      idx--;\n    }\n\n    return idx;\n  }\n\n  getLI(elem) {\n    if (elem.tagName === 'LI' && elem.classList.contains('e-menu-item')) {\n      return elem;\n    }\n\n    return closest(elem, 'li.e-menu-item');\n  }\n\n  updateItemsByNavIdx() {\n    let items = this.items;\n    let count = 0;\n\n    for (let index = 0; index < this.navIdx.length; index++) {\n      items = items[index].items;\n\n      if (!items) {\n        break;\n      }\n\n      count++;\n      const ul = this.getUlByNavIdx(count);\n\n      if (!ul) {\n        break;\n      }\n\n      this.updateItem(ul, items);\n    }\n  }\n\n  removeChildElement(elem) {\n    while (elem.firstElementChild) {\n      elem.removeChild(elem.firstElementChild);\n    }\n\n    return elem;\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @private\n   * @param {MenuBaseModel} newProp - Specifies the new properties\n   * @param {MenuBaseModel} oldProp - Specifies the old properties\n   * @returns {void}\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    const wrapper = this.getWrapper();\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([wrapper], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([wrapper], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'enableRtl':\n          wrapper.classList.toggle(RTL);\n          break;\n\n        case 'showItemOnClick':\n          this.unWireEvents();\n          this.showItemOnClick = newProp.showItemOnClick;\n          this.wireEvents();\n          break;\n\n        case 'enableScrolling':\n          if (newProp.enableScrolling) {\n            let ul;\n\n            if (this.element.classList.contains('e-vertical')) {\n              addScrolling(this.createElement, wrapper, this.element, 'vscroll', this.enableRtl);\n            } else {\n              addScrolling(this.createElement, wrapper, this.element, 'hscroll', this.enableRtl);\n            }\n\n            this.getPopups().forEach(wrapper => {\n              ul = select('.e-ul', wrapper);\n              addScrolling(this.createElement, wrapper, ul, 'vscroll', this.enableRtl);\n            });\n          } else {\n            let ul = wrapper.children[0];\n\n            if (this.element.classList.contains('e-vertical')) {\n              destroyScroll(getInstance(ul, VScroll), ul);\n            } else {\n              destroyScroll(getInstance(ul, HScroll), ul);\n            }\n\n            wrapper.style.overflow = '';\n            wrapper.appendChild(this.element);\n            this.getPopups().forEach(wrapper => {\n              ul = wrapper.children[0];\n              destroyScroll(getInstance(ul, VScroll), ul);\n              wrapper.style.overflow = '';\n            });\n          }\n\n          break;\n\n        case 'items':\n          {\n            let idx;\n            let navIdx;\n            let item;\n\n            if (!Object.keys(oldProp.items).length) {\n              this.updateItem(this.element, this.items);\n\n              if (!this.hamburgerMode) {\n                for (let i = 1, count = wrapper.childElementCount; i < count; i++) {\n                  detach(wrapper.lastElementChild);\n                }\n              }\n\n              this.navIdx = [];\n            } else {\n              const keys = Object.keys(newProp.items);\n\n              for (let i = 0; i < keys.length; i++) {\n                navIdx = this.getChangedItemIndex(newProp, [], Number(keys[i]));\n\n                if (navIdx.length <= this.getWrapper().children.length) {\n                  idx = navIdx.pop();\n                  item = this.getItems(navIdx);\n                  this.insertAfter([item[idx]], item[idx].text);\n                  this.removeItem(item, navIdx, idx);\n                  this.setItems(item, navIdx);\n                }\n\n                navIdx.length = 0;\n              }\n            }\n\n            break;\n          }\n      }\n    }\n  }\n\n  updateItem(ul, items) {\n    if (isBlazor() && !this.isMenu) {\n      ul = this.removeChildElement(ul);\n    } else {\n      ul.innerHTML = '';\n    }\n\n    const lis = [].slice.call(this.createItems(items).children);\n    lis.forEach(li => {\n      ul.appendChild(li);\n    });\n  }\n\n  getChangedItemIndex(newProp, index, idx) {\n    index.push(idx);\n    const key = Object.keys(newProp.items[idx]).pop();\n\n    if (key === 'items') {\n      const item = newProp.items[idx];\n      const popStr = Object.keys(item.items).pop();\n\n      if (popStr) {\n        this.getChangedItemIndex(item, index, Number(popStr));\n      }\n    } else {\n      if (key === 'isParentArray' && index.length > 1) {\n        index.pop();\n      }\n    }\n\n    return index;\n  }\n\n  removeItem(item, navIdx, idx) {\n    item.splice(idx, 1);\n    const uls = this.getWrapper().children;\n\n    if (navIdx.length < uls.length) {\n      detach(uls[navIdx.length].children[idx]);\n    }\n  }\n  /**\n   * Used to unwire the bind events.\n   *\n   * @private\n   * @param {string} targetSelctor - Specifies the target selector\n   * @returns {void}\n   */\n\n\n  unWireEvents(targetSelctor = this.target) {\n    const wrapper = this.getWrapper();\n\n    if (targetSelctor) {\n      let target;\n      let touchModule;\n      const targetElems = selectAll(targetSelctor);\n\n      for (let i = 0, len = targetElems.length; i < len; i++) {\n        target = targetElems[i];\n\n        if (this.isMenu) {\n          EventHandler.remove(target, 'click', this.menuHeaderClickHandler);\n        } else {\n          if (Browser.isIos) {\n            touchModule = getInstance(target, Touch);\n\n            if (touchModule) {\n              touchModule.destroy();\n            }\n          } else {\n            EventHandler.remove(target, 'contextmenu', this.cmenuHandler);\n          }\n        }\n      }\n\n      if (!this.isMenu) {\n        EventHandler.remove(this.targetElement, 'scroll', this.scrollHandler);\n\n        for (const parent of getScrollableParent(this.targetElement)) {\n          EventHandler.remove(parent, 'scroll', this.scrollHandler);\n        }\n      }\n    }\n\n    if (!Browser.isDevice) {\n      EventHandler.remove(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler);\n      EventHandler.remove(document, 'mousedown', this.delegateMouseDownHandler);\n    }\n\n    EventHandler.remove(document, 'click', this.delegateClickHandler);\n    this.unWireKeyboardEvent(wrapper);\n    this.rippleFn();\n  }\n\n  unWireKeyboardEvent(element) {\n    const keyboardModule = getInstance(element, KeyboardEvents);\n\n    if (keyboardModule) {\n      keyboardModule.destroy();\n    }\n  }\n\n  toggleAnimation(ul, isMenuOpen = true) {\n    let pUlHeight;\n    let pElement;\n\n    if (this.animationSettings.effect === 'None' || !isMenuOpen) {\n      this.end(ul, isMenuOpen);\n    } else {\n      this.animation.animate(ul, {\n        name: this.animationSettings.effect,\n        duration: this.animationSettings.duration,\n        timingFunction: this.animationSettings.easing,\n        begin: options => {\n          if (this.hamburgerMode) {\n            pElement = options.element.parentElement;\n            options.element.style.position = 'absolute';\n            pUlHeight = pElement.offsetHeight;\n            options.element.style.maxHeight = options.element.offsetHeight + 'px';\n            pElement.style.maxHeight = '';\n          } else {\n            options.element.style.display = 'block';\n            options.element.style.maxHeight = options.element.getBoundingClientRect().height + 'px';\n          }\n        },\n        progress: options => {\n          if (this.hamburgerMode) {\n            pElement.style.minHeight = pUlHeight + options.element.offsetHeight + 'px';\n          }\n        },\n        end: options => {\n          if (this.hamburgerMode) {\n            options.element.style.position = '';\n            options.element.style.maxHeight = '';\n            pElement.style.minHeight = '';\n            options.element.style.top = 0 + 'px';\n            options.element.children[0].focus();\n            this.triggerOpen(options.element.children[0]);\n          } else {\n            this.end(options.element, isMenuOpen);\n          }\n        }\n      });\n    }\n  }\n\n  triggerOpen(ul) {\n    const item = this.navIdx.length ? this.getItem(this.navIdx) : null;\n    const eventArgs = {\n      element: ul,\n      parentItem: item,\n      items: item ? item.items : this.items\n    };\n    this.trigger('onOpen', eventArgs);\n  }\n\n  end(ul, isMenuOpen) {\n    if (isMenuOpen) {\n      ul.style.display = 'block';\n      ul.style.maxHeight = '';\n      this.triggerOpen(ul);\n\n      if (ul.querySelector('.' + FOCUSED)) {\n        ul.querySelector('.' + FOCUSED).focus();\n      } else {\n        const ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];\n\n        if (ele) {\n          ele.querySelector('.' + SELECTED).focus();\n        } else {\n          this.element.focus();\n        }\n      }\n    } else {\n      if (ul === this.element) {\n        const fli = this.getLIByClass(this.element, FOCUSED);\n\n        if (fli) {\n          fli.classList.remove(FOCUSED);\n        }\n\n        const sli = this.getLIByClass(this.element, SELECTED);\n\n        if (sli) {\n          sli.classList.remove(SELECTED);\n        }\n\n        ul.style.display = 'none';\n      } else {\n        detach(ul);\n      }\n    }\n  }\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n\n\n  getPersistData() {\n    return '';\n  }\n  /**\n   * Get wrapper element.\n   *\n   * @returns {Element} - Wrapper element\n   * @private\n   */\n\n\n  getWrapper() {\n    return closest(this.element, '.e-' + this.getModuleName() + '-wrapper');\n  }\n\n  getIndex(data, isUniqueId, items = this.items, nIndex = [], isCallBack = false, level = 0) {\n    let item;\n    level = isCallBack ? level + 1 : 0;\n\n    for (let i = 0, len = items.length; i < len; i++) {\n      item = items[i];\n\n      if ((isUniqueId ? item[this.getField('itemId', level)] : item[this.getField('text', level)]) === data) {\n        nIndex.push(i);\n        break;\n      } else if (item[this.getField('children', level)] && item[this.getField('children', level)].length) {\n        nIndex = this.getIndex(data, isUniqueId, item[this.getField('children', level)], nIndex, true, level);\n\n        if (nIndex[nIndex.length - 1] === -1) {\n          if (i !== len - 1) {\n            nIndex.pop();\n          }\n        } else {\n          nIndex.unshift(i);\n          break;\n        }\n      } else {\n        if (i === len - 1) {\n          nIndex.push(-1);\n        }\n      }\n    }\n\n    return !isCallBack && nIndex[0] === -1 ? [] : nIndex;\n  }\n  /**\n   * This method is used to enable or disable the menu items in the Menu based on the items and enable argument.\n   *\n   * @param {string[]} items - Text items that needs to be enabled/disabled.\n   * @param {boolean} enable - Set `true`/`false` to enable/disable the list items.\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\n   * @returns {void}\n   */\n\n\n  enableItems(items, enable = true, isUniqueId) {\n    let ul;\n    let idx;\n    let navIdx;\n    const disabled = DISABLED;\n    let skipItem;\n\n    for (let i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n\n      if (this.navIdx.length) {\n        if (navIdx.length !== 1) {\n          skipItem = false;\n\n          for (let i = 0, len = navIdx.length - 1; i < len; i++) {\n            if (navIdx[i] !== this.navIdx[i]) {\n              skipItem = true;\n              break;\n            }\n          }\n\n          if (skipItem) {\n            continue;\n          }\n        }\n      } else {\n        if (navIdx.length !== 1) {\n          continue;\n        }\n      }\n\n      idx = navIdx.pop();\n      ul = this.getUlByNavIdx(navIdx.length);\n\n      if (ul) {\n        if (enable) {\n          if (this.isMenu) {\n            ul.children[idx].classList.remove(disabled);\n            ul.children[idx].removeAttribute('aria-disabled');\n          } else {\n            if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n              ul.children[idx + 1].classList.remove(disabled);\n            } else {\n              ul.children[idx].classList.remove(disabled);\n            }\n          }\n        } else {\n          if (this.isMenu) {\n            ul.children[idx].classList.add(disabled);\n            ul.children[idx].setAttribute('aria-disabled', 'true');\n          } else {\n            if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n              ul.children[idx + 1].classList.add(disabled);\n            } else {\n              ul.children[idx].classList.add(disabled);\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * This method is used to show the menu items in the Menu based on the items text.\n   *\n   * @param {string[]} items - Text items that needs to be shown.\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\n   * @returns {void}\n   */\n\n\n  showItems(items, isUniqueId) {\n    this.showHideItems(items, false, isUniqueId);\n  }\n  /**\n   * This method is used to hide the menu items in the Menu based on the items text.\n   *\n   * @param {string[]} items - Text items that needs to be hidden.\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\n   * @returns {void}\n   */\n\n\n  hideItems(items, isUniqueId) {\n    this.showHideItems(items, true, isUniqueId);\n  }\n\n  showHideItems(items, ishide, isUniqueId) {\n    let ul;\n    let index;\n    let navIdx;\n\n    for (let i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      index = navIdx.pop();\n      ul = this.getUlByNavIdx(navIdx.length);\n\n      if (ul) {\n        if (ishide) {\n          if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n            ul.children[index + 1].classList.add(HIDE);\n          } else {\n            ul.children[index].classList.add(HIDE);\n          }\n        } else {\n          if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n            ul.children[index + 1].classList.remove(HIDE);\n          } else {\n            ul.children[index].classList.remove(HIDE);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * It is used to remove the menu items from the Menu based on the items text.\n   *\n   * @param {string[]} items Text items that needs to be removed.\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\n   * @returns {void}\n   */\n\n\n  removeItems(items, isUniqueId) {\n    let idx;\n    let navIdx;\n    let iitems;\n\n    for (let i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      idx = navIdx.pop();\n      iitems = this.getItems(navIdx);\n      this.removeItem(iitems, navIdx, idx);\n    }\n  }\n  /**\n   * It is used to insert the menu items after the specified menu item text.\n   *\n   * @param {MenuItemModel[]} items - Items that needs to be inserted.\n   * @param {string} text - Text item after that the element to be inserted.\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\n   * @returns {void}\n   */\n\n\n  insertAfter(items, text, isUniqueId) {\n    this.insertItems(items, text, isUniqueId);\n  }\n  /**\n   * It is used to insert the menu items before the specified menu item text.\n   *\n   * @param {MenuItemModel[]} items - Items that needs to be inserted.\n   * @param {string} text - Text item before that the element to be inserted.\n   * @param  {boolean} isUniqueId - Set `true` if it is a unique id.\n   * @returns {void}\n   */\n\n\n  insertBefore(items, text, isUniqueId) {\n    this.insertItems(items, text, isUniqueId, false);\n  }\n\n  insertItems(items, text, isUniqueId, isAfter = true) {\n    let li;\n    let idx;\n    let navIdx;\n    let iitems;\n    let menuitem;\n\n    for (let i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(text, isUniqueId);\n      idx = navIdx.pop();\n      iitems = this.getItems(navIdx);\n      menuitem = new MenuItem(iitems[0], 'items', items[i], true);\n      iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);\n      const uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);\n\n      if (navIdx.length < uls.length) {\n        idx = isAfter ? idx + 1 : idx;\n        li = this.createItems(iitems).children[idx];\n        const ul = this.isMenu ? select('.e-menu-parent', uls[navIdx.length]) : uls[navIdx.length];\n        ul.insertBefore(li, ul.children[idx]);\n      }\n    }\n  }\n\n  removeAttributes() {\n    ['top', 'left', 'display', 'z-index'].forEach(key => {\n      this.element.style.removeProperty(key);\n    });\n    ['role', 'tabindex', 'class', 'style'].forEach(key => {\n      if (key === 'class' && this.element.classList.contains('e-menu-parent')) {\n        this.element.classList.remove('e-menu-parent');\n      }\n\n      if (['class', 'style'].indexOf(key) === -1 || !this.element.getAttribute(key)) {\n        this.element.removeAttribute(key);\n      }\n\n      if (this.isMenu && key === 'class' && this.element.classList.contains('e-vertical')) {\n        this.element.classList.remove('e-vertical');\n      }\n    });\n  }\n  /**\n   * Destroys the widget.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    const wrapper = this.getWrapper();\n\n    if (wrapper) {\n      this.unWireEvents();\n\n      if (!this.isMenu) {\n        this.clonedElement.style.display = '';\n\n        if (this.clonedElement.tagName === 'EJS-CONTEXTMENU') {\n          addClass([this.clonedElement], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);\n          this.element = this.clonedElement;\n        } else {\n          if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === 'LI') {\n            this.setProperties({\n              'items': []\n            }, true);\n          }\n\n          if (document.getElementById(this.clonedElement.id)) {\n            const refEle = this.clonedElement.nextElementSibling;\n\n            if (refEle && refEle !== wrapper) {\n              this.clonedElement.parentElement.insertBefore(this.element, refEle);\n            } else {\n              this.clonedElement.parentElement.appendChild(this.element);\n            }\n\n            if (isBlazor() && !this.isMenu) {\n              this.element = this.removeChildElement(this.element);\n            } else {\n              this.element.innerHTML = '';\n            }\n\n            append([].slice.call(this.clonedElement.children), this.element);\n            detach(this.clonedElement);\n            this.removeAttributes();\n          }\n        }\n\n        this.clonedElement = null;\n      } else {\n        this.closeMenu();\n\n        if (isBlazor() && !this.isMenu) {\n          this.element = this.removeChildElement(this.element);\n        } else {\n          this.element.innerHTML = '';\n        }\n\n        this.removeAttributes();\n        wrapper.parentNode.insertBefore(this.element, wrapper);\n        this.clonedElement = null;\n      }\n\n      if (this.isMenu && this.clonedElement) {\n        detach(this.element);\n        wrapper.style.display = '';\n        wrapper.classList.remove('e-' + this.getModuleName() + '-wrapper');\n        wrapper.removeAttribute('data-ripple');\n      } else {\n        detach(wrapper);\n      }\n\n      super.destroy();\n\n      if (this.template) {\n        this.clearTemplate(['template']);\n      }\n    }\n\n    this.rippleFn = null;\n  }\n\n};\n\n__decorate$2([Event()], MenuBase.prototype, \"beforeItemRender\", void 0);\n\n__decorate$2([Event()], MenuBase.prototype, \"beforeOpen\", void 0);\n\n__decorate$2([Event()], MenuBase.prototype, \"onOpen\", void 0);\n\n__decorate$2([Event()], MenuBase.prototype, \"beforeClose\", void 0);\n\n__decorate$2([Event()], MenuBase.prototype, \"onClose\", void 0);\n\n__decorate$2([Event()], MenuBase.prototype, \"select\", void 0);\n\n__decorate$2([Event()], MenuBase.prototype, \"created\", void 0);\n\n__decorate$2([Property('')], MenuBase.prototype, \"cssClass\", void 0);\n\n__decorate$2([Property(0)], MenuBase.prototype, \"hoverDelay\", void 0);\n\n__decorate$2([Property(false)], MenuBase.prototype, \"showItemOnClick\", void 0);\n\n__decorate$2([Property('')], MenuBase.prototype, \"target\", void 0);\n\n__decorate$2([Property('')], MenuBase.prototype, \"filter\", void 0);\n\n__decorate$2([Property(null)], MenuBase.prototype, \"template\", void 0);\n\n__decorate$2([Property(false)], MenuBase.prototype, \"enableScrolling\", void 0);\n\n__decorate$2([Property(false)], MenuBase.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$2([Complex({\n  itemId: 'id',\n  text: 'text',\n  parentId: 'parentId',\n  iconCss: 'iconCss',\n  url: 'url',\n  separator: 'separator',\n  children: 'items'\n}, FieldSettings)], MenuBase.prototype, \"fields\", void 0);\n\n__decorate$2([Collection([], MenuItem)], MenuBase.prototype, \"items\", void 0);\n\n__decorate$2([Complex({\n  duration: 400,\n  easing: 'ease',\n  effect: 'SlideDown'\n}, MenuAnimationSettings)], MenuBase.prototype, \"animationSettings\", void 0);\n\nMenuBase = __decorate$2([NotifyPropertyChanges], MenuBase);\n/**\n * Navigation Common modules\n */\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nconst CLS_VERTICAL = 'e-vertical';\nconst CLS_ITEMS = 'e-toolbar-items';\nconst CLS_ITEM = 'e-toolbar-item';\nconst CLS_RTL$2 = 'e-rtl';\nconst CLS_SEPARATOR = 'e-separator';\nconst CLS_POPUPICON = 'e-popup-up-icon';\nconst CLS_POPUPDOWN = 'e-popup-down-icon';\nconst CLS_POPUPOPEN = 'e-popup-open';\nconst CLS_TEMPLATE = 'e-template';\nconst CLS_DISABLE$2 = 'e-overlay';\nconst CLS_POPUPTEXT = 'e-toolbar-text';\nconst CLS_TBARTEXT = 'e-popup-text';\nconst CLS_TBAROVERFLOW = 'e-overflow-show';\nconst CLS_POPOVERFLOW = 'e-overflow-hide';\nconst CLS_TBARBTN = 'e-tbar-btn';\nconst CLS_TBARNAV = 'e-hor-nav';\nconst CLS_TBARSCRLNAV = 'e-scroll-nav';\nconst CLS_TBARRIGHT = 'e-toolbar-right';\nconst CLS_TBARLEFT = 'e-toolbar-left';\nconst CLS_TBARCENTER = 'e-toolbar-center';\nconst CLS_TBARPOS = 'e-tbar-pos';\nconst CLS_HSCROLLCNT = 'e-hscroll-content';\nconst CLS_VSCROLLCNT = 'e-vscroll-content';\nconst CLS_HSCROLLBAR$1 = 'e-hscroll-bar';\nconst CLS_POPUPNAV = 'e-hor-nav';\nconst CLS_POPUPCLASS = 'e-toolbar-pop';\nconst CLS_POPUP = 'e-toolbar-popup';\nconst CLS_TBARBTNTEXT = 'e-tbar-btn-text';\nconst CLS_TBARNAVACT = 'e-nav-active';\nconst CLS_TBARIGNORE = 'e-ignore';\nconst CLS_POPPRI = 'e-popup-alone';\nconst CLS_HIDDEN = 'e-hidden';\nconst CLS_MULTIROW = 'e-toolbar-multirow';\nconst CLS_MULTIROWPOS = 'e-multirow-pos';\nconst CLS_MULTIROW_SEPARATOR = 'e-multirow-separator';\nconst CLS_EXTENDABLE_SEPARATOR = 'e-extended-separator';\nconst CLS_EXTEANDABLE_TOOLBAR = 'e-extended-toolbar';\nconst CLS_EXTENDABLECLASS = 'e-toolbar-extended';\nconst CLS_EXTENDPOPUP = 'e-expended-nav';\nconst CLS_EXTENDEDPOPOPEN = 'e-tbar-extended';\n/**\n * An item object that is used to configure Toolbar commands.\n */\n\nclass Item extends ChildProperty {}\n\n__decorate$3([Property('')], Item.prototype, \"id\", void 0);\n\n__decorate$3([Property('')], Item.prototype, \"text\", void 0);\n\n__decorate$3([Property('auto')], Item.prototype, \"width\", void 0);\n\n__decorate$3([Property('')], Item.prototype, \"cssClass\", void 0);\n\n__decorate$3([Property(false)], Item.prototype, \"showAlwaysInPopup\", void 0);\n\n__decorate$3([Property(false)], Item.prototype, \"disabled\", void 0);\n\n__decorate$3([Property('')], Item.prototype, \"prefixIcon\", void 0);\n\n__decorate$3([Property('')], Item.prototype, \"suffixIcon\", void 0);\n\n__decorate$3([Property(true)], Item.prototype, \"visible\", void 0);\n\n__decorate$3([Property('None')], Item.prototype, \"overflow\", void 0);\n\n__decorate$3([Property('')], Item.prototype, \"template\", void 0);\n\n__decorate$3([Property('Button')], Item.prototype, \"type\", void 0);\n\n__decorate$3([Property('Both')], Item.prototype, \"showTextOn\", void 0);\n\n__decorate$3([Property(null)], Item.prototype, \"htmlAttributes\", void 0);\n\n__decorate$3([Property('')], Item.prototype, \"tooltipText\", void 0);\n\n__decorate$3([Property('Left')], Item.prototype, \"align\", void 0);\n\n__decorate$3([Event()], Item.prototype, \"click\", void 0);\n/**\n * The Toolbar control contains a group of commands that are aligned horizontally.\n * ```html\n * <div id=\"toolbar\"/>\n * <script>\n *   var toolbarObj = new Toolbar();\n *   toolbarObj.appendTo(\"#toolbar\");\n * </script>\n * ```\n */\n\n\nlet Toolbar = class Toolbar extends Component {\n  /**\n   * Initializes a new instance of the Toolbar class.\n   *\n   * @param {ToolbarModel} options  - Specifies Toolbar model properties as options.\n   * @param { string | HTMLElement} element  - Specifies the element that is rendered as a Toolbar.\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.resizeContext = this.resize.bind(this);\n    /**\n     * Contains the keyboard configuration of the Toolbar.\n     */\n\n    this.keyConfigs = {\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow',\n      popupOpen: 'enter',\n      popupClose: 'escape',\n      tab: 'tab',\n      home: 'home',\n      end: 'end'\n    };\n  }\n  /**\n   * Removes the control from the DOM and also removes all its related events.\n   *\n   * @returns {void}.\n   */\n\n\n  destroy() {\n    if (this.isReact || this.isAngular) {\n      this.clearTemplate();\n    }\n\n    const btnItems = this.element.querySelectorAll('.e-control.e-btn');\n    [].slice.call(btnItems).forEach(el => {\n      if (!isNullOrUndefined(el) && !isNullOrUndefined(el.ej2_instances) && !isNullOrUndefined(el.ej2_instances[0]) && !el.ej2_instances[0].isDestroyed) {\n        el.ej2_instances[0].destroy();\n      }\n    });\n    this.unwireEvents();\n    this.tempId.forEach(ele => {\n      if (!isNullOrUndefined(this.element.querySelector(ele))) {\n        document.body.appendChild(this.element.querySelector(ele)).style.display = 'none';\n      }\n    });\n    this.destroyItems();\n\n    while (this.element.lastElementChild) {\n      this.element.removeChild(this.element.lastElementChild);\n    }\n\n    if (this.trgtEle) {\n      this.element.appendChild(this.ctrlTem);\n      this.trgtEle = null;\n      this.ctrlTem = null;\n    }\n\n    if (this.popObj) {\n      this.popObj.destroy();\n      detach(this.popObj.element);\n    }\n\n    if (this.activeEle) {\n      this.activeEle = null;\n    }\n\n    this.popObj = null;\n    this.tbarAlign = null;\n    this.tbarItemsCol = [];\n    this.remove(this.element, 'e-toolpop');\n\n    if (this.cssClass) {\n      removeClass([this.element], this.cssClass.split(' '));\n    }\n\n    this.element.removeAttribute('style');\n    ['aria-disabled', 'aria-orientation', 'aria-haspopup', 'role'].forEach(attrb => this.element.removeAttribute(attrb));\n    super.destroy();\n  }\n  /**\n   * Initialize the event handler\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    const eventArgs = {\n      enableCollision: this.enableCollision,\n      scrollStep: this.scrollStep\n    };\n    this.trigger('beforeCreate', eventArgs);\n    this.enableCollision = eventArgs.enableCollision;\n    this.scrollStep = eventArgs.scrollStep;\n    this.scrollModule = null;\n    this.popObj = null;\n    this.tempId = [];\n    this.tbarItemsCol = this.items;\n    this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;\n    this.isExtendedOpen = false;\n    this.popupPriCount = 0;\n\n    if (this.enableRtl) {\n      this.add(this.element, CLS_RTL$2);\n    }\n  }\n\n  wireEvents() {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    window.addEventListener('resize', this.resizeContext);\n\n    if (this.allowKeyboard) {\n      this.wireKeyboardEvent();\n    }\n  }\n\n  wireKeyboardEvent() {\n    this.keyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n    EventHandler.add(this.element, 'keydown', this.docKeyDown, this);\n    this.element.setAttribute('tabIndex', '0');\n  }\n\n  unwireKeyboardEvent() {\n    if (this.keyModule) {\n      EventHandler.remove(this.element, 'keydown', this.docKeyDown);\n      this.keyModule.destroy();\n      this.keyModule = null;\n    }\n  }\n\n  docKeyDown(e) {\n    if (e.target.tagName === 'INPUT') {\n      return;\n    }\n\n    const popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && this.overflowMode !== 'Extended';\n\n    if (e.keyCode === 9 && e.target.classList.contains('e-hor-nav') === true && popCheck) {\n      this.popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    }\n\n    const keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;\n\n    if (keyCheck) {\n      e.preventDefault();\n    }\n  }\n\n  unwireEvents() {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    this.destroyScroll();\n    this.unwireKeyboardEvent();\n    window.removeEventListener('resize', this.resizeContext);\n    EventHandler.remove(document, 'scroll', this.docEvent);\n    EventHandler.remove(document, 'click', this.docEvent);\n  }\n\n  clearProperty() {\n    this.tbarEle = [];\n    this.tbarAlgEle = {\n      lefts: [],\n      centers: [],\n      rights: []\n    };\n  }\n\n  docEvent(e) {\n    const popEle = closest(e.target, '.e-popup');\n\n    if (this.popObj && isVisible(this.popObj.element) && !popEle && this.overflowMode === 'Popup') {\n      this.popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    }\n  }\n\n  destroyScroll() {\n    if (this.scrollModule) {\n      if (this.tbarAlign) {\n        this.add(this.scrollModule.element, CLS_TBARPOS);\n      }\n\n      this.scrollModule.destroy();\n      this.scrollModule = null;\n    }\n  }\n\n  destroyItems() {\n    if (this.element) {\n      [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(el => {\n        detach(el);\n      });\n    }\n\n    if (this.tbarAlign) {\n      const tbarItems = this.element.querySelector('.' + CLS_ITEMS);\n      [].slice.call(tbarItems.children).forEach(el => {\n        detach(el);\n      });\n      this.tbarAlign = false;\n      this.remove(tbarItems, CLS_TBARPOS);\n    }\n\n    this.clearProperty();\n  }\n\n  destroyMode() {\n    if (this.scrollModule) {\n      this.remove(this.scrollModule.element, CLS_RTL$2);\n      this.destroyScroll();\n    }\n\n    this.remove(this.element, CLS_EXTENDEDPOPOPEN);\n    this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);\n    const tempEle = this.element.querySelector('.e-toolbar-multirow');\n\n    if (tempEle) {\n      this.remove(tempEle, CLS_MULTIROW);\n    }\n\n    if (this.popObj) {\n      this.popupRefresh(this.popObj.element, true);\n    }\n  }\n\n  add(ele, val) {\n    ele.classList.add(val);\n  }\n\n  remove(ele, val) {\n    ele.classList.remove(val);\n  }\n\n  elementFocus(ele) {\n    const fChild = ele.firstElementChild;\n\n    if (fChild) {\n      fChild.focus();\n      this.activeEleSwitch(ele);\n    } else {\n      ele.focus();\n    }\n  }\n\n  clstElement(tbrNavChk, trgt) {\n    let clst;\n\n    if (tbrNavChk && this.popObj && isVisible(this.popObj.element)) {\n      clst = this.popObj.element.querySelector('.' + CLS_ITEM);\n    } else if (this.element === trgt || tbrNavChk) {\n      clst = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE$2 + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');\n    } else {\n      clst = closest(trgt, '.' + CLS_ITEM);\n    }\n\n    return clst;\n  }\n\n  keyHandling(clst, e, trgt, navChk, scrollChk) {\n    const popObj = this.popObj;\n    const rootEle = this.element;\n    const popAnimate = {\n      name: 'FadeOut',\n      duration: 100\n    };\n    const value = e.action === 'moveUp' ? 'previous' : 'next';\n    let ele;\n    let nodes;\n\n    switch (e.action) {\n      case 'moveRight':\n        if (this.isVertical) {\n          return;\n        }\n\n        if (rootEle === trgt) {\n          this.elementFocus(clst);\n        } else if (!navChk) {\n          this.eleFocus(clst, 'next');\n        }\n\n        break;\n\n      case 'moveLeft':\n        if (this.isVertical) {\n          return;\n        }\n\n        if (!navChk) {\n          this.eleFocus(clst, 'previous');\n        }\n\n        break;\n\n      case 'home':\n      case 'end':\n        if (clst) {\n          let popupCheck = closest(clst, '.e-popup');\n          const extendedPopup = this.element.querySelector('.' + CLS_EXTENDABLECLASS);\n\n          if (this.overflowMode === 'Extended' && extendedPopup && extendedPopup.classList.contains('e-popup-open')) {\n            popupCheck = e.action === 'end' ? extendedPopup : null;\n          }\n\n          if (popupCheck) {\n            if (isVisible(this.popObj.element)) {\n              nodes = [].slice.call(popupCheck.children);\n\n              if (e.action === 'home') {\n                ele = nodes[0];\n              } else {\n                ele = nodes[nodes.length - 1];\n              }\n            }\n          } else {\n            nodes = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + ')');\n\n            if (e.action === 'home') {\n              ele = nodes[0];\n            } else {\n              ele = nodes[nodes.length - 1];\n            }\n          }\n\n          if (ele) {\n            this.elementFocus(ele);\n          }\n        }\n\n        break;\n\n      case 'moveUp':\n      case 'moveDown':\n        if (!this.isVertical) {\n          if (popObj && closest(trgt, '.e-popup')) {\n            const popEle = popObj.element;\n            const popFrstEle = popEle.firstElementChild;\n\n            if (value === 'previous' && popFrstEle === clst || value === 'next' && popEle.lastElementChild === clst) {\n              return;\n            } else {\n              this.eleFocus(clst, value);\n            }\n          } else if (e.action === 'moveDown' && popObj && isVisible(popObj.element)) {\n            this.elementFocus(clst);\n          }\n        } else {\n          if (e.action === 'moveUp') {\n            this.eleFocus(clst, 'previous');\n          } else {\n            this.eleFocus(clst, 'next');\n          }\n        }\n\n        break;\n\n      case 'tab':\n        if (!scrollChk && !navChk) {\n          const ele = clst.firstElementChild;\n\n          if (rootEle === trgt) {\n            if (this.activeEle) {\n              this.activeEle.focus();\n            } else {\n              this.activeEleRemove(ele);\n              ele.focus();\n            }\n\n            this.element.removeAttribute('tabindex');\n          }\n        }\n\n        break;\n\n      case 'popupClose':\n        if (popObj && this.overflowMode !== 'Extended') {\n          popObj.hide(popAnimate);\n        }\n\n        break;\n\n      case 'popupOpen':\n        if (!navChk) {\n          return;\n        }\n\n        if (popObj && !isVisible(popObj.element)) {\n          popObj.element.style.top = rootEle.offsetHeight + 'px';\n          popObj.show({\n            name: 'FadeIn',\n            duration: 100\n          });\n        } else {\n          popObj.hide(popAnimate);\n        }\n\n        break;\n    }\n  }\n\n  keyActionHandler(e) {\n    const trgt = e.target;\n\n    if (trgt.tagName === 'INPUT' || trgt.tagName === 'TEXTAREA' || this.element.classList.contains(CLS_DISABLE$2)) {\n      return;\n    }\n\n    e.preventDefault();\n    const tbrNavChk = trgt.classList.contains(CLS_TBARNAV);\n    const tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);\n    const clst = this.clstElement(tbrNavChk, trgt);\n\n    if (clst || tbarScrollChk) {\n      this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);\n    }\n  }\n  /**\n   * Specifies the value to disable/enable the Toolbar component.\n   * When set to `true`, the component will be disabled.\n   *\n   * @param  {boolean} value - Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).\n   * @returns {void}.\n   */\n\n\n  disable(value) {\n    const rootEle = this.element;\n\n    if (value) {\n      rootEle.classList.add(CLS_DISABLE$2);\n    } else {\n      rootEle.classList.remove(CLS_DISABLE$2);\n    }\n\n    rootEle.setAttribute('tabindex', !value ? '0' : '-1');\n\n    if (this.activeEle) {\n      this.activeEle.setAttribute('tabindex', !value ? '0' : '-1');\n    }\n\n    if (this.scrollModule) {\n      this.scrollModule.disable(value);\n    }\n\n    if (this.popObj) {\n      if (isVisible(this.popObj.element) && this.overflowMode !== 'Extended') {\n        this.popObj.hide();\n      }\n\n      rootEle.querySelector('#' + rootEle.id + '_nav').setAttribute('tabindex', !value ? '0' : '-1');\n    }\n  }\n\n  eleContains(el) {\n    return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE$2) || el.getAttribute('disabled') || el.classList.contains(CLS_HIDDEN) || !isVisible(el);\n  }\n\n  eleFocus(closest$$1, pos) {\n    const sib = Object(closest$$1)[pos + 'ElementSibling'];\n\n    if (sib) {\n      const skipEle = this.eleContains(sib);\n\n      if (skipEle) {\n        this.eleFocus(sib, pos);\n        return;\n      }\n\n      this.elementFocus(sib);\n    } else if (this.tbarAlign) {\n      let elem = Object(closest$$1.parentElement)[pos + 'ElementSibling'];\n\n      if (!isNullOrUndefined(elem) && elem.children.length === 0) {\n        elem = Object(elem)[pos + 'ElementSibling'];\n      }\n\n      if (!isNullOrUndefined(elem) && elem.children.length > 0) {\n        if (pos === 'next') {\n          const el = elem.querySelector('.' + CLS_ITEM);\n\n          if (this.eleContains(el)) {\n            this.eleFocus(el, pos);\n          } else {\n            el.firstElementChild.focus();\n            this.activeEleSwitch(el);\n          }\n        } else {\n          const el = elem.lastElementChild;\n\n          if (this.eleContains(el)) {\n            this.eleFocus(el, pos);\n          } else {\n            this.elementFocus(el);\n          }\n        }\n      }\n    }\n  }\n\n  clickHandler(e) {\n    const trgt = e.target;\n    const ele = this.element;\n    const isPopupElement = !isNullOrUndefined(closest(trgt, '.' + CLS_POPUPCLASS));\n    let clsList = trgt.classList;\n    let popupNav = closest(trgt, '.' + CLS_TBARNAV);\n\n    if (!popupNav) {\n      popupNav = trgt;\n    }\n\n    if (!ele.children[0].classList.contains('e-hscroll') && !ele.children[0].classList.contains('e-vscroll') && clsList.contains(CLS_TBARNAV)) {\n      clsList = trgt.querySelector('.e-icons').classList;\n    }\n\n    if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {\n      this.popupClickHandler(ele, popupNav, CLS_RTL$2);\n    }\n\n    let itemObj;\n    const clst = closest(e.target, '.' + CLS_ITEM);\n\n    if ((isNullOrUndefined(clst) || clst.classList.contains(CLS_DISABLE$2)) && !popupNav.classList.contains(CLS_TBARNAV)) {\n      return;\n    }\n\n    if (clst) {\n      const tempItem = this.items[this.tbarEle.indexOf(clst)];\n      itemObj = tempItem;\n    }\n\n    const eventArgs = {\n      originalEvent: e,\n      item: itemObj\n    };\n\n    if (itemObj && !isNullOrUndefined(itemObj.click)) {\n      this.trigger('items[' + this.tbarEle.indexOf(clst) + '].click', eventArgs);\n    }\n\n    if (!eventArgs.cancel) {\n      this.trigger('clicked', eventArgs, clickedArgs => {\n        if (!isNullOrUndefined(this.popObj) && isPopupElement && !clickedArgs.cancel && this.overflowMode === 'Popup' && clickedArgs.item && clickedArgs.item.type !== 'Input') {\n          this.popObj.hide({\n            name: 'FadeOut',\n            duration: 100\n          });\n        }\n      });\n    }\n  }\n\n  popupClickHandler(ele, popupNav, CLS_RTL) {\n    const popObj = this.popObj;\n\n    if (isVisible(popObj.element)) {\n      popupNav.classList.remove(CLS_TBARNAVACT);\n      popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    } else {\n      if (ele.classList.contains(CLS_RTL)) {\n        popObj.enableRtl = true;\n        popObj.position = {\n          X: 'left',\n          Y: 'top'\n        };\n      }\n\n      if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL)) {\n        popObj.enableRtl = false;\n        popObj.position = {\n          X: 'right',\n          Y: 'top'\n        };\n      }\n\n      popObj.dataBind();\n      popObj.refreshPosition();\n      popObj.element.style.top = this.getElementOffsetY() + 'px';\n\n      if (this.overflowMode === 'Extended') {\n        popObj.element.style.minHeight = '0px';\n      }\n\n      popupNav.classList.add(CLS_TBARNAVACT);\n      popObj.show({\n        name: 'FadeIn',\n        duration: 100\n      });\n    }\n  }\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initialize();\n    this.renderControl();\n    this.wireEvents();\n    this.renderComplete();\n  }\n\n  initialize() {\n    const width = formatUnit(this.width);\n    const height = formatUnit(this.height);\n\n    if (Browser.info.name !== 'msie' || this.height !== 'auto' || this.overflowMode === 'MultiRow') {\n      setStyleAttribute(this.element, {\n        'height': height\n      });\n    }\n\n    setStyleAttribute(this.element, {\n      'width': width\n    });\n    const ariaAttr = {\n      'role': 'toolbar',\n      'aria-disabled': 'false',\n      'aria-haspopup': 'false',\n      'aria-orientation': !this.isVertical ? 'horizontal' : 'vertical'\n    };\n    attributes(this.element, ariaAttr);\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n  }\n\n  renderControl() {\n    const ele = this.element;\n    this.trgtEle = ele.children.length > 0 ? ele.querySelector('div') : null;\n    this.tbarAlgEle = {\n      lefts: [],\n      centers: [],\n      rights: []\n    };\n    this.renderItems();\n    this.renderLayout();\n  }\n\n  renderLayout() {\n    this.renderOverflowMode();\n\n    if (this.tbarAlign) {\n      this.itemPositioning();\n    }\n\n    if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {\n      this.popupRefresh(this.popObj.element, false);\n    }\n\n    this.separator();\n  }\n\n  itemsAlign(items, itemEleDom) {\n    let innerItem;\n    let innerPos;\n\n    if (!this.tbarEle) {\n      this.tbarEle = [];\n    }\n\n    for (let i = 0; i < items.length; i++) {\n      innerItem = this.renderSubComponent(items[i], i);\n\n      if (this.tbarEle.indexOf(innerItem) === -1) {\n        this.tbarEle.push(innerItem);\n      }\n\n      if (!this.tbarAlign) {\n        this.tbarItemAlign(items[i], itemEleDom, i);\n      }\n\n      innerPos = itemEleDom.querySelector('.e-toolbar-' + items[i].align.toLowerCase());\n\n      if (innerPos) {\n        if (!(items[i].showAlwaysInPopup && items[i].overflow !== 'Show')) {\n          this.tbarAlgEle[(items[i].align + 's').toLowerCase()].push(innerItem);\n        }\n\n        innerPos.appendChild(innerItem);\n      } else {\n        itemEleDom.appendChild(innerItem);\n      }\n    }\n\n    if (this.isReact) {\n      const portals = 'portals';\n      this.notify('render-react-toolbar-template', this[portals]);\n      this.renderReactTemplates();\n    }\n  }\n  /**\n   * @hidden\n   * @returns {void}\n   */\n\n\n  changeOrientation() {\n    const ele = this.element;\n\n    if (this.isVertical) {\n      ele.classList.remove(CLS_VERTICAL);\n      this.isVertical = false;\n\n      if (this.height === 'auto' || this.height === '100%') {\n        ele.style.height = this.height;\n      }\n\n      ele.setAttribute('aria-orientation', 'horizontal');\n    } else {\n      ele.classList.add(CLS_VERTICAL);\n      this.isVertical = true;\n      ele.setAttribute('aria-orientation', 'vertical');\n      setStyleAttribute(this.element, {\n        'height': formatUnit(this.height),\n        'width': formatUnit(this.width)\n      });\n    }\n\n    this.destroyMode();\n    this.refreshOverflow();\n  }\n\n  initScroll(element, innerItems) {\n    if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {\n      if (this.tbarAlign) {\n        this.element.querySelector('.' + CLS_ITEMS + ' .' + CLS_TBARCENTER).removeAttribute('style');\n      }\n\n      if (this.isVertical) {\n        this.scrollModule = new VScroll({\n          scrollStep: this.scrollStep,\n          enableRtl: this.enableRtl\n        }, innerItems[0]);\n      } else {\n        this.scrollModule = new HScroll({\n          scrollStep: this.scrollStep,\n          enableRtl: this.enableRtl\n        }, innerItems[0]);\n      }\n\n      if (this.cssClass) {\n        addClass([innerItems[0]], this.cssClass.split(' '));\n      }\n\n      this.remove(this.scrollModule.element, CLS_TBARPOS);\n      setStyleAttribute(this.element, {\n        overflow: 'hidden'\n      });\n    }\n  }\n\n  itemWidthCal(items) {\n    let width = 0;\n    let style;\n    [].slice.call(selectAll('.' + CLS_ITEM, items)).forEach(el => {\n      if (isVisible(el)) {\n        style = window.getComputedStyle(el);\n        width += this.isVertical ? el.offsetHeight : el.offsetWidth;\n        width += parseFloat(this.isVertical ? style.marginTop : style.marginRight);\n        width += parseFloat(this.isVertical ? style.marginBottom : style.marginLeft);\n      }\n    });\n    return width;\n  }\n\n  getScrollCntEle(innerItem) {\n    const trgClass = this.isVertical ? '.e-vscroll-content' : '.e-hscroll-content';\n    return innerItem.querySelector(trgClass);\n  }\n\n  checkOverflow(element, innerItem) {\n    if (isNullOrUndefined(element) || isNullOrUndefined(innerItem) || !isVisible(element)) {\n      return false;\n    }\n\n    const eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;\n    let itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;\n\n    if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {\n      itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);\n    }\n\n    const popNav = element.querySelector('.' + CLS_TBARNAV);\n    const scrollNav = element.querySelector('.' + CLS_TBARSCRLNAV);\n    let navEleWidth = 0;\n\n    if (popNav) {\n      navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;\n    } else if (scrollNav) {\n      navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;\n    }\n\n    if (itemWidth > eleWidth - navEleWidth) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Refresh the whole Toolbar component without re-rendering.\n   * - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.\n   * - It will refresh the Toolbar component after loading items dynamically.\n   *\n   * @returns {void}.\n   */\n\n\n  refreshOverflow() {\n    this.resize();\n  }\n\n  toolbarAlign(innerItems) {\n    if (this.tbarAlign) {\n      this.add(innerItems, CLS_TBARPOS);\n      this.itemPositioning();\n    }\n  }\n\n  renderOverflowMode() {\n    const ele = this.element;\n    const innerItems = ele.querySelector('.' + CLS_ITEMS);\n    const priorityCheck = this.popupPriCount > 0;\n\n    if (ele && ele.children.length > 0) {\n      this.offsetWid = ele.offsetWidth;\n      this.remove(this.element, 'e-toolpop');\n\n      if (Browser.info.name === 'msie' && this.height === 'auto') {\n        ele.style.height = '';\n      }\n\n      switch (this.overflowMode) {\n        case 'Scrollable':\n          if (isNullOrUndefined(this.scrollModule)) {\n            this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));\n          }\n\n          break;\n\n        case 'Popup':\n          this.add(this.element, 'e-toolpop');\n\n          if (this.tbarAlign) {\n            this.removePositioning();\n          }\n\n          if (this.checkOverflow(ele, innerItems) || priorityCheck) {\n            this.setOverflowAttributes(ele);\n          }\n\n          this.toolbarAlign(innerItems);\n          break;\n\n        case 'MultiRow':\n          this.add(innerItems, CLS_MULTIROW);\n\n          if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {\n            this.removePositioning();\n            this.add(innerItems, CLS_MULTIROWPOS);\n          }\n\n          if (ele.style.overflow === 'hidden') {\n            ele.style.overflow = '';\n          }\n\n          if (Browser.info.name === 'msie' || ele.style.height !== 'auto') {\n            ele.style.height = 'auto';\n          }\n\n          break;\n\n        case 'Extended':\n          this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);\n\n          if (this.checkOverflow(ele, innerItems) || priorityCheck) {\n            if (this.tbarAlign) {\n              this.removePositioning();\n            }\n\n            this.setOverflowAttributes(ele);\n          }\n\n          this.toolbarAlign(innerItems);\n      }\n    }\n  }\n\n  setOverflowAttributes(ele) {\n    this.createPopupEle(ele, [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, ele)));\n    this.element.querySelector('.' + CLS_TBARNAV).setAttribute('tabIndex', '0');\n    this.element.querySelector('.' + CLS_TBARNAV).setAttribute('role', 'list');\n  }\n\n  separator() {\n    const element = this.element;\n    const eleItem = [].slice.call(element.querySelectorAll('.' + CLS_SEPARATOR));\n    const multiVar = element.querySelector('.' + CLS_MULTIROW_SEPARATOR);\n    const extendVar = element.querySelector('.' + CLS_EXTENDABLE_SEPARATOR);\n    const eleInlineItem = this.overflowMode === 'MultiRow' ? multiVar : extendVar;\n\n    if (eleInlineItem !== null) {\n      if (this.overflowMode === 'MultiRow') {\n        eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);\n      } else if (this.overflowMode === 'Extended') {\n        eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);\n      }\n    }\n\n    for (let i = 0; i <= eleItem.length - 1; i++) {\n      if (eleItem[i].offsetLeft < 30 && eleItem[i].offsetLeft !== 0) {\n        if (this.overflowMode === 'MultiRow') {\n          eleItem[i].classList.add(CLS_MULTIROW_SEPARATOR);\n        } else if (this.overflowMode === 'Extended') {\n          eleItem[i].classList.add(CLS_EXTENDABLE_SEPARATOR);\n        }\n      }\n    }\n  }\n\n  createPopupEle(ele, innerEle) {\n    let innerNav = ele.querySelector('.' + CLS_TBARNAV);\n    const vertical = this.isVertical;\n\n    if (!innerNav) {\n      this.createPopupIcon(ele);\n    }\n\n    innerNav = ele.querySelector('.' + CLS_TBARNAV);\n    const innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;\n    const eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;\n    this.element.classList.remove('e-rtl');\n    setStyleAttribute(this.element, {\n      direction: 'initial'\n    });\n    this.checkPriority(ele, innerEle, eleWidth, true);\n\n    if (this.enableRtl) {\n      this.element.classList.add('e-rtl');\n    }\n\n    this.element.style.removeProperty('direction');\n    this.createPopup();\n  }\n\n  pushingPoppedEle(tbarObj, popupPri, ele, eleHeight, sepHeight) {\n    const element = tbarObj.element;\n    const poppedEle = [].slice.call(selectAll('.' + CLS_POPUP, element.querySelector('.' + CLS_ITEMS)));\n    let nodes = selectAll('.' + CLS_TBAROVERFLOW, ele);\n    let nodeIndex = 0;\n    let nodePri = 0;\n    poppedEle.forEach((el, index) => {\n      nodes = selectAll('.' + CLS_TBAROVERFLOW, ele);\n\n      if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {\n        if (tbarObj.tbResize && nodes.length > index) {\n          ele.insertBefore(el, nodes[index]);\n          ++nodePri;\n        } else {\n          ele.insertBefore(el, ele.children[nodes.length]);\n          ++nodePri;\n        }\n      } else if (el.classList.contains(CLS_TBAROVERFLOW)) {\n        ele.insertBefore(el, ele.firstChild);\n        ++nodePri;\n      } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {\n        ele.insertBefore(el, ele.firstChild);\n        ++nodePri;\n      } else if (el.classList.contains(CLS_POPOVERFLOW)) {\n        popupPri.push(el);\n      } else if (tbarObj.tbResize) {\n        ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);\n        ++nodeIndex;\n      } else {\n        ele.appendChild(el);\n      }\n\n      if (el.classList.contains(CLS_SEPARATOR)) {\n        setStyleAttribute(el, {\n          display: '',\n          height: sepHeight + 'px'\n        });\n      } else {\n        setStyleAttribute(el, {\n          display: '',\n          height: eleHeight + 'px'\n        });\n      }\n    });\n    popupPri.forEach(el => {\n      ele.appendChild(el);\n    });\n    const tbarEle = selectAll('.' + CLS_ITEM, element.querySelector('.' + CLS_ITEMS));\n\n    for (let i = tbarEle.length - 1; i >= 0; i--) {\n      const tbarElement = tbarEle[i];\n\n      if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== 'Extended') {\n        setStyleAttribute(tbarElement, {\n          display: 'none'\n        });\n      } else {\n        break;\n      }\n    }\n  }\n\n  createPopup() {\n    const element = this.element;\n    let sepHeight;\n    let sepItem;\n\n    if (this.overflowMode === 'Extended') {\n      sepItem = element.querySelector('.' + CLS_SEPARATOR + ':not(.' + CLS_POPUP + ')');\n      sepHeight = element.style.height === 'auto' || element.style.height === '' ? null : sepItem.offsetHeight;\n    }\n\n    const eleItem = element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_POPUP + ')');\n    const eleHeight = element.style.height === 'auto' || element.style.height === '' ? null : eleItem && eleItem.offsetHeight;\n    let ele;\n    const popupPri = [];\n\n    if (select('#' + element.id + '_popup.' + CLS_POPUPCLASS, element)) {\n      ele = select('#' + element.id + '_popup.' + CLS_POPUPCLASS, element);\n    } else {\n      const extendEle = this.createElement('div', {\n        id: element.id + '_popup',\n        className: CLS_POPUPCLASS + ' ' + CLS_EXTENDABLECLASS\n      });\n      const popupEle = this.createElement('div', {\n        id: element.id + '_popup',\n        className: CLS_POPUPCLASS\n      });\n      ele = this.overflowMode === 'Extended' ? extendEle : popupEle;\n    }\n\n    this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);\n    this.popupInit(element, ele);\n  }\n\n  getElementOffsetY() {\n    return this.overflowMode === 'Extended' && window.getComputedStyle(this.element).getPropertyValue('box-sizing') === 'border-box' ? this.element.clientHeight : this.element.offsetHeight;\n  }\n\n  popupInit(element, ele) {\n    if (!this.popObj) {\n      element.appendChild(ele);\n\n      if (this.cssClass) {\n        addClass([ele], this.cssClass.split(' '));\n      }\n\n      setStyleAttribute(this.element, {\n        overflow: ''\n      });\n      const eleStyles = window.getComputedStyle(this.element);\n      const popup = new Popup(null, {\n        relateTo: this.element,\n        offsetY: this.isVertical ? 0 : this.getElementOffsetY(),\n        enableRtl: this.enableRtl,\n        open: this.popupOpen.bind(this),\n        close: this.popupClose.bind(this),\n        collision: {\n          Y: this.enableCollision ? 'flip' : 'none'\n        },\n        position: this.enableRtl ? {\n          X: 'left',\n          Y: 'top'\n        } : {\n          X: 'right',\n          Y: 'top'\n        }\n      });\n      popup.appendTo(ele);\n\n      if (this.overflowMode === 'Extended') {\n        popup.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;\n        popup.offsetX = 0;\n      }\n\n      EventHandler.add(document, 'scroll', this.docEvent.bind(this));\n      EventHandler.add(document, 'click ', this.docEvent.bind(this));\n      popup.element.style.maxHeight = popup.element.offsetHeight + 'px';\n\n      if (this.isVertical) {\n        popup.element.style.visibility = 'hidden';\n      }\n\n      if (this.isExtendedOpen) {\n        const popupNav = this.element.querySelector('.' + CLS_TBARNAV);\n        popupNav.classList.add(CLS_TBARNAVACT);\n        classList(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);\n        this.element.querySelector('.' + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);\n      } else {\n        popup.hide();\n      }\n\n      this.popObj = popup;\n      this.element.setAttribute('aria-haspopup', 'true');\n    } else {\n      const popupEle = this.popObj.element;\n      setStyleAttribute(popupEle, {\n        maxHeight: '',\n        display: 'block'\n      });\n      setStyleAttribute(popupEle, {\n        maxHeight: popupEle.offsetHeight + 'px',\n        display: ''\n      });\n    }\n  }\n\n  tbarPopupHandler(isOpen) {\n    if (this.overflowMode === 'Extended') {\n      if (isOpen) {\n        this.add(this.element, CLS_EXTENDEDPOPOPEN);\n      } else {\n        this.remove(this.element, CLS_EXTENDEDPOPOPEN);\n      }\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  popupOpen(e) {\n    const popObj = this.popObj;\n\n    if (!this.isVertical) {\n      popObj.offsetY = this.getElementOffsetY();\n      popObj.dataBind();\n    }\n\n    const popupEle = this.popObj.element;\n    const toolEle = this.popObj.element.parentElement;\n    const popupNav = toolEle.querySelector('.' + CLS_TBARNAV);\n    setStyleAttribute(popObj.element, {\n      height: 'auto',\n      maxHeight: ''\n    });\n    popObj.element.style.maxHeight = popObj.element.offsetHeight + 'px';\n\n    if (this.overflowMode === 'Extended') {\n      popObj.element.style.minHeight = '';\n    }\n\n    const popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top;\n    const popIcon = popupNav.firstElementChild;\n    popupNav.classList.add(CLS_TBARNAVACT);\n    classList(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);\n    this.tbarPopupHandler(true);\n    const scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;\n\n    if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {\n      let overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);\n      popObj.height = overflowHeight + 'px';\n\n      for (let i = 0; i <= popupEle.childElementCount; i++) {\n        const ele = popupEle.children[i];\n\n        if (ele.offsetTop + ele.offsetHeight > overflowHeight) {\n          overflowHeight = ele.offsetTop;\n          break;\n        }\n      }\n\n      setStyleAttribute(popObj.element, {\n        maxHeight: overflowHeight + 'px'\n      });\n    } else if (this.isVertical) {\n      const tbEleData = this.element.getBoundingClientRect();\n      setStyleAttribute(popObj.element, {\n        maxHeight: tbEleData.top + this.element.offsetHeight + 'px',\n        bottom: 0,\n        visibility: ''\n      });\n    }\n\n    if (popObj) {\n      const popupOffset = popupEle.getBoundingClientRect();\n\n      if (popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width) {\n        popObj.collision = {\n          Y: 'none'\n        };\n        popObj.dataBind();\n      }\n\n      popObj.refreshPosition();\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  popupClose(e) {\n    const element = this.element;\n    const popupNav = element.querySelector('.' + CLS_TBARNAV);\n    const popIcon = popupNav.firstElementChild;\n    popupNav.classList.remove(CLS_TBARNAVACT);\n    classList(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);\n    this.tbarPopupHandler(false);\n  }\n\n  checkPriority(ele, inEle, eleWidth, pre) {\n    const popPriority = this.popupPriCount > 0;\n    const len = inEle.length;\n    const eleWid = eleWidth;\n    let eleOffset;\n    let checkoffset;\n    let sepCheck = 0;\n    let itemCount = 0;\n    let itemPopCount = 0;\n\n    const checkClass = (ele, val) => {\n      let rVal = false;\n      val.forEach(cls => {\n        if (ele.classList.contains(cls)) {\n          rVal = true;\n        }\n      });\n      return rVal;\n    };\n\n    for (let i = len - 1; i >= 0; i--) {\n      let mrgn;\n      const compuStyle = window.getComputedStyle(inEle[i]);\n\n      if (this.isVertical) {\n        mrgn = parseFloat(compuStyle.marginTop);\n        mrgn += parseFloat(compuStyle.marginBottom);\n      } else {\n        mrgn = parseFloat(compuStyle.marginRight);\n        mrgn += parseFloat(compuStyle.marginLeft);\n      }\n\n      const fstEleCheck = inEle[i] === this.tbarEle[0];\n\n      if (fstEleCheck) {\n        this.tbarEleMrgn = mrgn;\n      }\n\n      eleOffset = this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth;\n      const eleWid = fstEleCheck ? eleOffset + mrgn : eleOffset;\n\n      if (checkClass(inEle[i], [CLS_POPPRI]) && popPriority) {\n        inEle[i].classList.add(CLS_POPUP);\n\n        if (this.isVertical) {\n          setStyleAttribute(inEle[i], {\n            display: 'none',\n            minHeight: eleWid + 'px'\n          });\n        } else {\n          setStyleAttribute(inEle[i], {\n            display: 'none',\n            minWidth: eleWid + 'px'\n          });\n        }\n\n        itemPopCount++;\n      }\n\n      if (this.isVertical) {\n        checkoffset = inEle[i].offsetTop + inEle[i].offsetHeight + mrgn > eleWidth;\n      } else {\n        checkoffset = inEle[i].offsetLeft + inEle[i].offsetWidth + mrgn > eleWidth;\n      }\n\n      if (checkoffset) {\n        if (inEle[i].classList.contains(CLS_SEPARATOR)) {\n          if (this.overflowMode === 'Extended') {\n            if (itemCount === itemPopCount) {\n              const sepEle = inEle[i];\n\n              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n                inEle[i].classList.add(CLS_POPUP);\n                itemPopCount++;\n              }\n            }\n\n            itemCount++;\n          } else if (this.overflowMode === 'Popup') {\n            if (sepCheck > 0 && itemCount === itemPopCount) {\n              const sepEle = inEle[i + itemCount + (sepCheck - 1)];\n\n              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n                setStyleAttribute(sepEle, {\n                  display: 'none'\n                });\n              }\n            }\n\n            sepCheck++;\n            itemCount = 0;\n            itemPopCount = 0;\n          }\n        } else {\n          itemCount++;\n        }\n\n        if (inEle[i].classList.contains(CLS_TBAROVERFLOW) && pre) {\n          eleWidth -= (this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + mrgn;\n        } else if (!checkClass(inEle[i], [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n          inEle[i].classList.add(CLS_POPUP);\n\n          if (this.isVertical) {\n            setStyleAttribute(inEle[i], {\n              display: 'none',\n              minHeight: eleWid + 'px'\n            });\n          } else {\n            setStyleAttribute(inEle[i], {\n              display: 'none',\n              minWidth: eleWid + 'px'\n            });\n          }\n\n          itemPopCount++;\n        } else {\n          eleWidth -= (this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + mrgn;\n        }\n      }\n    }\n\n    if (pre) {\n      const popedEle = selectAll('.' + CLS_ITEM + ':not(.' + CLS_POPUP + ')', this.element);\n      this.checkPriority(ele, popedEle, eleWid, false);\n    }\n  }\n\n  createPopupIcon(element) {\n    const id = element.id.concat('_nav');\n    let className = 'e-' + element.id.concat('_nav ' + CLS_POPUPNAV);\n    className = this.overflowMode === 'Extended' ? className + ' ' + CLS_EXTENDPOPUP : className;\n    const nav = this.createElement('div', {\n      id: id,\n      className: className\n    });\n\n    if (Browser.info.name === 'msie' || Browser.info.name === 'edge') {\n      nav.classList.add('e-ie-align');\n    }\n\n    const navItem = this.createElement('div', {\n      className: CLS_POPUPDOWN + ' e-icons'\n    });\n    nav.appendChild(navItem);\n    nav.setAttribute('tabindex', '0');\n    nav.setAttribute('role', 'list');\n    element.appendChild(nav);\n  }\n\n  tbarPriRef(inEle, indx, sepPri, el, des, elWid, wid, ig) {\n    const ignoreCount = ig;\n    const popEle = this.popObj.element;\n    const query = '.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_TBAROVERFLOW + ')';\n    const priEleCnt = selectAll('.' + CLS_POPUP + ':not(.' + CLS_TBAROVERFLOW + ')', popEle).length;\n\n    const checkClass = (ele, val) => {\n      return ele.classList.contains(val);\n    };\n\n    if (selectAll(query, inEle).length === 0) {\n      const eleSep = inEle.children[indx - (indx - sepPri) - 1];\n      const ignoreCheck = !isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);\n\n      if (!isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !isVisible(eleSep) || ignoreCheck) {\n        const sepDisplay = 'none';\n        eleSep.style.display = 'inherit';\n        const eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;\n        const prevSep = eleSep.previousElementSibling;\n\n        if (elWid + eleSepWidth < wid || des) {\n          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);\n\n          if (!isNullOrUndefined(prevSep)) {\n            prevSep.style.display = '';\n          }\n        } else {\n          if (prevSep.classList.contains(CLS_SEPARATOR)) {\n            prevSep.style.display = sepDisplay;\n          }\n        }\n\n        eleSep.style.display = '';\n      } else {\n        inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);\n      }\n    } else {\n      inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);\n    }\n  }\n\n  popupRefresh(popupEle, destroy) {\n    const ele = this.element;\n    const isVer = this.isVertical;\n    const innerEle = ele.querySelector('.' + CLS_ITEMS);\n    let popNav = ele.querySelector('.' + CLS_TBARNAV);\n\n    if (isNullOrUndefined(popNav)) {\n      return;\n    }\n\n    innerEle.removeAttribute('style');\n    popupEle.style.display = 'block';\n    let dimension;\n\n    if (isVer) {\n      dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);\n    } else {\n      dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);\n    }\n\n    let popupEleWidth = 0;\n    [].slice.call(popupEle.children).forEach(el => {\n      popupEleWidth += this.popupEleWidth(el);\n      setStyleAttribute(el, {\n        'position': ''\n      });\n    });\n\n    if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {\n      destroy = true;\n    }\n\n    this.popupEleRefresh(dimension, popupEle, destroy);\n    popupEle.style.display = '';\n\n    if (popupEle.children.length === 0 && popNav && this.popObj) {\n      detach(popNav);\n      popNav = null;\n      this.popObj.destroy();\n      detach(this.popObj.element);\n      this.popObj = null;\n      ele.setAttribute('aria-haspopup', 'false');\n    }\n  }\n\n  ignoreEleFetch(index, innerEle) {\n    const ignoreEle = [].slice.call(innerEle.querySelectorAll('.' + CLS_TBARIGNORE));\n    const ignoreInx = [];\n    let count = 0;\n\n    if (ignoreEle.length > 0) {\n      ignoreEle.forEach(ele => {\n        ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));\n      });\n    } else {\n      return 0;\n    }\n\n    ignoreInx.forEach(val => {\n      if (val <= index) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  checkPopupRefresh(root, popEle) {\n    popEle.style.display = 'block';\n    const elWid = this.popupEleWidth(popEle.firstElementChild);\n    popEle.firstElementChild.style.removeProperty('Position');\n    const tbarWidth = root.offsetWidth - root.querySelector('.' + CLS_TBARNAV).offsetWidth;\n    const tbarItemsWid = root.querySelector('.' + CLS_ITEMS).offsetWidth;\n    popEle.style.removeProperty('display');\n\n    if (tbarWidth > elWid + tbarItemsWid) {\n      return true;\n    }\n\n    return false;\n  }\n\n  popupEleWidth(el) {\n    el.style.position = 'absolute';\n    let elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;\n    const btnText = el.querySelector('.' + CLS_TBARBTNTEXT);\n\n    if (el.classList.contains('e-tbtn-align') || el.classList.contains(CLS_TBARTEXT)) {\n      const btn = el.children[0];\n\n      if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_TBARTEXT)) {\n        btnText.style.display = 'none';\n      } else if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_POPUPTEXT)) {\n        btnText.style.display = 'block';\n      }\n\n      btn.style.minWidth = '0%';\n      elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);\n      btn.style.minWidth = '';\n      btn.style.minHeight = '';\n\n      if (!isNullOrUndefined(btnText)) {\n        btnText.style.display = '';\n      }\n    }\n\n    return elWidth;\n  }\n\n  popupEleRefresh(width, popupEle, destroy) {\n    const popPriority = this.popupPriCount > 0;\n    let eleSplice = this.tbarEle;\n    let priEleCnt;\n    let index;\n    let innerEle = this.element.querySelector('.' + CLS_ITEMS);\n    let ignoreCount = 0;\n\n    for (const el of [].slice.call(popupEle.children)) {\n      if (el.classList.contains(CLS_POPPRI) && popPriority && !destroy) {\n        continue;\n      }\n\n      let elWidth = this.popupEleWidth(el);\n\n      if (el === this.tbarEle[0]) {\n        elWidth += this.tbarEleMrgn;\n      }\n\n      el.style.position = '';\n\n      if (elWidth < width || destroy) {\n        setStyleAttribute(el, {\n          minWidth: '',\n          height: '',\n          minHeight: ''\n        });\n\n        if (!el.classList.contains(CLS_POPOVERFLOW)) {\n          el.classList.remove(CLS_POPUP);\n        }\n\n        index = this.tbarEle.indexOf(el);\n\n        if (this.tbarAlign) {\n          const pos = this.items[index].align;\n          index = this.tbarAlgEle[(pos + 's').toLowerCase()].indexOf(el);\n          eleSplice = this.tbarAlgEle[(pos + 's').toLowerCase()];\n          innerEle = this.element.querySelector('.' + CLS_ITEMS + ' .' + 'e-toolbar-' + pos.toLowerCase());\n        }\n\n        let sepBeforePri = 0;\n\n        if (this.overflowMode !== 'Extended') {\n          eleSplice.slice(0, index).forEach(el => {\n            if (el.classList.contains(CLS_TBAROVERFLOW) || el.classList.contains(CLS_SEPARATOR)) {\n              if (el.classList.contains(CLS_SEPARATOR)) {\n                el.style.display = '';\n                width -= el.offsetWidth;\n              }\n\n              sepBeforePri++;\n            }\n          });\n        }\n\n        ignoreCount = this.ignoreEleFetch(index, innerEle);\n\n        if (el.classList.contains(CLS_TBAROVERFLOW)) {\n          this.tbarPriRef(innerEle, index, sepBeforePri, el, destroy, elWidth, width, ignoreCount);\n          width -= el.offsetWidth;\n        } else if (index === 0) {\n          innerEle.insertBefore(el, innerEle.firstChild);\n          width -= el.offsetWidth;\n        } else {\n          priEleCnt = selectAll('.' + CLS_TBAROVERFLOW, this.popObj.element).length;\n          innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt]);\n          width -= el.offsetWidth;\n        }\n\n        el.style.height = '';\n      } else {\n        break;\n      }\n    }\n\n    const checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);\n\n    if (checkOverflow && !destroy) {\n      this.renderOverflowMode();\n    }\n  }\n\n  removePositioning() {\n    const item = this.element.querySelector('.' + CLS_ITEMS);\n\n    if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {\n      return;\n    }\n\n    this.remove(item, CLS_TBARPOS);\n    const innerItem = [].slice.call(item.childNodes);\n    innerItem[1].removeAttribute('style');\n    innerItem[2].removeAttribute('style');\n  }\n\n  refreshPositioning() {\n    const item = this.element.querySelector('.' + CLS_ITEMS);\n    this.add(item, CLS_TBARPOS);\n    this.itemPositioning();\n  }\n\n  itemPositioning() {\n    const item = this.element.querySelector('.' + CLS_ITEMS);\n    let margin;\n\n    if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {\n      return;\n    }\n\n    const popupNav = this.element.querySelector('.' + CLS_TBARNAV);\n    let innerItem;\n\n    if (this.scrollModule) {\n      const trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;\n      innerItem = [].slice.call(item.querySelector('.' + trgClass).children);\n    } else {\n      innerItem = [].slice.call(item.childNodes);\n    }\n\n    if (this.isVertical) {\n      margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;\n    } else {\n      margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;\n    }\n\n    let tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;\n\n    if (popupNav) {\n      tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;\n      const popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + 'px';\n      innerItem[2].removeAttribute('style');\n\n      if (this.isVertical) {\n        if (this.enableRtl) {\n          innerItem[2].style.top = popWid;\n        } else {\n          innerItem[2].style.bottom = popWid;\n        }\n      } else {\n        if (this.enableRtl) {\n          innerItem[2].style.left = popWid;\n        } else {\n          innerItem[2].style.right = popWid;\n        }\n      }\n    }\n\n    if (tbarWid <= margin) {\n      return;\n    }\n\n    const value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;\n    innerItem[1].removeAttribute('style');\n    const mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + 'px';\n\n    if (this.isVertical) {\n      if (this.enableRtl) {\n        innerItem[1].style.marginBottom = mrgn;\n      } else {\n        innerItem[1].style.marginTop = mrgn;\n      }\n    } else {\n      if (this.enableRtl) {\n        innerItem[1].style.marginRight = mrgn;\n      } else {\n        innerItem[1].style.marginLeft = mrgn;\n      }\n    }\n  }\n\n  tbarItemAlign(item, itemEle, pos) {\n    if (item.showAlwaysInPopup && item.overflow !== 'Show') {\n      return;\n    }\n\n    const alignDiv = [];\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARLEFT\n    }));\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARCENTER\n    }));\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARRIGHT\n    }));\n\n    if (pos === 0 && item.align !== 'Left') {\n      alignDiv.forEach(ele => {\n        itemEle.appendChild(ele);\n      });\n      this.tbarAlign = true;\n      this.add(itemEle, CLS_TBARPOS);\n    } else if (item.align !== 'Left') {\n      const alignEle = itemEle.childNodes;\n      const leftAlign = alignDiv[0];\n      [].slice.call(alignEle).forEach(el => {\n        this.tbarAlgEle.lefts.push(el);\n        leftAlign.appendChild(el);\n      });\n      itemEle.appendChild(leftAlign);\n      itemEle.appendChild(alignDiv[1]);\n      itemEle.appendChild(alignDiv[2]);\n      this.tbarAlign = true;\n      this.add(itemEle, CLS_TBARPOS);\n    }\n  }\n\n  ctrlTemplate() {\n    this.ctrlTem = this.trgtEle.cloneNode(true);\n    this.add(this.trgtEle, CLS_ITEMS);\n    this.tbarEle = [];\n    const innerEle = [].slice.call(this.trgtEle.children);\n    innerEle.forEach(ele => {\n      if (ele.tagName === 'DIV') {\n        this.tbarEle.push(ele);\n        ele.setAttribute('aria-disabled', 'false');\n        this.add(ele, CLS_ITEM);\n      }\n    });\n  }\n\n  renderItems() {\n    const ele = this.element;\n    const items = this.items;\n\n    if (this.trgtEle != null) {\n      this.ctrlTemplate();\n    } else if (ele && items.length > 0) {\n      let itemEleDom;\n\n      if (ele && ele.children.length > 0) {\n        itemEleDom = ele.querySelector('.' + CLS_ITEMS);\n      }\n\n      if (!itemEleDom) {\n        itemEleDom = this.createElement('div', {\n          className: CLS_ITEMS\n        });\n      }\n\n      this.itemsAlign(items, itemEleDom);\n      ele.appendChild(itemEleDom);\n    }\n  }\n\n  setAttr(attr, element) {\n    const key = Object.keys(attr);\n    let keyVal;\n\n    for (let i = 0; i < key.length; i++) {\n      keyVal = key[i];\n\n      if (keyVal === 'class') {\n        this.add(element, attr[keyVal]);\n      } else {\n        element.setAttribute(keyVal, attr[keyVal]);\n      }\n    }\n  }\n  /**\n   * Enables or disables the specified Toolbar item.\n   *\n   * @param  {number|HTMLElement|NodeList} items - DOM element or an array of items to be enabled or disabled.\n   * @param  {boolean} isEnable  - Boolean value that determines whether the command should be enabled or disabled.\n   * By default, `isEnable` is set to true.\n   * @returns {void}.\n   */\n\n\n  enableItems(items, isEnable) {\n    const elements = items;\n    const len = elements.length;\n    let ele;\n\n    if (isNullOrUndefined(isEnable)) {\n      isEnable = true;\n    }\n\n    const enable = (isEnable, ele) => {\n      if (isEnable) {\n        ele.classList.remove(CLS_DISABLE$2);\n        ele.setAttribute('aria-disabled', 'false');\n      } else {\n        ele.classList.add(CLS_DISABLE$2);\n        ele.setAttribute('aria-disabled', 'true');\n      }\n    };\n\n    if (!isNullOrUndefined(len) && len >= 1) {\n      for (let a = 0, element = [].slice.call(elements); a < len; a++) {\n        const itemElement = element[a];\n\n        if (typeof itemElement === 'number') {\n          ele = this.getElementByIndex(itemElement);\n\n          if (isNullOrUndefined(ele)) {\n            return;\n          } else {\n            elements[a] = ele;\n          }\n        } else {\n          ele = itemElement;\n        }\n\n        enable(isEnable, ele);\n      }\n\n      if (isEnable) {\n        removeClass(elements, CLS_DISABLE$2);\n      } else {\n        addClass(elements, CLS_DISABLE$2);\n      }\n    } else {\n      if (typeof elements === 'number') {\n        ele = this.getElementByIndex(elements);\n\n        if (isNullOrUndefined(ele)) {\n          return;\n        }\n      } else {\n        ele = items;\n      }\n\n      enable(isEnable, ele);\n    }\n  }\n\n  getElementByIndex(index) {\n    if (this.tbarEle[index]) {\n      return this.tbarEle[index];\n    }\n\n    return null;\n  }\n  /**\n   * Adds new items to the Toolbar that accepts an array as Toolbar items.\n   *\n   * @param  {ItemModel[]} items - DOM element or an array of items to be added to the Toolbar.\n   * @param  {number} index - Number value that determines where the command is to be added. By default, index is 0.\n   * @returns {void}.\n   */\n\n\n  addItems(items, index) {\n    let innerItems;\n    this.extendedOpen();\n    const itemsDiv = this.element.querySelector('.' + CLS_ITEMS);\n\n    if (isNullOrUndefined(itemsDiv)) {\n      this.itemsRerender(items);\n      return;\n    }\n\n    let innerEle;\n    let itemAgn = 'Left';\n\n    if (isNullOrUndefined(index)) {\n      index = 0;\n    }\n\n    items.forEach(e => {\n      if (!isNullOrUndefined(e.align) && e.align !== 'Left' && itemAgn === 'Left') {\n        itemAgn = e.align;\n      }\n    });\n\n    for (const item of items) {\n      if (isNullOrUndefined(item.type)) {\n        item.type = 'Button';\n      }\n\n      innerItems = selectAll('.' + CLS_ITEM, this.element);\n      item.align = itemAgn;\n      innerEle = this.renderSubComponent(item, index);\n\n      if (this.tbarEle.length >= index && innerItems.length >= 0) {\n        if (isNullOrUndefined(this.scrollModule)) {\n          this.destroyMode();\n        }\n\n        const algIndex = item.align[0] === 'L' ? 0 : item.align[0] === 'C' ? 1 : 2;\n        let ele;\n\n        if (!this.tbarAlign && itemAgn !== 'Left') {\n          this.tbarItemAlign(item, itemsDiv, 1);\n          this.tbarAlign = true;\n          ele = closest(innerItems[0], '.' + CLS_ITEMS).children[algIndex];\n          ele.appendChild(innerEle);\n          this.tbarAlgEle[(item.align + 's').toLowerCase()].push(innerEle);\n          this.refreshPositioning();\n        } else if (this.tbarAlign) {\n          ele = closest(innerItems[0], '.' + CLS_ITEMS).children[algIndex];\n          ele.insertBefore(innerEle, ele.children[index]);\n          this.tbarAlgEle[(item.align + 's').toLowerCase()].splice(index, 0, innerEle);\n          this.refreshPositioning();\n        } else if (innerItems.length === 0) {\n          innerItems = selectAll('.' + CLS_ITEMS, this.element);\n          innerItems[0].appendChild(innerEle);\n        } else {\n          innerItems[0].parentNode.insertBefore(innerEle, innerItems[index]);\n        }\n\n        this.items.splice(index, 0, item);\n\n        if (item.template) {\n          this.tbarEle.splice(this.tbarEle.length - 1, 1);\n        }\n\n        this.tbarEle.splice(index, 0, innerEle);\n        index++;\n        this.offsetWid = itemsDiv.offsetWidth;\n      }\n    }\n\n    itemsDiv.style.width = '';\n    this.renderOverflowMode();\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n  /**\n   * Removes the items from the Toolbar. Acceptable arguments are index of item/HTMLElement/node list.\n   *\n   * @param  {number|HTMLElement|NodeList|HTMLElement[]} args\n   * Index or DOM element or an Array of item which is to be removed from the Toolbar.\n   * @returns {void}.\n   */\n\n\n  removeItems(args) {\n    const elements = args;\n    let index;\n    let innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n\n    if (typeof elements === 'number') {\n      index = parseInt(args.toString(), 10);\n      this.removeItemByIndex(index, innerItems);\n    } else {\n      if (elements && elements.length > 1) {\n        for (const ele of [].slice.call(elements)) {\n          index = this.tbarEle.indexOf(ele);\n          this.removeItemByIndex(index, innerItems);\n          innerItems = selectAll('.' + CLS_ITEM, this.element);\n        }\n      } else {\n        const ele = elements && elements.length && elements.length === 1 ? elements[0] : args;\n        index = innerItems.indexOf(ele);\n        this.removeItemByIndex(index, innerItems);\n      }\n    }\n\n    this.resize();\n  }\n\n  removeItemByIndex(index, innerItems) {\n    if (this.tbarEle[index] && innerItems[index]) {\n      const eleIdx = this.tbarEle.indexOf(innerItems[index]);\n\n      if (this.tbarAlign) {\n        const indexAgn = this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].indexOf(this.tbarEle[eleIdx]);\n        this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].splice(indexAgn, 1);\n      }\n\n      if (this.isReact) {\n        this.clearTemplate();\n      }\n\n      const btnItem = innerItems[index].querySelector('.e-control.e-btn');\n\n      if (!isNullOrUndefined(btnItem) && !isNullOrUndefined(btnItem.ej2_instances[0]) && !btnItem.ej2_instances[0].isDestroyed) {\n        btnItem.ej2_instances[0].destroy();\n      }\n\n      detach(innerItems[index]);\n      this.items.splice(eleIdx, 1);\n      this.tbarEle.splice(eleIdx, 1);\n    }\n  }\n\n  templateRender(templateProp, innerEle, item, index) {\n    const itemType = item.type;\n    const eleObj = templateProp;\n    let isComponent;\n\n    if (typeof templateProp === 'object') {\n      isComponent = typeof eleObj.appendTo === 'function';\n    }\n\n    if (typeof templateProp === 'string' || !isComponent) {\n      let templateFn;\n      let val = templateProp;\n      const regEx = new RegExp(/<(?=.*? .*?\\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\\/\\1>/i);\n      val = typeof templateProp === 'string' ? templateProp.trim() : templateProp;\n\n      try {\n        if (typeof templateProp === 'object' && !isNullOrUndefined(templateProp.tagName)) {\n          innerEle.appendChild(templateProp);\n        } else if (typeof templateProp === 'string' && regEx.test(val)) {\n          innerEle.innerHTML = val;\n        } else if (document.querySelectorAll(val).length) {\n          const ele = document.querySelector(val);\n          const tempStr = ele.outerHTML.trim();\n          innerEle.appendChild(ele);\n          ele.style.display = '';\n\n          if (!isNullOrUndefined(tempStr)) {\n            this.tempId.push(val);\n          }\n        } else {\n          templateFn = compile(val);\n        }\n      } catch (e) {\n        templateFn = compile(val);\n      }\n\n      let tempArray;\n\n      if (!isNullOrUndefined(templateFn)) {\n        const toolbarTemplateID = this.element.id + index + '_template';\n        tempArray = templateFn({}, this, 'template', toolbarTemplateID, this.isStringTemplate);\n      }\n\n      if (!isNullOrUndefined(tempArray) && tempArray.length > 0) {\n        [].slice.call(tempArray).forEach(ele => {\n          if (!isNullOrUndefined(ele.tagName)) {\n            ele.style.display = '';\n          }\n\n          innerEle.appendChild(ele);\n        });\n      }\n    } else if (itemType === 'Input') {\n      const ele = this.createElement('input');\n\n      if (item.id) {\n        ele.id = item.id;\n      } else {\n        ele.id = getUniqueID('tbr-ipt');\n      }\n\n      innerEle.appendChild(ele);\n      eleObj.appendTo(ele);\n    }\n\n    this.add(innerEle, CLS_TEMPLATE);\n    this.tbarEle.push(innerEle);\n  }\n\n  buttonRendering(item, innerEle) {\n    const dom = this.createElement('button', {\n      className: CLS_TBARBTN\n    });\n    dom.setAttribute('type', 'button');\n    const textStr = item.text;\n    let iconCss;\n    let iconPos;\n\n    if (item.id) {\n      dom.id = item.id;\n    } else {\n      dom.id = getUniqueID('e-tbr-btn');\n    }\n\n    const btnTxt = this.createElement('span', {\n      className: 'e-tbar-btn-text'\n    });\n\n    if (textStr) {\n      btnTxt.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(textStr) : textStr;\n      dom.appendChild(btnTxt);\n      dom.classList.add('e-tbtn-txt');\n    } else {\n      this.add(innerEle, 'e-tbtn-align');\n    }\n\n    if (item.prefixIcon || item.suffixIcon) {\n      if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {\n        iconCss = item.prefixIcon + ' e-icons';\n        iconPos = 'Left';\n      } else {\n        iconCss = item.suffixIcon + ' e-icons';\n        iconPos = 'Right';\n      }\n    }\n\n    const btnObj = new Button({\n      iconCss: iconCss,\n      iconPosition: iconPos\n    });\n    btnObj.createElement = this.createElement;\n    btnObj.appendTo(dom);\n\n    if (item.width) {\n      setStyleAttribute(dom, {\n        'width': formatUnit(item.width)\n      });\n    }\n\n    return dom;\n  }\n\n  renderSubComponent(item, index) {\n    let dom;\n    const innerEle = this.createElement('div', {\n      className: CLS_ITEM\n    });\n    innerEle.setAttribute('aria-disabled', 'false');\n    const tempDom = this.createElement('div', {\n      innerHTML: this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.tooltipText) : item.tooltipText\n    });\n\n    if (!this.tbarEle) {\n      this.tbarEle = [];\n    }\n\n    if (item.htmlAttributes) {\n      this.setAttr(item.htmlAttributes, innerEle);\n    }\n\n    if (item.tooltipText) {\n      innerEle.setAttribute('title', tempDom.textContent);\n    }\n\n    if (item.cssClass) {\n      innerEle.className = innerEle.className + ' ' + item.cssClass;\n    }\n\n    if (item.template) {\n      this.templateRender(item.template, innerEle, item, index);\n    } else {\n      switch (item.type) {\n        case 'Button':\n          dom = this.buttonRendering(item, innerEle);\n          dom.setAttribute('tabindex', '-1');\n          dom.setAttribute('aria-label', item.text || item.tooltipText);\n          innerEle.appendChild(dom);\n          innerEle.addEventListener('click', this.itemClick.bind(this));\n          break;\n\n        case 'Separator':\n          this.add(innerEle, CLS_SEPARATOR);\n          break;\n      }\n    }\n\n    if (item.showTextOn) {\n      const sTxt = item.showTextOn;\n\n      if (sTxt === 'Toolbar') {\n        this.add(innerEle, CLS_POPUPTEXT);\n        this.add(innerEle, 'e-tbtn-align');\n      } else if (sTxt === 'Overflow') {\n        this.add(innerEle, CLS_TBARTEXT);\n      }\n    }\n\n    if (item.overflow) {\n      const overflow = item.overflow;\n\n      if (overflow === 'Show') {\n        this.add(innerEle, CLS_TBAROVERFLOW);\n      } else if (overflow === 'Hide') {\n        if (!innerEle.classList.contains(CLS_SEPARATOR)) {\n          this.add(innerEle, CLS_POPOVERFLOW);\n        }\n      }\n    }\n\n    if (item.overflow !== 'Show' && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {\n      this.add(innerEle, CLS_POPPRI);\n      this.popupPriCount++;\n    }\n\n    if (item.disabled) {\n      this.add(innerEle, CLS_DISABLE$2);\n    }\n\n    if (item.visible === false) {\n      this.add(innerEle, CLS_HIDDEN);\n    }\n\n    return innerEle;\n  }\n\n  itemClick(e) {\n    this.activeEleSwitch(e.currentTarget);\n  }\n\n  activeEleSwitch(ele) {\n    this.activeEleRemove(ele.firstElementChild);\n    this.activeEle.focus();\n  }\n\n  activeEleRemove(curEle) {\n    if (!isNullOrUndefined(this.activeEle)) {\n      this.activeEle.setAttribute('tabindex', '-1');\n    }\n\n    this.activeEle = curEle;\n\n    if (isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {\n      curEle.removeAttribute('tabindex');\n    } else {\n      this.activeEle.setAttribute('tabindex', '0');\n    }\n  }\n\n  getPersistData() {\n    return this.addOnPersist([]);\n  }\n  /**\n   * Returns the current module name.\n   *\n   * @returns {string} - Returns the module name as string.\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'toolbar';\n  }\n\n  itemsRerender(newProp) {\n    this.items = this.tbarItemsCol;\n\n    if (this.isReact || this.isAngular) {\n      this.clearTemplate();\n    }\n\n    this.destroyMode();\n    this.destroyItems();\n    this.items = newProp;\n    this.tbarItemsCol = this.items;\n    this.renderItems();\n    this.renderOverflowMode();\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n  resize() {\n    const ele = this.element;\n    this.tbResize = true;\n\n    if (this.tbarAlign) {\n      this.itemPositioning();\n    }\n\n    if (this.popObj && this.overflowMode === 'Popup') {\n      this.popObj.hide();\n    }\n\n    const checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);\n\n    if (!checkOverflow) {\n      this.destroyScroll();\n      const multirowele = ele.querySelector('.' + CLS_ITEMS);\n\n      if (!isNullOrUndefined(multirowele)) {\n        this.remove(multirowele, CLS_MULTIROWPOS);\n\n        if (this.tbarAlign) {\n          this.add(multirowele, CLS_TBARPOS);\n        }\n      }\n    }\n\n    if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {\n      return;\n    }\n\n    if (this.offsetWid > ele.offsetWidth || checkOverflow) {\n      this.renderOverflowMode();\n    }\n\n    if (this.popObj) {\n      if (this.overflowMode === 'Extended') {\n        const eleStyles = window.getComputedStyle(this.element);\n        this.popObj.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;\n      }\n\n      if (this.tbarAlign) {\n        this.removePositioning();\n      }\n\n      this.popupRefresh(this.popObj.element, false);\n\n      if (this.tbarAlign) {\n        this.refreshPositioning();\n      }\n    }\n\n    if (this.element.querySelector('.' + CLS_HSCROLLBAR$1)) {\n      this.scrollStep = this.element.querySelector('.' + CLS_HSCROLLBAR$1).offsetWidth;\n    }\n\n    this.offsetWid = ele.offsetWidth;\n    this.tbResize = false;\n    this.separator();\n  }\n\n  extendedOpen() {\n    const sib = this.element.querySelector('.' + CLS_EXTENDABLECLASS);\n\n    if (this.overflowMode === 'Extended' && sib) {\n      this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);\n    }\n  }\n  /**\n   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n   *\n   * @param  {ToolbarModel} newProp - It contains new value of the data.\n   * @param  {ToolbarModel} oldProp - It contains old value of the data.\n   * @returns {void}\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    const tEle = this.element;\n    const wid = tEle.offsetWidth;\n    this.extendedOpen();\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'items':\n          if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n            const changedProb = Object.keys(newProp.items);\n\n            for (let i = 0; i < changedProb.length; i++) {\n              const index = parseInt(Object.keys(newProp.items)[i], 10);\n              const property = Object.keys(newProp.items[index])[0];\n              const newProperty = Object(newProp.items[index])[property];\n\n              if (typeof newProperty !== 'function') {\n                if (this.tbarAlign || property === 'align') {\n                  this.refresh();\n                  this.trigger('created');\n                  break;\n                }\n\n                const popupPriCheck = property === 'showAlwaysInPopup' && !newProperty;\n                const booleanCheck = property === 'overflow' && this.popupPriCount !== 0;\n\n                if (popupPriCheck || this.items[index].showAlwaysInPopup && booleanCheck) {\n                  --this.popupPriCount;\n                }\n\n                if (isNullOrUndefined(this.scrollModule)) {\n                  this.destroyMode();\n                }\n\n                const itemCol = [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, tEle));\n\n                if (this.isReact) {\n                  this.clearTemplate();\n                }\n\n                detach(itemCol[index]);\n                this.tbarEle.splice(index, 1);\n                this.addItems([this.items[index]], index);\n                this.items.splice(index, 1);\n\n                if (this.items[index].template) {\n                  this.tbarEle.splice(this.items.length, 1);\n                }\n              }\n            }\n          } else {\n            this.itemsRerender(newProp.items);\n          }\n\n          break;\n\n        case 'width':\n          setStyleAttribute(tEle, {\n            'width': formatUnit(newProp.width)\n          });\n          this.renderOverflowMode();\n\n          if (this.popObj && wid < tEle.offsetWidth) {\n            this.popupRefresh(this.popObj.element, false);\n          }\n\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          break;\n\n        case 'overflowMode':\n          this.destroyMode();\n          this.renderOverflowMode();\n\n          if (this.enableRtl) {\n            this.add(tEle, CLS_RTL$2);\n          }\n\n          this.refreshOverflow();\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.add(tEle, CLS_RTL$2);\n          } else {\n            this.remove(tEle, CLS_RTL$2);\n          }\n\n          if (!isNullOrUndefined(this.scrollModule)) {\n            if (newProp.enableRtl) {\n              this.add(this.scrollModule.element, CLS_RTL$2);\n            } else {\n              this.remove(this.scrollModule.element, CLS_RTL$2);\n            }\n          }\n\n          if (!isNullOrUndefined(this.popObj)) {\n            if (newProp.enableRtl) {\n              this.add(this.popObj.element, CLS_RTL$2);\n            } else {\n              this.remove(this.popObj.element, CLS_RTL$2);\n            }\n          }\n\n          if (this.tbarAlign) {\n            this.itemPositioning();\n          }\n\n          break;\n\n        case 'scrollStep':\n          if (this.scrollModule) {\n            this.scrollModule.scrollStep = this.scrollStep;\n          }\n\n          break;\n\n        case 'enableCollision':\n          if (this.popObj) {\n            this.popObj.collision = {\n              Y: this.enableCollision ? 'flip' : 'none'\n            };\n          }\n\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'allowKeyboard':\n          this.unwireKeyboardEvent();\n\n          if (newProp.allowKeyboard) {\n            this.wireKeyboardEvent();\n          }\n\n          break;\n      }\n    }\n  }\n  /**\n   * Shows or hides the Toolbar item that is in the specified index.\n   *\n   * @param  {number | HTMLElement} index - Index value of target item or DOM element  of items to be hidden or shown.\n   * @param  {boolean} value - Based on this Boolean value, item will be hide (true) or show (false). By default, value is false.\n   * @returns {void}.\n   */\n\n\n  hideItem(index, value) {\n    const isElement = typeof index === 'object' ? true : false;\n    let eleIndex = index;\n    let initIndex;\n    let ele;\n    const innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n\n    if (isElement) {\n      ele = index;\n    } else if (this.tbarEle[eleIndex]) {\n      const innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n      ele = innerItems[eleIndex];\n    }\n\n    if (ele) {\n      if (value) {\n        ele.classList.add(CLS_HIDDEN);\n      } else {\n        ele.classList.remove(CLS_HIDDEN);\n      }\n\n      if (value && isNullOrUndefined(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {\n        if (isNullOrUndefined(ele.firstElementChild.getAttribute('tabindex'))) {\n          ele.firstElementChild.setAttribute('tabindex', '-1');\n          const innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n\n          if (isElement) {\n            eleIndex = innerItems.indexOf(ele);\n          }\n\n          let nextEle = innerItems[++eleIndex];\n\n          while (nextEle) {\n            const skipEle = this.eleContains(nextEle);\n\n            if (!skipEle) {\n              nextEle.firstElementChild.removeAttribute('tabindex');\n              break;\n            }\n\n            nextEle = innerItems[++eleIndex];\n          }\n        }\n      } else if (isNullOrUndefined(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {\n        initIndex = 0;\n        let setFlag = false;\n        let removeFlag = false;\n        let initELe = innerItems[initIndex];\n\n        while (initELe) {\n          if (!initELe.classList.contains(CLS_SEPARATOR)) {\n            if (isNullOrUndefined(initELe.firstElementChild.getAttribute('tabindex'))) {\n              initELe.firstElementChild.setAttribute('tabindex', '-1');\n              setFlag = true;\n            } else {\n              if (setFlag && removeFlag) {\n                break;\n              }\n\n              const skipEle = this.eleContains(initELe);\n\n              if (!skipEle) {\n                initELe.firstElementChild.removeAttribute('tabindex');\n                removeFlag = true;\n              }\n\n              initELe = innerItems[++initIndex];\n            }\n          } else {\n            initELe = innerItems[++initIndex];\n          }\n        }\n      }\n\n      this.refreshOverflow();\n    }\n  }\n\n};\n\n__decorate$3([Collection([], Item)], Toolbar.prototype, \"items\", void 0);\n\n__decorate$3([Property('auto')], Toolbar.prototype, \"width\", void 0);\n\n__decorate$3([Property('auto')], Toolbar.prototype, \"height\", void 0);\n\n__decorate$3([Property('')], Toolbar.prototype, \"cssClass\", void 0);\n\n__decorate$3([Property('Scrollable')], Toolbar.prototype, \"overflowMode\", void 0);\n\n__decorate$3([Property()], Toolbar.prototype, \"scrollStep\", void 0);\n\n__decorate$3([Property(true)], Toolbar.prototype, \"enableCollision\", void 0);\n\n__decorate$3([Property(true)], Toolbar.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$3([Property(true)], Toolbar.prototype, \"allowKeyboard\", void 0);\n\n__decorate$3([Event()], Toolbar.prototype, \"clicked\", void 0);\n\n__decorate$3([Event()], Toolbar.prototype, \"created\", void 0);\n\n__decorate$3([Event()], Toolbar.prototype, \"destroyed\", void 0);\n\n__decorate$3([Event()], Toolbar.prototype, \"beforeCreate\", void 0);\n\nToolbar = __decorate$3([NotifyPropertyChanges], Toolbar);\n/**\n * Toolbar modules\n */\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nconst CLS_ACRDN_ROOT = 'e-acrdn-root';\nconst CLS_ROOT$2 = 'e-accordion';\nconst CLS_ITEM$1 = 'e-acrdn-item';\nconst CLS_ITEMFOCUS = 'e-item-focus';\nconst CLS_ITEMHIDE = 'e-hide';\nconst CLS_HEADER = 'e-acrdn-header';\nconst CLS_HEADERICN = 'e-acrdn-header-icon';\nconst CLS_HEADERCTN = 'e-acrdn-header-content';\nconst CLS_CONTENT = 'e-acrdn-panel';\nconst CLS_CTENT = 'e-acrdn-content';\nconst CLS_TOOGLEICN = 'e-toggle-icon';\nconst CLS_COLLAPSEICN = 'e-tgl-collapse-icon e-icons';\nconst CLS_EXPANDICN = 'e-expand-icon';\nconst CLS_RTL$3 = 'e-rtl';\nconst CLS_CTNHIDE = 'e-content-hide';\nconst CLS_SLCT = 'e-select';\nconst CLS_SLCTED = 'e-selected';\nconst CLS_ACTIVE = 'e-active';\nconst CLS_ANIMATE = 'e-animate';\nconst CLS_DISABLE$3 = 'e-overlay';\nconst CLS_TOGANIMATE = 'e-toggle-animation';\nconst CLS_NEST = 'e-nested';\nconst CLS_EXPANDSTATE = 'e-expand-state';\nconst CLS_CONTAINER = 'e-accordion-container';\n/**\n * Objects used for configuring the Accordion expanding item action properties.\n */\n\nclass AccordionActionSettings extends ChildProperty {}\n\n__decorate$4([Property('SlideDown')], AccordionActionSettings.prototype, \"effect\", void 0);\n\n__decorate$4([Property(400)], AccordionActionSettings.prototype, \"duration\", void 0);\n\n__decorate$4([Property('linear')], AccordionActionSettings.prototype, \"easing\", void 0);\n/**\n * Objects used for configuring the Accordion animation properties.\n */\n\n\nclass AccordionAnimationSettings extends ChildProperty {}\n\n__decorate$4([Complex({\n  effect: 'SlideUp',\n  duration: 400,\n  easing: 'linear'\n}, AccordionActionSettings)], AccordionAnimationSettings.prototype, \"collapse\", void 0);\n\n__decorate$4([Complex({\n  effect: 'SlideDown',\n  duration: 400,\n  easing: 'linear'\n}, AccordionActionSettings)], AccordionAnimationSettings.prototype, \"expand\", void 0);\n/**\n * An item object that is used to configure Accordion items.\n */\n\n\nclass AccordionItem extends ChildProperty {}\n\n__decorate$4([Property(null)], AccordionItem.prototype, \"content\", void 0);\n\n__decorate$4([Property(null)], AccordionItem.prototype, \"header\", void 0);\n\n__decorate$4([Property(null)], AccordionItem.prototype, \"cssClass\", void 0);\n\n__decorate$4([Property(null)], AccordionItem.prototype, \"iconCss\", void 0);\n\n__decorate$4([Property(false)], AccordionItem.prototype, \"expanded\", void 0);\n\n__decorate$4([Property(true)], AccordionItem.prototype, \"visible\", void 0);\n\n__decorate$4([Property(false)], AccordionItem.prototype, \"disabled\", void 0);\n\n__decorate$4([Property()], AccordionItem.prototype, \"id\", void 0);\n/**\n * The Accordion is a vertically collapsible content panel that displays one or more panels at a time within the available space.\n * ```html\n * <div id='accordion'/>\n * <script>\n *   var accordionObj = new Accordion();\n *   accordionObj.appendTo('#accordion');\n * </script>\n * ```\n */\n\n\nlet Accordion = class Accordion extends Component {\n  /**\n   * Initializes a new instance of the Accordion class.\n   *\n   * @param {AccordionModel} options  - Specifies Accordion model properties as options.\n   * @param {string | HTMLElement} element  - Specifies the element that is rendered as an Accordion.\n   */\n  constructor(options, element) {\n    super(options, element);\n    /**\n     * Contains the keyboard configuration of the Accordion.\n     */\n\n    this.keyConfigs = {\n      moveUp: 'uparrow',\n      moveDown: 'downarrow',\n      enter: 'enter',\n      space: 'space',\n      home: 'home',\n      end: 'end'\n    };\n  }\n  /**\n   * Removes the control from the DOM and also removes all its related events.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    if (this.isReact || this.isAngular || this.isVue) {\n      this.clearTemplate();\n    }\n\n    const ele = this.element;\n    super.destroy();\n    this.unwireEvents();\n    this.isDestroy = true;\n    this.restoreContent(null);\n    [].slice.call(ele.children).forEach(el => {\n      ele.removeChild(el);\n    });\n\n    if (this.trgtEle) {\n      this.trgtEle = null;\n\n      while (this.ctrlTem.firstElementChild) {\n        ele.appendChild(this.ctrlTem.firstElementChild);\n      }\n\n      this.ctrlTem = null;\n    }\n\n    ele.classList.remove(CLS_ACRDN_ROOT);\n    ele.removeAttribute('style');\n    ['aria-disabled', 'aria-multiselectable', 'role', 'data-ripple'].forEach(attrb => {\n      this.element.removeAttribute(attrb);\n    });\n\n    if (!this.isNested && isRippleEnabled) {\n      this.removeRippleEffect();\n    }\n  }\n\n  preRender() {\n    const nested = closest(this.element, '.' + CLS_CONTENT);\n    this.isNested = false;\n    this.templateEle = [];\n\n    if (!this.isDestroy) {\n      this.isDestroy = false;\n    }\n\n    if (nested && nested.firstElementChild && nested.firstElementChild.firstElementChild) {\n      if (nested.firstElementChild.firstElementChild.classList.contains(CLS_ROOT$2)) {\n        nested.classList.add(CLS_NEST);\n        this.isNested = true;\n      }\n    } else {\n      this.element.classList.add(CLS_ACRDN_ROOT);\n    }\n\n    if (this.enableRtl) {\n      this.add(this.element, CLS_RTL$3);\n    }\n  }\n\n  add(ele, val) {\n    ele.classList.add(val);\n  }\n\n  remove(ele, val) {\n    ele.classList.remove(val);\n  }\n  /**\n   * To initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initializeHeaderTemplate();\n    this.initializeItemTemplate();\n    this.initialize();\n    this.renderControl();\n    this.wireEvents();\n    this.renderComplete();\n  }\n\n  initialize() {\n    const width = formatUnit(this.width);\n    const height = formatUnit(this.height);\n    setStyleAttribute(this.element, {\n      'width': width,\n      'height': height\n    });\n    const ariaAttr = {\n      'aria-disabled': 'false',\n      'role': 'presentation',\n      'aria-multiselectable': 'true'\n    };\n\n    if (isNullOrUndefined(this.initExpand)) {\n      this.initExpand = [];\n    }\n\n    if (this.expandedIndices.length > 0) {\n      this.initExpand = this.expandedIndices;\n    }\n\n    attributes(this.element, ariaAttr);\n\n    if (this.expandMode === 'Single') {\n      this.element.setAttribute('aria-multiselectable', 'false');\n    }\n  }\n\n  renderControl() {\n    this.trgtEle = this.element.children.length > 0 ? select('div', this.element) : null;\n    this.renderItems();\n    this.initItemExpand();\n  }\n\n  wireFocusEvents() {\n    const acrdItem = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1));\n\n    for (const item of acrdItem) {\n      const headerEle = item.querySelector('.' + CLS_HEADER);\n\n      if (item.childElementCount > 0 && headerEle) {\n        EventHandler.clearEvents(headerEle);\n        EventHandler.add(headerEle, 'focus', this.focusIn, this);\n        EventHandler.add(headerEle, 'blur', this.focusOut, this);\n      }\n    }\n  }\n\n  unwireEvents() {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n\n    if (!isNullOrUndefined(this.keyModule)) {\n      this.keyModule.destroy();\n    }\n  }\n\n  wireEvents() {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n\n    if (!this.isNested && !this.isDestroy) {\n      this.removeRippleEffect = rippleEffect(this.element, {\n        selector: '.' + CLS_HEADER\n      });\n    }\n\n    if (!this.isNested) {\n      this.keyModule = new KeyboardEvents(this.element, {\n        keyAction: this.keyActionHandler.bind(this),\n        keyConfigs: this.keyConfigs,\n        eventName: 'keydown'\n      });\n    }\n  }\n\n  templateParser(template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (error) {\n        return compile(template);\n      }\n    }\n\n    return undefined;\n  }\n\n  initializeHeaderTemplate() {\n    if (this.headerTemplate) {\n      this.headerTemplateFn = this.templateParser(this.headerTemplate);\n    }\n  }\n\n  initializeItemTemplate() {\n    if (this.itemTemplate) {\n      this.itemTemplateFn = this.templateParser(this.itemTemplate);\n    }\n  }\n\n  getHeaderTemplate() {\n    return this.headerTemplateFn;\n  }\n\n  getItemTemplate() {\n    return this.itemTemplateFn;\n  }\n\n  focusIn(e) {\n    e.target.parentElement.classList.add(CLS_ITEMFOCUS);\n  }\n\n  focusOut(e) {\n    e.target.parentElement.classList.remove(CLS_ITEMFOCUS);\n  }\n\n  ctrlTemplate() {\n    this.ctrlTem = this.element.cloneNode(true);\n    let innerEles;\n    const rootEle = select('.' + CLS_CONTAINER, this.element);\n\n    if (rootEle) {\n      innerEles = rootEle.children;\n    } else {\n      innerEles = this.element.children;\n    }\n\n    const items = [];\n    [].slice.call(innerEles).forEach(el => {\n      items.push({\n        header: el.childElementCount > 0 && el.children[0] ? el.children[0] : '',\n        content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ''\n      });\n      el.parentNode.removeChild(el);\n    });\n\n    if (rootEle) {\n      this.element.removeChild(rootEle);\n    }\n\n    this.setProperties({\n      items: items\n    }, true);\n  }\n\n  toggleIconGenerate() {\n    const tglIcon = this.createElement('div', {\n      className: CLS_TOOGLEICN\n    });\n    const hdrColIcon = this.createElement('span', {\n      className: CLS_COLLAPSEICN\n    });\n    tglIcon.appendChild(hdrColIcon);\n    return tglIcon;\n  }\n\n  initItemExpand() {\n    const len = this.initExpand.length;\n\n    if (len === 0) {\n      return;\n    }\n\n    if (this.expandMode === 'Single') {\n      this.expandItem(true, this.initExpand[len - 1]);\n    } else {\n      for (let i = 0; i < len; i++) {\n        this.expandItem(true, this.initExpand[i]);\n      }\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n  renderItems() {\n    const ele = this.element;\n    let innerItem;\n    let innerDataSourceItem;\n\n    if (!isNullOrUndefined(this.trgtEle)) {\n      this.ctrlTemplate();\n    }\n\n    if (this.dataSource.length > 0) {\n      this.dataSource.forEach((item, index) => {\n        innerDataSourceItem = this.renderInnerItem(item, index);\n        ele.appendChild(innerDataSourceItem);\n\n        if (innerDataSourceItem.childElementCount > 0) {\n          EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'focus', this.focusIn, this);\n          EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'blur', this.focusOut, this);\n        }\n      });\n    } else {\n      const items = this.items;\n\n      if (ele && items.length > 0) {\n        items.forEach((item, index) => {\n          innerItem = this.renderInnerItem(item, index);\n          ele.appendChild(innerItem);\n\n          if (innerItem.childElementCount > 0) {\n            EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'focus', this.focusIn, this);\n            EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'blur', this.focusOut, this);\n          }\n        });\n      }\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n  clickHandler(e) {\n    const trgt = e.target;\n    const items = this.getItems();\n    const eventArgs = {};\n    let tglIcon;\n    const acrdEle = closest(trgt, '.' + CLS_ROOT$2);\n\n    if (acrdEle !== this.element) {\n      return;\n    }\n\n    trgt.classList.add('e-target');\n    const acrdnItem = closest(trgt, '.' + CLS_ITEM$1);\n    let acrdnHdr = closest(trgt, '.' + CLS_HEADER);\n    let acrdnCtn = closest(trgt, '.' + CLS_CONTENT);\n\n    if (acrdnItem && (isNullOrUndefined(acrdnHdr) || isNullOrUndefined(acrdnCtn))) {\n      acrdnHdr = acrdnItem.children[0];\n      acrdnCtn = acrdnItem.children[1];\n    }\n\n    if (acrdnHdr) {\n      tglIcon = select('.' + CLS_TOOGLEICN, acrdnHdr);\n    }\n\n    let acrdnCtnItem;\n\n    if (acrdnHdr) {\n      acrdnCtnItem = closest(acrdnHdr, '.' + CLS_ITEM$1);\n    } else if (acrdnCtn) {\n      acrdnCtnItem = closest(acrdnCtn, '.' + CLS_ITEM$1);\n    }\n\n    const index = this.getIndexByItem(acrdnItem);\n\n    if (acrdnCtnItem) {\n      eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];\n    }\n\n    eventArgs.originalEvent = e;\n    const ctnCheck = !isNullOrUndefined(tglIcon) && acrdnItem.childElementCount <= 1;\n\n    if (ctnCheck && (isNullOrUndefined(acrdnCtn) || !isNullOrUndefined(select('.' + CLS_HEADER + ' .' + CLS_TOOGLEICN, acrdnCtnItem)))) {\n      acrdnItem.appendChild(this.contentRendering(index));\n      this.ariaAttrUpdate(acrdnItem);\n      this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n    } else {\n      this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n  afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {\n    const acrdActive = [];\n    this.trigger('clicked', eventArgs);\n    let cntclkCheck = acrdnCtn && !isNullOrUndefined(select('.e-target', acrdnCtn));\n    const inlineAcrdnSel = '.' + CLS_CONTENT + ' .' + CLS_ROOT$2;\n    const inlineEleAcrdn = acrdnCtn && !isNullOrUndefined(select('.' + CLS_ROOT$2, acrdnCtn)) && isNullOrUndefined(closest(trgt, inlineAcrdnSel));\n    const nestContCheck = acrdnCtn && isNullOrUndefined(select('.' + CLS_ROOT$2, acrdnCtn)) || !(closest(trgt, '.' + CLS_ROOT$2) === this.element);\n    cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);\n    trgt.classList.remove('e-target');\n\n    if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {\n      return;\n    }\n\n    const acrdcontainer = this.element.querySelector('.' + CLS_CONTAINER);\n    const acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;\n    [].slice.call(acrdnchild).forEach(el => {\n      if (el.classList.contains(CLS_ACTIVE)) {\n        acrdActive.push(el);\n      }\n    });\n    const acrdAniEle = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1 + ' [' + CLS_ANIMATE + ']'));\n\n    if (acrdAniEle.length > 0) {\n      for (const el of acrdAniEle) {\n        acrdActive.push(el.parentElement);\n      }\n    }\n\n    const sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute('e-animate') === 'true';\n    let sameHeader = false;\n\n    if (!isNullOrUndefined(acrdnItem) && !isNullOrUndefined(acrdnHdr)) {\n      const acrdnCtn = select('.' + CLS_CONTENT, acrdnItem);\n      const acrdnRoot = closest(acrdnItem, '.' + CLS_ACRDN_ROOT);\n      const expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);\n\n      if (isNullOrUndefined(acrdnCtn)) {\n        return;\n      }\n\n      sameHeader = expandState === acrdnItem;\n\n      if (isVisible(acrdnCtn) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {\n        this.collapse(acrdnCtn);\n      } else {\n        if (acrdActive.length > 0 && this.expandMode === 'Single' && !sameContentCheck) {\n          acrdActive.forEach(el => {\n            this.collapse(select('.' + CLS_CONTENT, el));\n            el.classList.remove(CLS_EXPANDSTATE);\n          });\n        }\n\n        this.expand(acrdnCtn);\n      }\n\n      if (!isNullOrUndefined(expandState) && !sameHeader) {\n        expandState.classList.remove(CLS_EXPANDSTATE);\n      }\n    }\n  }\n\n  eleMoveFocus(action, root, trgt) {\n    let clst;\n    let clstItem = closest(trgt, '.' + CLS_ITEM$1);\n\n    if (trgt === root) {\n      clst = (action === 'moveUp' ? trgt.lastElementChild : trgt).querySelector('.' + CLS_HEADER);\n    } else if (trgt.classList.contains(CLS_HEADER)) {\n      clstItem = action === 'moveUp' ? clstItem.previousElementSibling : clstItem.nextElementSibling;\n\n      if (clstItem) {\n        clst = select('.' + CLS_HEADER, clstItem);\n      }\n    }\n\n    if (clst) {\n      clst.focus();\n    }\n  }\n\n  keyActionHandler(e) {\n    const trgt = e.target;\n    const header = closest(e.target, CLS_HEADER);\n\n    if (isNullOrUndefined(header) && !trgt.classList.contains(CLS_ROOT$2) && !trgt.classList.contains(CLS_HEADER)) {\n      return;\n    }\n\n    let clst;\n    const root = this.element;\n    let content;\n\n    switch (e.action) {\n      case 'moveUp':\n        this.eleMoveFocus(e.action, root, trgt);\n        break;\n\n      case 'moveDown':\n        this.eleMoveFocus(e.action, root, trgt);\n        break;\n\n      case 'space':\n      case 'enter':\n        content = trgt.nextElementSibling;\n\n        if (!isNullOrUndefined(content) && content.classList.contains(CLS_CONTENT)) {\n          if (content.getAttribute('e-animate') !== 'true') {\n            trgt.click();\n          }\n        } else {\n          trgt.click();\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'home':\n      case 'end':\n        clst = e.action === 'home' ? root.firstElementChild.children[0] : root.lastElementChild.children[0];\n        clst.focus();\n        e.preventDefault();\n        break;\n    }\n  }\n\n  headerEleGenerate() {\n    const header = this.createElement('div', {\n      className: CLS_HEADER,\n      id: getUniqueID('acrdn_header')\n    });\n    const items = this.getItems();\n    const ariaAttr = {\n      'tabindex': '0',\n      'role': 'heading',\n      'aria-label': 'collapsed',\n      'aria-disabled': 'false',\n      'aria-level': items.length.toString()\n    };\n    attributes(header, ariaAttr);\n    return header;\n  }\n\n  renderInnerItem(item, index) {\n    const innerEle = this.createElement('div', {\n      className: CLS_ITEM$1,\n      id: item.id || getUniqueID('acrdn_item'),\n      attrs: {\n        'aria-expanded': 'false',\n        'role': 'row'\n      }\n    });\n\n    if (this.headerTemplate) {\n      const ctnEle = this.headerEleGenerate();\n      const hdrEle = this.createElement('div', {\n        className: CLS_HEADERCTN\n      });\n      ctnEle.appendChild(hdrEle);\n      append(this.getHeaderTemplate()(item, this, 'headerTemplate', this.element.id + '_headerTemplate', false), hdrEle);\n      innerEle.appendChild(ctnEle);\n      ctnEle.appendChild(this.toggleIconGenerate());\n      this.add(innerEle, CLS_SLCT);\n      return innerEle;\n    }\n\n    if (item.header && this.angularnativeCondiCheck(item, 'header')) {\n      if (this.enableHtmlSanitizer && typeof item.header === 'string') {\n        item.header = SanitizeHtmlHelper.sanitize(item.header);\n      }\n\n      const ctnEle = this.headerEleGenerate();\n      const hdrEle = this.createElement('div', {\n        className: CLS_HEADERCTN\n      });\n      ctnEle.appendChild(hdrEle);\n      ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index, true));\n      innerEle.appendChild(ctnEle);\n    }\n\n    let hdr = select('.' + CLS_HEADER, innerEle);\n\n    if (item.expanded && !isNullOrUndefined(index) && !this.enablePersistence) {\n      if (this.initExpand.indexOf(index) === -1) {\n        this.initExpand.push(index);\n      }\n    }\n\n    if (item.cssClass) {\n      addClass([innerEle], item.cssClass.split(' '));\n    }\n\n    if (item.disabled) {\n      addClass([innerEle], CLS_DISABLE$3);\n    }\n\n    if (item.visible === false) {\n      addClass([innerEle], CLS_ITEMHIDE);\n    }\n\n    if (item.iconCss) {\n      const hdrIcnEle = this.createElement('div', {\n        className: CLS_HEADERICN\n      });\n      const icon = this.createElement('span', {\n        className: item.iconCss + ' e-icons'\n      });\n      hdrIcnEle.appendChild(icon);\n\n      if (isNullOrUndefined(hdr)) {\n        hdr = this.headerEleGenerate();\n        hdr.appendChild(hdrIcnEle);\n        innerEle.appendChild(hdr);\n      } else {\n        hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);\n      }\n    }\n\n    if (item.content && this.angularnativeCondiCheck(item, 'content')) {\n      const hdrIcon = this.toggleIconGenerate();\n\n      if (isNullOrUndefined(hdr)) {\n        hdr = this.headerEleGenerate();\n        innerEle.appendChild(hdr);\n      }\n\n      hdr.appendChild(hdrIcon);\n      this.add(innerEle, CLS_SLCT);\n    }\n\n    return innerEle;\n  }\n\n  angularnativeCondiCheck(item, prop) {\n    const property = prop === 'content' ? item.content : item.header;\n    const content = property;\n\n    if (this.isAngular && !isNullOrUndefined(content.elementRef)) {\n      const data = content.elementRef.nativeElement.data;\n\n      if (isNullOrUndefined(data) || data === '' || data.indexOf('bindings=') === -1) {\n        return true;\n      }\n\n      const parseddata = JSON.parse(content.elementRef.nativeElement.data.replace('bindings=', ''));\n\n      if (!isNullOrUndefined(parseddata) && parseddata['ng-reflect-ng-if'] === 'false') {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  fetchElement(ele, value, index, isHeader) {\n    let templateFn;\n    let temString;\n\n    try {\n      if (document.querySelectorAll(value).length && value !== 'Button') {\n        const eleVal = document.querySelector(value);\n        temString = eleVal.outerHTML.trim();\n        ele.appendChild(eleVal);\n        eleVal.style.display = '';\n      } else {\n        templateFn = compile(value);\n      }\n    } catch (e) {\n      if (typeof value === 'string') {\n        ele.innerHTML = SanitizeHtmlHelper.sanitize(value);\n      } else if (!isNullOrUndefined(this.trgtEle) && value instanceof HTMLElement) {\n        ele.appendChild(value);\n        ele.firstElementChild.style.display = '';\n      } else {\n        templateFn = compile(value);\n      }\n    }\n\n    let tempArray;\n\n    if (!isNullOrUndefined(templateFn)) {\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n\n      let templateProps;\n      let templateName;\n\n      if (ele.classList.contains(CLS_HEADERCTN)) {\n        templateProps = this.element.id + index + '_header';\n        templateName = 'header';\n      } else if (ele.classList.contains(CLS_CTENT)) {\n        templateProps = this.element.id + index + '_content';\n        templateName = 'content';\n      }\n\n      tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);\n    }\n\n    if (!isNullOrUndefined(tempArray) && tempArray.length > 0 && !(isNullOrUndefined(tempArray[0].tagName) && tempArray.length === 1)) {\n      [].slice.call(tempArray).forEach(el => {\n        if (!isNullOrUndefined(el.tagName)) {\n          el.style.display = '';\n        }\n\n        ele.appendChild(el);\n      });\n    } else if (ele.childElementCount === 0) {\n      ele.innerHTML = SanitizeHtmlHelper.sanitize(value);\n    }\n\n    if (!isNullOrUndefined(temString)) {\n      if (this.templateEle.indexOf(value) === -1) {\n        this.templateEle.push(value);\n      }\n    }\n\n    return ele;\n  }\n\n  ariaAttrUpdate(itemEle) {\n    const header = select('.' + CLS_HEADER, itemEle);\n    const content = select('.' + CLS_CONTENT, itemEle);\n    header.setAttribute('aria-controls', content.id);\n    content.setAttribute('aria-labelledby', header.id);\n    content.setAttribute('role', 'definition');\n  }\n\n  contentRendering(index) {\n    const itemcnt = this.createElement('div', {\n      className: CLS_CONTENT + ' ' + CLS_CTNHIDE,\n      id: getUniqueID('acrdn_panel')\n    });\n    attributes(itemcnt, {\n      'aria-hidden': 'true'\n    });\n    const ctn = this.createElement('div', {\n      className: CLS_CTENT\n    });\n\n    if (this.dataSource.length > 0) {\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n\n      append(this.getItemTemplate()(this.dataSource[index], this, 'itemTemplate', this.element.id + '_itemTemplate', false), ctn);\n      itemcnt.appendChild(ctn);\n    } else {\n      if (this.enableHtmlSanitizer && typeof this.items[index].content) {\n        this.items[index].content = SanitizeHtmlHelper.sanitize(this.items[index].content);\n      }\n\n      itemcnt.appendChild(this.fetchElement(ctn, this.items[index].content, index, false));\n    }\n\n    return itemcnt;\n  }\n\n  expand(trgt) {\n    const items = this.getItems();\n    const trgtItemEle = closest(trgt, '.' + CLS_ITEM$1);\n\n    if (isNullOrUndefined(trgt) || isVisible(trgt) && trgt.getAttribute('e-animate') !== 'true' || trgtItemEle.classList.contains(CLS_DISABLE$3)) {\n      return;\n    }\n\n    const acrdnRoot = closest(trgtItemEle, '.' + CLS_ACRDN_ROOT);\n    const expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);\n    const animation = {\n      name: this.animation.expand.effect,\n      duration: this.animation.expand.duration,\n      timingFunction: this.animation.expand.easing\n    };\n    const icon = select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;\n    const eventArgs = {\n      element: trgtItemEle,\n      item: items[this.getIndexByItem(trgtItemEle)],\n      index: this.getIndexByItem(trgtItemEle),\n      content: trgtItemEle.querySelector('.' + CLS_CONTENT),\n      isExpanded: true\n    };\n    this.trigger('expanding', eventArgs, expandArgs => {\n      if (!expandArgs.cancel) {\n        icon.classList.add(CLS_TOGANIMATE);\n        this.expandedItemsPush(trgtItemEle);\n\n        if (!isNullOrUndefined(expandState)) {\n          expandState.classList.remove(CLS_EXPANDSTATE);\n        }\n\n        trgtItemEle.classList.add(CLS_EXPANDSTATE);\n\n        if (animation.name === 'None') {\n          this.expandProgress('begin', icon, trgt, trgtItemEle, expandArgs);\n          this.expandProgress('end', icon, trgt, trgtItemEle, expandArgs);\n        } else {\n          this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);\n        }\n      }\n    });\n  }\n\n  expandAnimation(ef, icn, trgt, trgtItemEle, animate, args) {\n    let height;\n    this.lastActiveItemId = trgtItemEle.id;\n\n    if (ef === 'SlideDown') {\n      animate.begin = () => {\n        this.expandProgress('begin', icn, trgt, trgtItemEle, args);\n        trgt.style.position = 'absolute';\n        height = trgtItemEle.offsetHeight;\n        trgt.style.maxHeight = trgt.offsetHeight + 'px';\n        trgtItemEle.style.maxHeight = '';\n      };\n\n      animate.progress = () => {\n        trgtItemEle.style.minHeight = height + trgt.offsetHeight + 'px';\n      };\n\n      animate.end = () => {\n        setStyleAttribute(trgt, {\n          'position': '',\n          'maxHeight': ''\n        });\n        trgtItemEle.style.minHeight = '';\n        this.expandProgress('end', icn, trgt, trgtItemEle, args);\n      };\n    } else {\n      animate.begin = () => {\n        this.expandProgress('begin', icn, trgt, trgtItemEle, args);\n      };\n\n      animate.end = () => {\n        this.expandProgress('end', icn, trgt, trgtItemEle, args);\n      };\n    }\n\n    new Animation(animate).animate(trgt);\n  }\n\n  expandProgress(progress, icon, trgt, trgtItemEle, eventArgs) {\n    this.remove(trgt, CLS_CTNHIDE);\n    this.add(trgtItemEle, CLS_SLCTED);\n    this.add(icon, CLS_EXPANDICN);\n\n    if (progress === 'end') {\n      this.add(trgtItemEle, CLS_ACTIVE);\n      trgt.setAttribute('aria-hidden', 'false');\n      attributes(trgtItemEle, {\n        'aria-expanded': 'true'\n      });\n      attributes(trgt.previousElementSibling, {\n        'aria-label': 'expanded'\n      });\n      icon.classList.remove(CLS_TOGANIMATE);\n      this.trigger('expanded', eventArgs);\n    }\n  }\n\n  expandedItemsPush(item) {\n    const index = this.getIndexByItem(item);\n\n    if (this.expandedIndices.indexOf(index) === -1) {\n      const temp = [].slice.call(this.expandedIndices);\n      temp.push(index);\n      this.setProperties({\n        expandedIndices: temp\n      }, true);\n    }\n  }\n\n  getIndexByItem(item) {\n    const itemEle = this.getItemElements();\n    return [].slice.call(itemEle).indexOf(item);\n  }\n\n  getItemElements() {\n    const itemEle = [];\n    const itemCollection = this.element.children;\n    [].slice.call(itemCollection).forEach(el => {\n      if (el.classList.contains(CLS_ITEM$1)) {\n        itemEle.push(el);\n      }\n    });\n    return itemEle;\n  }\n\n  expandedItemsPop(item) {\n    const index = this.getIndexByItem(item);\n    const temp = [].slice.call(this.expandedIndices);\n    temp.splice(temp.indexOf(index), 1);\n    this.setProperties({\n      expandedIndices: temp\n    }, true);\n  }\n\n  collapse(trgt) {\n    const items = this.getItems();\n    const trgtItemEle = closest(trgt, '.' + CLS_ITEM$1);\n\n    if (isNullOrUndefined(trgt) || !isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE$3)) {\n      return;\n    }\n\n    const animation = {\n      name: this.animation.collapse.effect,\n      duration: this.animation.collapse.duration,\n      timingFunction: this.animation.collapse.easing\n    };\n    const icon = select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;\n    const eventArgs = {\n      element: trgtItemEle,\n      item: items[this.getIndexByItem(trgtItemEle)],\n      index: this.getIndexByItem(trgtItemEle),\n      content: trgtItemEle.querySelector('.' + CLS_CONTENT),\n      isExpanded: false\n    };\n    this.trigger('expanding', eventArgs, expandArgs => {\n      if (!expandArgs.cancel) {\n        this.expandedItemsPop(trgtItemEle);\n        trgtItemEle.classList.remove(CLS_EXPANDSTATE);\n        icon.classList.add(CLS_TOGANIMATE);\n\n        if (animation.name === 'None') {\n          this.collapseProgress('begin', icon, trgt, trgtItemEle, expandArgs);\n          this.collapseProgress('end', icon, trgt, trgtItemEle, expandArgs);\n        } else {\n          this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);\n        }\n      }\n    });\n  }\n\n  collapseAnimation(ef, trgt, trgtItEl, icn, animate, args) {\n    let height;\n    let trgtHeight;\n    let itemHeight;\n    let remain;\n    this.lastActiveItemId = trgtItEl.id;\n\n    if (ef === 'SlideUp') {\n      animate.begin = () => {\n        itemHeight = trgtItEl.offsetHeight;\n        trgtItEl.style.minHeight = itemHeight + 'px';\n        trgt.style.position = 'absolute';\n        height = trgtItEl.offsetHeight;\n        trgtHeight = trgt.offsetHeight;\n        trgt.style.maxHeight = trgtHeight + 'px';\n        this.collapseProgress('begin', icn, trgt, trgtItEl, args);\n      };\n\n      animate.progress = () => {\n        remain = height - (trgtHeight - trgt.offsetHeight);\n\n        if (remain < itemHeight) {\n          trgtItEl.style.minHeight = remain + 'px';\n        }\n      };\n\n      animate.end = () => {\n        trgt.style.display = 'none';\n        this.collapseProgress('end', icn, trgt, trgtItEl, args);\n        trgtItEl.style.minHeight = '';\n        setStyleAttribute(trgt, {\n          'position': '',\n          'maxHeight': '',\n          'display': ''\n        });\n      };\n    } else {\n      animate.begin = () => {\n        this.collapseProgress('begin', icn, trgt, trgtItEl, args);\n      };\n\n      animate.end = () => {\n        this.collapseProgress('end', icn, trgt, trgtItEl, args);\n      };\n    }\n\n    new Animation(animate).animate(trgt);\n  }\n\n  collapseProgress(progress, icon, trgt, trgtItemEle, eventArgs) {\n    this.remove(icon, CLS_EXPANDICN);\n    this.remove(trgtItemEle, CLS_SLCTED);\n\n    if (progress === 'end') {\n      this.add(trgt, CLS_CTNHIDE);\n      icon.classList.remove(CLS_TOGANIMATE);\n      this.remove(trgtItemEle, CLS_ACTIVE);\n      trgt.setAttribute('aria-hidden', 'true');\n      attributes(trgtItemEle, {\n        'aria-expanded': 'false'\n      });\n      attributes(trgt.previousElementSibling, {\n        'aria-label': 'collapsed'\n      });\n      this.trigger('expanded', eventArgs);\n    }\n  }\n  /**\n   * Returns the current module name.\n   *\n   * @returns {string} - It returns the current module name.\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'accordion';\n  }\n\n  itemAttribUpdate() {\n    const items = this.getItems();\n    const itemEle = this.getItemElements();\n    const itemLen = items.length;\n    itemEle.forEach(ele => {\n      select('.' + CLS_HEADER, ele).setAttribute('aria-level', '' + itemLen);\n    });\n  }\n\n  getItems() {\n    let items;\n\n    if (this.itemTemplate && this.headerTemplate) {\n      items = this.dataSource;\n    } else {\n      items = this.items;\n    }\n\n    return items;\n  }\n  /**\n   * Adds new item to the Accordion with the specified index of the Accordion.\n   *\n   * @param  {AccordionItemModel | AccordionItemModel[] | Object | Object[]} item - Item array that is to be added to the Accordion.\n   * @param  {number} index - Number value that determines where the item should be added.\n   * By default, item is added at the last index if the index is not specified.\n   * @returns {void}\n   */\n\n\n  addItem(item, index) {\n    const ele = this.element;\n    const itemEle = this.getItemElements();\n    const items = this.getItems();\n\n    if (isNullOrUndefined(index)) {\n      index = items.length;\n    }\n\n    if (ele.childElementCount >= index) {\n      const addItems = item instanceof Array ? item : [item];\n      addItems.forEach((addItem, i) => {\n        const itemIndex = index + i;\n        items.splice(itemIndex, 0, addItem);\n        const innerItemEle = this.renderInnerItem(addItem, itemIndex);\n\n        if (ele.childElementCount === itemIndex) {\n          ele.appendChild(innerItemEle);\n        } else {\n          ele.insertBefore(innerItemEle, itemEle[itemIndex]);\n        }\n\n        EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'focus', this.focusIn, this);\n        EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'blur', this.focusOut, this);\n        this.itemAttribUpdate();\n        this.expandedIndices = [];\n        this.expandedItemRefresh(ele);\n\n        if (addItem && addItem.expanded) {\n          this.expandItem(true, itemIndex);\n        }\n      });\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  expandedItemRefresh(ele) {\n    const itemEle = this.getItemElements();\n    [].slice.call(itemEle).forEach(el => {\n      if (el.classList.contains(CLS_SLCTED)) {\n        this.expandedItemsPush(el);\n      }\n    });\n  }\n  /**\n   * Dynamically removes item from Accordion.\n   *\n   * @param  {number} index - Number value that determines which item should be removed.\n   * @returns {void}.\n   */\n\n\n  removeItem(index) {\n    if (this.isReact) {\n      this.clearTemplate(['headerTemplate', 'itemTemplate'], index);\n    }\n\n    const itemEle = this.getItemElements();\n    const ele = itemEle[index];\n    const items = this.getItems();\n\n    if (isNullOrUndefined(ele)) {\n      return;\n    }\n\n    this.restoreContent(index);\n    detach(ele);\n    items.splice(index, 1);\n    this.itemAttribUpdate();\n    this.expandedIndices = [];\n    this.expandedItemRefresh(this.element);\n  }\n  /**\n   * Sets focus to the specified index item header in Accordion.\n   *\n   * @param  {number} index - Number value that determines which item should be focused.\n   * @returns {void}.\n   */\n\n\n  select(index) {\n    const itemEle = this.getItemElements();\n    const ele = itemEle[index];\n\n    if (isNullOrUndefined(ele) || isNullOrUndefined(select('.' + CLS_HEADER, ele))) {\n      return;\n    }\n\n    ele.children[0].focus();\n  }\n  /**\n   * Shows or hides the specified item from Accordion.\n   *\n   * @param  {number} index - Number value that determines which item should be hidden/shown.\n   * @param  {boolean} isHidden - Boolean value that determines the action either hide (true) or show (false). Default value is false.\n   * If the `isHidden` value is false, the item is shown or else item it is hidden.\n   * @returns {void}.\n   */\n\n\n  hideItem(index, isHidden) {\n    const itemEle = this.getItemElements();\n    const ele = itemEle[index];\n\n    if (isNullOrUndefined(ele)) {\n      return;\n    }\n\n    if (isNullOrUndefined(isHidden)) {\n      isHidden = true;\n    }\n\n    if (isHidden) {\n      this.add(ele, CLS_ITEMHIDE);\n    } else {\n      this.remove(ele, CLS_ITEMHIDE);\n    }\n  }\n  /**\n   * Enables/Disables the specified Accordion item.\n   *\n   * @param  {number} index - Number value that determines which item should be enabled/disabled.\n   * @param  {boolean} isEnable - Boolean value that determines the action as enable (true) or disable (false).\n   * If the `isEnable` value is true, the item is enabled or else it is disabled.\n   * @returns {void}.\n   */\n\n\n  enableItem(index, isEnable) {\n    const itemEle = this.getItemElements();\n    const ele = itemEle[index];\n\n    if (isNullOrUndefined(ele)) {\n      return;\n    }\n\n    const eleHeader = ele.firstElementChild;\n\n    if (isEnable) {\n      this.remove(ele, CLS_DISABLE$3);\n      attributes(eleHeader, {\n        'tabindex': '0',\n        'aria-disabled': 'false'\n      });\n      eleHeader.focus();\n    } else {\n      if (ele.classList.contains(CLS_ACTIVE)) {\n        this.expandItem(false, index);\n        this.eleMoveFocus('movedown', this.element, eleHeader);\n      }\n\n      this.add(ele, CLS_DISABLE$3);\n      eleHeader.setAttribute('aria-disabled', 'true');\n      eleHeader.removeAttribute('tabindex');\n    }\n  }\n  /**\n   * Expands/Collapses the specified Accordion item.\n   *\n   * @param  {boolean} isExpand - Boolean value that determines the action as expand or collapse.\n   * @param  {number} index - Number value that determines which item should be expanded/collapsed.`index` is optional parameter.\n   * Without Specifying index, based on the `isExpand` value all Accordion item can be expanded or collapsed.\n   * @returns {void}.\n   */\n\n\n  expandItem(isExpand, index) {\n    const itemEle = this.getItemElements();\n\n    if (isNullOrUndefined(index)) {\n      if (this.expandMode === 'Single' && isExpand) {\n        const ele = itemEle[itemEle.length - 1];\n        this.itemExpand(isExpand, ele, this.getIndexByItem(ele));\n      } else {\n        const item = select('#' + this.lastActiveItemId, this.element);\n        [].slice.call(itemEle).forEach(el => {\n          this.itemExpand(isExpand, el, this.getIndexByItem(el));\n          el.classList.remove(CLS_EXPANDSTATE);\n        });\n        const expandedItem = select('.' + CLS_EXPANDSTATE, this.element);\n\n        if (expandedItem) {\n          expandedItem.classList.remove(CLS_EXPANDSTATE);\n        }\n\n        if (item) {\n          item.classList.add(CLS_EXPANDSTATE);\n        }\n      }\n    } else {\n      const ele = itemEle[index];\n\n      if (isNullOrUndefined(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {\n        return;\n      } else {\n        if (this.expandMode === 'Single') {\n          this.expandItem(false);\n        }\n\n        this.itemExpand(isExpand, ele, index);\n      }\n    }\n  }\n\n  itemExpand(isExpand, ele, index) {\n    let ctn = ele.children[1];\n\n    if (ele.classList.contains(CLS_DISABLE$3)) {\n      return;\n    }\n\n    if (isNullOrUndefined(ctn) && isExpand) {\n      ctn = this.contentRendering(index);\n      ele.appendChild(ctn);\n      this.ariaAttrUpdate(ele);\n      this.expand(ctn);\n    } else if (!isNullOrUndefined(ctn)) {\n      if (isExpand) {\n        this.expand(ctn);\n      } else {\n        this.collapse(ctn);\n      }\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n  destroyItems() {\n    this.restoreContent(null);\n\n    if (this.isReact || this.isAngular || this.isVue) {\n      this.clearTemplate();\n    }\n\n    [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1)).forEach(el => {\n      detach(el);\n    });\n  }\n\n  restoreContent(index) {\n    let ctnElePos;\n\n    if (isNullOrUndefined(index)) {\n      ctnElePos = this.element;\n    } else {\n      ctnElePos = this.element.querySelectorAll('.' + CLS_ITEM$1)[index];\n    }\n\n    this.templateEle.forEach(eleStr => {\n      if (!isNullOrUndefined(ctnElePos.querySelector(eleStr))) {\n        document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = 'none';\n      }\n    });\n  }\n\n  updateItem(item, index) {\n    if (!isNullOrUndefined(item)) {\n      const items = this.getItems();\n      const itemObj = items[index];\n      items.splice(index, 1);\n      this.restoreContent(index);\n      detach(item);\n      this.addItem(itemObj, index);\n    }\n  }\n\n  setTemplate(template, toElement, index) {\n    toElement.innerHTML = '';\n    this.templateCompile(toElement, template, index);\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n  templateCompile(ele, cnt, index) {\n    const tempEle = this.createElement('div');\n    this.fetchElement(tempEle, cnt, index, false);\n\n    if (tempEle.childNodes.length !== 0) {\n      [].slice.call(tempEle.childNodes).forEach(childEle => {\n        ele.appendChild(childEle);\n      });\n    }\n  }\n\n  getPersistData() {\n    const keyEntity = ['expandedIndices'];\n    return this.addOnPersist(keyEntity);\n  }\n  /**\n   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n   *\n   * @param  {AccordionModel} newProp - It contains the new value of data.\n   * @param  {AccordionModel} oldProp - It contains the old value of data.\n   * @returns {void}\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    const acrdn = this.element;\n    let isRefresh = false;\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'items':\n          if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n            const changedProp = Object.keys(newProp.items);\n\n            for (let j = 0; j < changedProp.length; j++) {\n              const index = parseInt(Object.keys(newProp.items)[j], 10);\n              const property = Object.keys(newProp.items[index])[0];\n              const item = selectAll('.' + CLS_ITEM$1, this.element)[index];\n              const oldVal = Object(oldProp.items[index])[property];\n              const newVal = Object(newProp.items[index])[property];\n              const temp = property;\n\n              if (temp === 'header' || temp === 'iconCss' || temp === 'expanded' || temp === 'content' && oldVal === '') {\n                this.updateItem(item, index);\n              }\n\n              if (property === 'cssClass' && !isNullOrUndefined(item)) {\n                item.classList.remove(oldVal);\n                item.classList.add(newVal);\n              }\n\n              if (property === 'visible' && !isNullOrUndefined(item)) {\n                if (Object(newProp.items[index])[property] === false) {\n                  item.classList.add(CLS_ITEMHIDE);\n                } else {\n                  item.classList.remove(CLS_ITEMHIDE);\n                }\n              }\n\n              if (property === 'disabled' && !isNullOrUndefined(item)) {\n                this.enableItem(index, !newVal);\n              }\n\n              if (property === 'content' && !isNullOrUndefined(item) && item.children.length === 2) {\n                if (typeof newVal === 'function') {\n                  const activeContent = item.querySelector('.' + CLS_CTENT);\n                  activeContent.innerHTML = '';\n                  this.setTemplate(newVal, activeContent, index);\n                } else {\n                  if (item.classList.contains(CLS_SLCTED)) {\n                    this.expandItem(false, index);\n                  }\n\n                  detach(item.querySelector('.' + CLS_CONTENT));\n                }\n              }\n            }\n          } else {\n            isRefresh = true;\n          }\n\n          break;\n\n        case 'dataSource':\n        case 'expandedIndices':\n          if (this.expandedIndices === null) {\n            this.expandedIndices = [];\n          }\n\n          isRefresh = true;\n          break;\n\n        case 'headerTemplate':\n          this.initializeHeaderTemplate();\n          isRefresh = true;\n          break;\n\n        case 'itemTemplate':\n          this.initializeItemTemplate();\n          isRefresh = true;\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.add(acrdn, CLS_RTL$3);\n          } else {\n            this.remove(acrdn, CLS_RTL$3);\n          }\n\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          break;\n\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': formatUnit(newProp.width)\n          });\n          break;\n\n        case 'expandMode':\n          if (newProp.expandMode === 'Single') {\n            this.element.setAttribute('aria-multiselectable', 'false');\n\n            if (this.expandedIndices.length > 1) {\n              this.expandItem(false);\n            }\n          } else {\n            this.element.setAttribute('aria-multiselectable', 'true');\n          }\n\n          break;\n      }\n    }\n\n    if (isRefresh) {\n      this.initExpand = [];\n\n      if (this.expandedIndices.length > 0) {\n        this.initExpand = this.expandedIndices;\n      }\n\n      this.destroyItems();\n      this.renderItems();\n      this.initItemExpand();\n    }\n  }\n\n};\n\n__decorate$4([Collection([], AccordionItem)], Accordion.prototype, \"items\", void 0);\n\n__decorate$4([Property([])], Accordion.prototype, \"dataSource\", void 0);\n\n__decorate$4([Property()], Accordion.prototype, \"itemTemplate\", void 0);\n\n__decorate$4([Property()], Accordion.prototype, \"headerTemplate\", void 0);\n\n__decorate$4([Property('100%')], Accordion.prototype, \"width\", void 0);\n\n__decorate$4([Property('auto')], Accordion.prototype, \"height\", void 0);\n\n__decorate$4([Property([])], Accordion.prototype, \"expandedIndices\", void 0);\n\n__decorate$4([Property('Multiple')], Accordion.prototype, \"expandMode\", void 0);\n\n__decorate$4([Property(false)], Accordion.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$4([Complex({}, AccordionAnimationSettings)], Accordion.prototype, \"animation\", void 0);\n\n__decorate$4([Event()], Accordion.prototype, \"clicked\", void 0);\n\n__decorate$4([Event()], Accordion.prototype, \"expanding\", void 0);\n\n__decorate$4([Event()], Accordion.prototype, \"expanded\", void 0);\n\n__decorate$4([Event()], Accordion.prototype, \"created\", void 0);\n\n__decorate$4([Event()], Accordion.prototype, \"destroyed\", void 0);\n\nAccordion = __decorate$4([NotifyPropertyChanges], Accordion);\n/**\n * Accordion all modules\n */\n\nvar __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path='../common/menu-base-model.d.ts'/>\n\n/**\n * The ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n * ```html\n * <div id = 'target'></div>\n * <ul id = 'contextmenu'></ul>\n * ```\n * ```typescript\n * <script>\n * var contextMenuObj = new ContextMenu({items: [{ text: 'Cut' }, { text: 'Copy' },{ text: 'Paste' }], target: '#target'});\n * </script>\n * ```\n */\n\n\nlet ContextMenu = class ContextMenu extends MenuBase {\n  /**\n   * Constructor for creating the widget.\n   *\n   * @private\n   * @param {ContextMenuModel} options - Specifies the context menu model\n   * @param {string} element - Specifies the element\n   */\n  constructor(options, element) {\n    super(options, element);\n  }\n  /**\n   * For internal use only - prerender processing.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    this.isMenu = false;\n    this.element.id = this.element.id || getUniqueID('ej2-contextmenu');\n    super.preRender();\n  }\n\n  initialize() {\n    super.initialize();\n    attributes(this.element, {\n      'role': 'menubar',\n      'tabindex': '0'\n    });\n    this.element.style.zIndex = getZindexPartial(this.element).toString();\n  }\n  /**\n   * This method is used to open the ContextMenu in specified position.\n   *\n   * @param {number} top - To specify ContextMenu vertical positioning.\n   * @param {number} left - To specify ContextMenu horizontal positioning.\n   * @param {HTMLElement} target - To calculate z-index for ContextMenu based upon the specified target.\n   * @function open\n   * @returns {void}\n   */\n\n\n  open(top, left, target) {\n    super.openMenu(null, null, top, left, null, target);\n  }\n  /**\n   * Closes the ContextMenu if it is opened.\n   *\n   * @function close\n   * @returns {void}\n   */\n\n\n  close() {\n    super.closeMenu();\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @private\n   * @param {ContextMenuModel} newProp - Specifies new properties\n   * @param {ContextMenuModel} oldProp - Specifies old properties\n   * @returns {void}\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    super.onPropertyChanged(newProp, oldProp);\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'filter':\n          this.close();\n          this.filter = newProp.filter;\n          break;\n\n        case 'target':\n          this.unWireEvents(oldProp.target);\n          this.wireEvents();\n          break;\n      }\n    }\n  }\n  /**\n   * Get module name.\n   *\n   * @returns {string} - Module Name\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'contextmenu';\n  }\n\n};\n\n__decorate$5([Property('')], ContextMenu.prototype, \"target\", void 0);\n\n__decorate$5([Property('')], ContextMenu.prototype, \"filter\", void 0);\n\n__decorate$5([Collection([], MenuItem)], ContextMenu.prototype, \"items\", void 0);\n\nContextMenu = __decorate$5([NotifyPropertyChanges], ContextMenu);\n/**\n * ContextMenu modules\n */\n\nvar __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path='../common/menu-base-model.d.ts'/>\n\n\nconst VMENU = 'e-vertical';\nconst SCROLLABLE = 'e-scrollable';\nconst HAMBURGER = 'e-hamburger';\n/**\n * The Menu is a graphical user interface that serve as navigation headers for your application or site.\n * ```html\n * <ul id = 'menu'></ul>\n * ```\n * ```typescript\n * <script>\n * var menuObj = new Menu({ items: [{ text: 'Home' }, { text: 'Contact Us' },{ text: 'Login' }]});\n * menuObj.appendTo(\"#menu\");\n * </script>\n * ```\n */\n\nlet Menu = class Menu extends MenuBase {\n  /**\n   * Constructor for creating the component.\n   *\n   * @private\n   * @param {MenuModel} options - Specifies the menu model\n   * @param {string} element - Specifies the element\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.tempItems = [];\n  }\n  /**\n   * Get module name.\n   *\n   * @private\n   * @returns {string} - Module Name\n   */\n\n\n  getModuleName() {\n    return 'menu';\n  }\n  /**\n   * For internal use only - prerender processing.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    this.isMenu = true;\n    this.element.id = this.element.id || getUniqueID('ej2-menu');\n\n    if (this.template) {\n      try {\n        if (document.querySelectorAll(this.template).length) {\n          this.template = document.querySelector(this.template).innerHTML.trim();\n          this.clearChanges();\n        }\n      } catch (e) {\n        /* action on catch */\n      }\n    } else {\n      this.updateMenuItems(this.items);\n    }\n\n    super.preRender();\n  }\n\n  initialize() {\n    super.initialize();\n    attributes(this.element, {\n      'role': 'menubar',\n      'tabindex': '0'\n    });\n\n    if (this.orientation === 'Vertical') {\n      this.element.classList.add(VMENU);\n\n      if (this.hamburgerMode && !this.target) {\n        this.element.previousElementSibling.classList.add(VMENU);\n      }\n\n      this.element.setAttribute('aria-orientation', 'vertical');\n    } else {\n      if (Browser.isDevice && !this.enableScrolling) {\n        this.element.parentElement.classList.add(SCROLLABLE);\n      }\n    }\n\n    if (this.hamburgerMode) {\n      this.element.parentElement.classList.add(HAMBURGER);\n\n      if (this.orientation === 'Horizontal') {\n        this.element.classList.add('e-hide-menu');\n      }\n    }\n  }\n\n  updateMenuItems(items) {\n    this.tempItems = items;\n    this.items = [];\n    this.tempItems.map(this.createMenuItems, this);\n    this.setProperties({\n      items: this.items\n    }, true);\n    this.tempItems = [];\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @private\n   * @param {MenuModel} newProp - Specifies the new properties.\n   * @param {MenuModel} oldProp - Specifies the old properties.\n   * @returns {void}\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'orientation':\n          if (newProp.orientation === 'Vertical') {\n            this.element.classList.add(VMENU);\n\n            if (this.hamburgerMode) {\n              if (!this.target) {\n                this.element.previousElementSibling.classList.add(VMENU);\n              }\n\n              this.element.classList.remove('e-hide-menu');\n            }\n\n            this.element.setAttribute('aria-orientation', 'vertical');\n          } else {\n            this.element.classList.remove(VMENU);\n\n            if (this.hamburgerMode) {\n              if (!this.target) {\n                this.element.previousElementSibling.classList.remove(VMENU);\n              }\n\n              this.element.classList.add('e-hide-menu');\n            }\n\n            this.element.removeAttribute('aria-orientation');\n          }\n\n          break;\n\n        case 'items':\n          if (!Object.keys(oldProp.items).length) {\n            this.updateMenuItems(newProp.items);\n          }\n\n          break;\n\n        case 'hamburgerMode':\n          if (!this.element.previousElementSibling) {\n            super.createHeaderContainer();\n          }\n\n          if (newProp.hamburgerMode) {\n            this.element.parentElement.classList.add(HAMBURGER);\n            [].slice.call(this.element.getElementsByClassName('e-blankicon')).forEach(li => {\n              li.style[this.enableRtl ? 'paddingRight' : 'paddingLeft'] = '';\n            });\n          } else {\n            this.element.parentElement.classList.remove(HAMBURGER);\n\n            if (this.orientation === 'Vertical') {\n              this.setBlankIconStyle(this.element);\n            }\n          }\n\n          if (this.orientation === 'Vertical') {\n            if (!this.target) {\n              this.element.previousElementSibling.classList.add(VMENU);\n            }\n\n            this.element.classList.remove('e-hide-menu');\n          } else {\n            if (this.target) {\n              this.element.previousElementSibling.classList.add(VMENU);\n            } else {\n              this.element.previousElementSibling.classList.remove(VMENU);\n            }\n\n            this.element.classList[newProp.hamburgerMode ? 'add' : 'remove']('e-hide-menu');\n          }\n\n          break;\n\n        case 'title':\n          if (this.hamburgerMode && this.element.previousElementSibling) {\n            newProp.title = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(newProp.title) : newProp.title;\n            this.element.previousElementSibling.querySelector('.e-menu-title').innerHTML = newProp.title;\n          }\n\n          break;\n\n        case 'target':\n          if (this.hamburgerMode) {\n            this.unWireEvents(oldProp.target);\n            this.wireEvents();\n\n            if (this.orientation === 'Horizontal') {\n              if (!newProp.target) {\n                if (!this.element.previousElementSibling) {\n                  super.createHeaderContainer();\n                }\n\n                this.element.previousElementSibling.classList.remove(VMENU);\n              } else {\n                this.element.previousElementSibling.classList.add(VMENU);\n              }\n\n              this.element.classList.add('e-hide-menu');\n            }\n          }\n\n          break;\n      }\n    }\n\n    super.onPropertyChanged(newProp, oldProp);\n  }\n\n  createMenuItems(item) {\n    let idx;\n    let i;\n    let items = this.items;\n    const pIdField = this.getField('parentId');\n\n    if (item[pIdField]) {\n      idx = this.getIndex(item[pIdField].toString(), true);\n\n      for (i = 0; i < idx.length; i++) {\n        if (!items[idx[i]].items) {\n          items[idx[i]].items = [];\n        }\n\n        items = items[idx[i]].items;\n      }\n\n      items.push(item);\n    } else {\n      this.items.push(item);\n    }\n  }\n  /**\n   * This method is used to open the Menu in hamburger mode.\n   *\n   * @function open\n   * @returns {void}\n   */\n\n\n  open() {\n    super.openHamburgerMenu();\n  }\n  /**\n   * Closes the Menu if it is opened in hamburger mode.\n   *\n   * @function close\n   * @returns {void}\n   */\n\n\n  close() {\n    super.closeHamburgerMenu();\n  }\n\n};\n\n__decorate$6([Property('Horizontal')], Menu.prototype, \"orientation\", void 0);\n\n__decorate$6([Property('')], Menu.prototype, \"target\", void 0);\n\n__decorate$6([Property(null)], Menu.prototype, \"template\", void 0);\n\n__decorate$6([Property(false)], Menu.prototype, \"enableScrolling\", void 0);\n\n__decorate$6([Property(false)], Menu.prototype, \"hamburgerMode\", void 0);\n\n__decorate$6([Property('Menu')], Menu.prototype, \"title\", void 0);\n\n__decorate$6([Property(false)], Menu.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$6([Complex({\n  itemId: 'id',\n  text: 'text',\n  parentId: 'parentId',\n  iconCss: 'iconCss',\n  url: 'url',\n  separator: 'separator',\n  children: 'items'\n}, FieldSettings)], Menu.prototype, \"fields\", void 0);\n\nMenu = __decorate$6([NotifyPropertyChanges], Menu);\n/**\n * Menu modules\n */\n\nvar __decorate$7 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst CLS_TAB = 'e-tab';\nconst CLS_HEADER$1 = 'e-tab-header';\nconst CLS_BLA_TEM = 'blazor-template';\nconst CLS_CONTENT$1 = 'e-content';\nconst CLS_NEST$1 = 'e-nested';\nconst CLS_ITEMS$1 = 'e-items';\nconst CLS_ITEM$2 = 'e-item';\nconst CLS_TEMPLATE$1 = 'e-template';\nconst CLS_RTL$4 = 'e-rtl';\nconst CLS_ACTIVE$1 = 'e-active';\nconst CLS_DISABLE$4 = 'e-disable';\nconst CLS_HIDDEN$1 = 'e-hidden';\nconst CLS_FOCUS = 'e-focused';\nconst CLS_ICONS = 'e-icons';\nconst CLS_ICON = 'e-icon';\nconst CLS_ICON_TAB = 'e-icon-tab';\nconst CLS_ICON_CLOSE = 'e-close-icon';\nconst CLS_CLOSE_SHOW = 'e-close-show';\nconst CLS_TEXT = 'e-tab-text';\nconst CLS_INDICATOR = 'e-indicator';\nconst CLS_WRAP = 'e-tab-wrap';\nconst CLS_TEXT_WRAP = 'e-text-wrap';\nconst CLS_TAB_ICON = 'e-tab-icon';\nconst CLS_TB_ITEMS = 'e-toolbar-items';\nconst CLS_TB_ITEM = 'e-toolbar-item';\nconst CLS_TB_POP = 'e-toolbar-pop';\nconst CLS_TB_POPUP = 'e-toolbar-popup';\nconst CLS_HOR_NAV = 'e-hor-nav';\nconst CLS_POPUP_OPEN = 'e-popup-open';\nconst CLS_POPUP_CLOSE = 'e-popup-close';\nconst CLS_PROGRESS = 'e-progress';\nconst CLS_IGNORE = 'e-ignore';\nconst CLS_OVERLAY$2 = 'e-overlay';\nconst CLS_HSCRCNT = 'e-hscroll-content';\nconst CLS_VSCRCNT = 'e-vscroll-content';\nconst CLS_VTAB = 'e-vertical-tab';\nconst CLS_VERTICAL$1 = 'e-vertical';\nconst CLS_VLEFT = 'e-vertical-left';\nconst CLS_VRIGHT = 'e-vertical-right';\nconst CLS_HBOTTOM = 'e-horizontal-bottom';\nconst CLS_FILL = 'e-fill-mode';\nconst TABITEMPREFIX = 'tabitem_';\nconst CLS_REORDER_ACTIVE_ITEM = 'e-reorder-active-item';\n/**\n * Objects used for configuring the Tab selecting item action properties.\n */\n\nclass TabActionSettings extends ChildProperty {}\n\n__decorate$7([Property('SlideLeftIn')], TabActionSettings.prototype, \"effect\", void 0);\n\n__decorate$7([Property(600)], TabActionSettings.prototype, \"duration\", void 0);\n\n__decorate$7([Property('ease')], TabActionSettings.prototype, \"easing\", void 0);\n/**\n * Objects used for configuring the Tab animation properties.\n */\n\n\nclass TabAnimationSettings extends ChildProperty {}\n\n__decorate$7([Complex({\n  effect: 'SlideLeftIn',\n  duration: 600,\n  easing: 'ease'\n}, TabActionSettings)], TabAnimationSettings.prototype, \"previous\", void 0);\n\n__decorate$7([Complex({\n  effect: 'SlideRightIn',\n  duration: 600,\n  easing: 'ease'\n}, TabActionSettings)], TabAnimationSettings.prototype, \"next\", void 0);\n/**\n * Objects used for configuring the Tab item header properties.\n */\n\n\nclass Header extends ChildProperty {}\n\n__decorate$7([Property('')], Header.prototype, \"text\", void 0);\n\n__decorate$7([Property('')], Header.prototype, \"iconCss\", void 0);\n\n__decorate$7([Property('left')], Header.prototype, \"iconPosition\", void 0);\n/**\n * An array of object that is used to configure the Tab.\n */\n\n\nclass TabItem extends ChildProperty {}\n\n__decorate$7([Complex({}, Header)], TabItem.prototype, \"header\", void 0);\n\n__decorate$7([Property(null)], TabItem.prototype, \"headerTemplate\", void 0);\n\n__decorate$7([Property('')], TabItem.prototype, \"content\", void 0);\n\n__decorate$7([Property('')], TabItem.prototype, \"cssClass\", void 0);\n\n__decorate$7([Property(false)], TabItem.prototype, \"disabled\", void 0);\n\n__decorate$7([Property(true)], TabItem.prototype, \"visible\", void 0);\n\n__decorate$7([Property()], TabItem.prototype, \"id\", void 0);\n/**\n * Tab is a content panel to show multiple contents in a single space, one at a time.\n * Each Tab item has an associated content, that will be displayed based on the active Tab header item.\n * ```html\n * <div id=\"tab\"></div>\n * <script>\n *   var tabObj = new Tab();\n *   tab.appendTo(\"#tab\");\n * </script>\n * ```\n */\n\n\nlet Tab = class Tab extends Component {\n  /**\n   * Initializes a new instance of the Tab class.\n   *\n   * @param {TabModel} options  - Specifies Tab model properties as options.\n   * @param {string | HTMLElement} element  - Specifies the element that is rendered as a Tab.\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.show = {};\n    this.hide = {};\n    this.maxHeight = 0;\n    this.title = 'Close';\n    this.isInteracted = false;\n    this.lastIndex = 0;\n    this.isAdd = false;\n    this.isIconAlone = false;\n    this.draggableItems = [];\n    this.resizeContext = this.refreshActiveTabBorder.bind(this);\n    /**\n     * Contains the keyboard configuration of the Tab.\n     */\n\n    this.keyConfigs = {\n      tab: 'tab',\n      home: 'home',\n      end: 'end',\n      enter: 'enter',\n      space: 'space',\n      delete: 'delete',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow'\n    };\n  }\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers, attributes and classes.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    if (this.isReact || this.isAngular) {\n      this.clearTemplate();\n    }\n\n    if (!isNullOrUndefined(this.tbObj)) {\n      this.tbObj.destroy();\n      this.tbObj = null;\n    }\n\n    this.unWireEvents();\n    ['role', 'aria-disabled', 'aria-activedescendant', 'tabindex', 'aria-orientation', 'aria-owns'].forEach(val => {\n      this.element.removeAttribute(val);\n    });\n    this.expTemplateContent();\n\n    if (!this.isTemplate) {\n      while (this.element.firstElementChild) {\n        remove(this.element.firstElementChild);\n      }\n    } else {\n      const cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n      this.element.classList.remove(CLS_TEMPLATE$1);\n\n      if (!isNullOrUndefined(cntEle)) {\n        cntEle.innerHTML = this.cnt;\n      }\n    }\n\n    if (this.btnCls) {\n      this.btnCls = null;\n    }\n\n    this.hdrEle = null;\n    this.cntEle = null;\n    this.tbItems = null;\n    this.tbItem = null;\n    this.tbPop = null;\n    this.prevItem = null;\n    this.popEle = null;\n    this.bdrLine = null;\n    this.content = null;\n    this.dragItem = null;\n    this.cloneElement = null;\n    this.draggingItems = [];\n\n    if (this.draggableItems && this.draggableItems.length > 0) {\n      for (let i = 0; i < this.draggableItems.length; i++) {\n        this.draggableItems[i].destroy();\n        this.draggableItems[i] = null;\n      }\n\n      this.draggableItems = [];\n    }\n\n    super.destroy();\n    this.trigger('destroyed');\n  }\n  /**\n   * Refresh the tab component\n   *\n   * @returns {void}\n   */\n\n\n  refresh() {\n    if (this.isReact) {\n      this.clearTemplate();\n    }\n\n    super.refresh();\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n  /**\n   * Initialize component\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    const nested = closest(this.element, '.' + CLS_CONTENT$1);\n    this.prevIndex = 0;\n    this.isNested = false;\n    this.isPopup = false;\n    this.initRender = true;\n    this.isSwipeed = false;\n    this.itemIndexArray = [];\n    this.templateEle = [];\n\n    if (this.allowDragAndDrop) {\n      this.dragArea = !isNullOrUndefined(this.dragArea) ? this.dragArea : '#' + this.element.id + ' ' + ('.' + CLS_HEADER$1);\n    }\n\n    if (!isNullOrUndefined(nested)) {\n      nested.parentElement.classList.add(CLS_NEST$1);\n      this.isNested = true;\n    }\n\n    const name = Browser.info.name;\n    const css = name === 'msie' ? 'e-ie' : name === 'edge' ? 'e-edge' : name === 'safari' ? 'e-safari' : '';\n    setStyleAttribute(this.element, {\n      'width': formatUnit(this.width),\n      'height': formatUnit(this.height)\n    });\n    this.setCssClass(this.element, this.cssClass, true);\n    attributes(this.element, {\n      role: 'tablist',\n      'aria-disabled': 'false',\n      'aria-activedescendant': '',\n      'aria-owns': this.element.id + '_' + 'tab_header_items'\n    });\n    this.setCssClass(this.element, css, true);\n    this.updatePopAnimationConfig();\n  }\n  /**\n   * Initialize the component rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.btnCls = this.createElement('span', {\n      className: CLS_ICONS + ' ' + CLS_ICON_CLOSE,\n      attrs: {\n        title: this.title\n      }\n    });\n    this.tabId = this.element.id.length > 0 ? '-' + this.element.id : getRandomId();\n    this.renderContainer();\n    this.wireEvents();\n    this.initRender = false;\n  }\n\n  renderContainer() {\n    const ele = this.element;\n    this.items.forEach((item, index) => {\n      if (isNullOrUndefined(item.id) && !isNullOrUndefined(item.setProperties)) {\n        item.setProperties({\n          id: TABITEMPREFIX + index.toString()\n        }, true);\n      }\n    });\n\n    if (this.items.length > 0 && ele.children.length === 0) {\n      ele.appendChild(this.createElement('div', {\n        className: CLS_CONTENT$1\n      }));\n      this.setOrientation(this.headerPlacement, this.createElement('div', {\n        className: CLS_HEADER$1\n      }));\n      this.isTemplate = false;\n    } else if (this.element.children.length > 0) {\n      this.isTemplate = true;\n      ele.classList.add(CLS_TEMPLATE$1);\n      const header = ele.querySelector('.' + CLS_HEADER$1);\n\n      if (header && this.headerPlacement === 'Bottom') {\n        this.setOrientation(this.headerPlacement, header);\n      }\n    }\n\n    if (!isNullOrUndefined(select('.' + CLS_HEADER$1, this.element)) && !isNullOrUndefined(select('.' + CLS_CONTENT$1, this.element))) {\n      this.renderHeader();\n      this.tbItems = select('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);\n\n      if (!isNullOrUndefined(this.tbItems)) {\n        rippleEffect(this.tbItems, {\n          selector: '.e-tab-wrap'\n        });\n      }\n\n      this.renderContent();\n\n      if (selectAll('.' + CLS_TB_ITEM, this.element).length > 0) {\n        this.tbItems = select('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);\n        this.bdrLine = this.createElement('div', {\n          className: CLS_INDICATOR + ' ' + CLS_HIDDEN$1 + ' ' + CLS_IGNORE\n        });\n        const scrCnt = select('.' + this.scrCntClass, this.tbItems);\n\n        if (!isNullOrUndefined(scrCnt)) {\n          scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);\n        } else {\n          this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);\n        }\n\n        this.setContentHeight(true);\n        this.select(this.selectedItem);\n      }\n\n      if (!isNullOrUndefined(this.tbItem)) {\n        for (let i = 0; i < this.items.length; i++) {\n          if (this.items[i]) {\n            const tabID = this.items[i].id;\n            this.tbItem[i].setAttribute('data-id', tabID);\n          }\n        }\n      }\n\n      this.setRTL(this.enableRtl);\n    }\n  }\n\n  renderHeader() {\n    const hdrPlace = this.headerPlacement;\n    let tabItems = [];\n    this.hdrEle = this.getTabHeader();\n    this.addVerticalClass();\n\n    if (!this.isTemplate) {\n      tabItems = this.parseObject(this.items, 0);\n    } else {\n      if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER$1)) {\n        this.setProperties({\n          headerPlacement: 'Bottom'\n        }, true);\n      }\n\n      const count = this.hdrEle.children.length;\n      const hdrItems = [];\n\n      for (let i = 0; i < count; i++) {\n        hdrItems.push(this.hdrEle.children.item(i).innerHTML);\n      }\n\n      if (count > 0) {\n        while (this.hdrEle.firstElementChild) {\n          detach(this.hdrEle.firstElementChild);\n        }\n\n        const tabItems = this.createElement('div', {\n          className: CLS_ITEMS$1\n        });\n        this.hdrEle.appendChild(tabItems);\n        hdrItems.forEach((item, index) => {\n          this.lastIndex = index;\n          const attr = {\n            className: CLS_ITEM$2,\n            id: CLS_ITEM$2 + this.tabId + '_' + index,\n            attrs: {\n              role: 'tab',\n              'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + index,\n              'aria-selected': 'false'\n            }\n          };\n          const txt = this.createElement('span', {\n            className: CLS_TEXT,\n            innerHTML: item,\n            attrs: {\n              'role': 'presentation'\n            }\n          }).outerHTML;\n          const cont = this.createElement('div', {\n            className: CLS_TEXT_WRAP,\n            innerHTML: txt + this.btnCls.outerHTML\n          }).outerHTML;\n          const wrap = this.createElement('div', {\n            className: CLS_WRAP,\n            innerHTML: cont,\n            attrs: {\n              tabIndex: '-1'\n            }\n          });\n          tabItems.appendChild(this.createElement('div', attr));\n          selectAll('.' + CLS_ITEM$2, tabItems)[index].appendChild(wrap);\n        });\n      }\n    }\n\n    this.tbObj = new Toolbar({\n      width: hdrPlace === 'Left' || hdrPlace === 'Right' ? 'auto' : '100%',\n      height: hdrPlace === 'Left' || hdrPlace === 'Right' ? '100%' : 'auto',\n      overflowMode: this.overflowMode,\n      items: tabItems.length !== 0 ? tabItems : [],\n      clicked: this.clickHandler.bind(this),\n      scrollStep: this.scrollStep,\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      cssClass: this.cssClass\n    });\n    this.tbObj.isStringTemplate = true;\n    this.tbObj.createElement = this.createElement;\n    this.tbObj.appendTo(this.hdrEle);\n    attributes(this.hdrEle, {\n      'aria-label': 'tab-header'\n    });\n    this.updateOrientationAttribute();\n    this.setCloseButton(this.showCloseButton);\n    const toolbarHeader = this.tbObj.element.querySelector('.' + CLS_TB_ITEMS);\n\n    if (!isNullOrUndefined(toolbarHeader)) {\n      if (isNullOrUndefined(toolbarHeader.id) || toolbarHeader.id === '') {\n        toolbarHeader.id = this.element.id + '_' + 'tab_header_items';\n      }\n\n      this.element.setAttribute('aria-owns', toolbarHeader.id);\n    }\n  }\n\n  renderContent() {\n    this.cntEle = select('.' + CLS_CONTENT$1, this.element);\n    const hdrItem = selectAll('.' + CLS_TB_ITEM, this.element);\n\n    if (this.isTemplate) {\n      this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : '';\n      const contents = this.cntEle.children;\n\n      for (let i = 0; i < hdrItem.length; i++) {\n        if (contents.length - 1 >= i) {\n          addClass([contents.item(i)], CLS_ITEM$2);\n          attributes(contents.item(i), {\n            'role': 'tabpanel',\n            'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + i\n          });\n          contents.item(i).id = CLS_CONTENT$1 + this.tabId + '_' + i;\n        }\n      }\n    }\n  }\n\n  reRenderItems() {\n    this.renderContainer();\n\n    if (!isNullOrUndefined(this.cntEle)) {\n      this.touchModule = new Touch(this.cntEle, {\n        swipe: this.swipeHandler.bind(this)\n      });\n    }\n  }\n\n  parseObject(items, index) {\n    const tbItems = selectAll('.e-tab-header .' + CLS_TB_ITEM, this.element);\n    let maxId = this.lastIndex;\n\n    if (!this.isReplace && tbItems.length > 0) {\n      const idList = [];\n      tbItems.forEach(item => {\n        idList.push(parseInt(item.id.slice(item.id.indexOf('_') + 1), 10));\n      });\n      maxId = Math.max(...idList);\n    }\n\n    const tItems = [];\n    let txtWrapEle;\n    const spliceArray = [];\n    items.forEach((item, i) => {\n      const pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? '' : item.header.iconPosition;\n      const css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? '' : item.header.iconCss;\n\n      if (isNullOrUndefined(item.headerTemplate) && (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.text) || item.header.text.length === 0 && css === '')) {\n        spliceArray.push(i);\n        return;\n      }\n\n      let txt = item.headerTemplate || item.header.text;\n\n      if (typeof txt === 'string' && this.enableHtmlSanitizer) {\n        txt = SanitizeHtmlHelper.sanitize(txt);\n      }\n\n      let itemIndex;\n\n      if (this.isReplace && !isNullOrUndefined(this.tbId) && this.tbId !== '') {\n        const num = this.tbId.indexOf('_');\n        itemIndex = parseInt(this.tbId.substring(num + 1), 10);\n        this.tbId = '';\n      } else {\n        itemIndex = index + i;\n      }\n\n      this.lastIndex = tbItems.length === 0 ? i : this.isReplace ? itemIndex : maxId + 1 + i;\n      const disabled = item.disabled ? ' ' + CLS_DISABLE$4 + ' ' + CLS_OVERLAY$2 : '';\n      const hidden = item.visible === false ? ' ' + CLS_HIDDEN$1 : '';\n      txtWrapEle = this.createElement('div', {\n        className: CLS_TEXT,\n        attrs: {\n          'role': 'presentation'\n        }\n      });\n      const tHtml = txt instanceof Object ? txt.outerHTML : txt;\n      const txtEmpty = !isNullOrUndefined(tHtml) && tHtml !== '';\n\n      if (!isNullOrUndefined(txt.tagName)) {\n        txtWrapEle.appendChild(txt);\n      } else {\n        this.headerTextCompile(txtWrapEle, txt, i);\n      }\n\n      let tEle;\n      const icon = this.createElement('span', {\n        className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css\n      });\n      const tCont = this.createElement('div', {\n        className: CLS_TEXT_WRAP\n      });\n      tCont.appendChild(txtWrapEle);\n\n      if (txt !== '' && txt !== undefined && css !== '') {\n        if (pos === 'left' || pos === 'top') {\n          tCont.insertBefore(icon, tCont.firstElementChild);\n        } else {\n          tCont.appendChild(icon);\n        }\n\n        tEle = txtWrapEle;\n        this.isIconAlone = false;\n      } else {\n        tEle = css === '' ? txtWrapEle : icon;\n\n        if (tEle === icon) {\n          detach(txtWrapEle);\n          tCont.appendChild(icon);\n          this.isIconAlone = true;\n        }\n      }\n\n      const wrapAttrs = item.disabled ? {} : {\n        tabIndex: '-1'\n      };\n      tCont.appendChild(this.btnCls.cloneNode(true));\n      const wrap = this.createElement('div', {\n        className: CLS_WRAP,\n        attrs: wrapAttrs\n      });\n      wrap.appendChild(tCont);\n\n      if (this.itemIndexArray === []) {\n        this.itemIndexArray.push(CLS_ITEM$2 + this.tabId + '_' + this.lastIndex);\n      } else {\n        this.itemIndexArray.splice(index + i, 0, CLS_ITEM$2 + this.tabId + '_' + this.lastIndex);\n      }\n\n      const attrObj = {\n        id: CLS_ITEM$2 + this.tabId + '_' + this.lastIndex,\n        role: 'tab',\n        'aria-selected': 'false'\n      };\n      const tItem = {\n        htmlAttributes: attrObj,\n        template: wrap\n      };\n      tItem.cssClass = (item.cssClass !== undefined ? item.cssClass : ' ') + ' ' + disabled + ' ' + hidden + ' ' + (css !== '' ? 'e-i' + pos : '') + ' ' + (!txtEmpty ? CLS_ICON : '');\n\n      if (pos === 'top' || pos === 'bottom') {\n        this.element.classList.add('e-vertical-icon');\n      }\n\n      tItems.push(tItem);\n      i++;\n    });\n\n    if (!this.isAdd) {\n      spliceArray.forEach(spliceItemIndex => {\n        this.items.splice(spliceItemIndex, 1);\n      });\n    }\n\n    if (this.isIconAlone) {\n      this.element.classList.add(CLS_ICON_TAB);\n    } else {\n      this.element.classList.remove(CLS_ICON_TAB);\n    }\n\n    return tItems;\n  }\n\n  removeActiveClass() {\n    const tabHeader = this.getTabHeader();\n\n    if (tabHeader) {\n      const tabItems = selectAll('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1, tabHeader);\n      [].slice.call(tabItems).forEach(node => node.classList.remove(CLS_ACTIVE$1));\n    }\n  }\n\n  checkPopupOverflow(ele) {\n    this.tbPop = select('.' + CLS_TB_POP, this.element);\n    const popIcon = select('.e-hor-nav', this.element);\n    const tbrItems = select('.' + CLS_TB_ITEMS, this.element);\n    const lastChild = tbrItems.lastChild;\n    let isOverflow = false;\n\n    if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {\n      isOverflow = true;\n    } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {\n      isOverflow = true;\n    }\n\n    if (isOverflow) {\n      ele.classList.add(CLS_TB_POPUP);\n      this.tbPop.insertBefore(ele, selectAll('.' + CLS_TB_POPUP, this.tbPop)[0]);\n    }\n\n    return true;\n  }\n\n  popupHandler(target) {\n    const ripEle = target.querySelector('.e-ripple-element');\n\n    if (!isNullOrUndefined(ripEle)) {\n      ripEle.outerHTML = '';\n      target.querySelector('.' + CLS_WRAP).classList.remove('e-ripple');\n    }\n\n    this.tbItem = selectAll('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);\n    const lastChild = this.tbItem[this.tbItem.length - 1];\n\n    if (this.tbItem.length !== 0) {\n      target.classList.remove(CLS_TB_POPUP);\n      target.removeAttribute('style');\n      this.tbItems.appendChild(target);\n      this.actEleId = target.id;\n\n      if (this.checkPopupOverflow(lastChild)) {\n        const prevEle = this.tbItems.lastChild.previousElementSibling;\n        this.checkPopupOverflow(prevEle);\n      }\n\n      this.isPopup = true;\n    }\n\n    return selectAll('.' + CLS_TB_ITEM, this.tbItems).length - 1;\n  }\n\n  updateOrientationAttribute() {\n    attributes(this.element, {\n      'aria-orientation': this.isVertical() ? 'vertical' : 'horizontal'\n    });\n  }\n\n  setCloseButton(val) {\n    const trg = select('.' + CLS_HEADER$1, this.element);\n\n    if (val === true) {\n      trg.classList.add(CLS_CLOSE_SHOW);\n    } else {\n      trg.classList.remove(CLS_CLOSE_SHOW);\n    }\n\n    this.tbObj.refreshOverflow();\n    this.refreshActiveTabBorder();\n  }\n\n  prevCtnAnimation(prev, current) {\n    let animation;\n    const checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL$4);\n\n    if (this.isPopup || prev <= current) {\n      if (this.animation.previous.effect === 'SlideLeftIn') {\n        animation = {\n          name: 'SlideLeftOut',\n          duration: this.animation.previous.duration,\n          timingFunction: this.animation.previous.easing\n        };\n      } else {\n        animation = null;\n      }\n    } else {\n      if (this.animation.next.effect === 'SlideRightIn') {\n        animation = {\n          name: 'SlideRightOut',\n          duration: this.animation.next.duration,\n          timingFunction: this.animation.next.easing\n        };\n      } else {\n        animation = null;\n      }\n    }\n\n    return animation;\n  }\n\n  triggerPrevAnimation(oldCnt, prevIndex) {\n    const animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);\n\n    if (!isNullOrUndefined(animateObj)) {\n      animateObj.begin = () => {\n        setStyleAttribute(oldCnt, {\n          'position': 'absolute'\n        });\n        oldCnt.classList.add(CLS_PROGRESS);\n        oldCnt.classList.add('e-view');\n      };\n\n      animateObj.end = () => {\n        oldCnt.style.display = 'none';\n        oldCnt.classList.remove(CLS_ACTIVE$1);\n        oldCnt.classList.remove(CLS_PROGRESS);\n        oldCnt.classList.remove('e-view');\n        setStyleAttribute(oldCnt, {\n          'display': '',\n          'position': ''\n        });\n\n        if (oldCnt.childNodes.length === 0 && !this.isTemplate) {\n          detach(oldCnt);\n        }\n      };\n\n      new Animation(animateObj).animate(oldCnt);\n    } else {\n      oldCnt.classList.remove(CLS_ACTIVE$1);\n    }\n  }\n\n  triggerAnimation(id, value) {\n    const prevIndex = this.prevIndex;\n    let oldCnt;\n    const itemCollection = [].slice.call(this.element.querySelector('.' + CLS_CONTENT$1).children);\n    itemCollection.forEach(item => {\n      if (item.id === this.prevActiveEle) {\n        oldCnt = item;\n      }\n    });\n    const prevEle = this.tbItem[prevIndex];\n    const newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));\n\n    if (isNullOrUndefined(oldCnt) && !isNullOrUndefined(prevEle)) {\n      const idNo = this.extIndex(prevEle.id);\n      oldCnt = this.getTrgContent(this.cntEle, idNo);\n    }\n\n    if (!isNullOrUndefined(newCnt)) {\n      this.prevActiveEle = newCnt.id;\n    }\n\n    if (this.initRender || value === false || this.animation === {} || isNullOrUndefined(this.animation)) {\n      if (oldCnt && oldCnt !== newCnt) {\n        oldCnt.classList.remove(CLS_ACTIVE$1);\n      }\n\n      return;\n    }\n\n    const cnt = select('.' + CLS_CONTENT$1, this.element);\n    let animateObj;\n\n    if (this.prevIndex > this.selectedItem && !this.isPopup) {\n      const openEff = this.animation.previous.effect;\n      animateObj = {\n        name: openEff === 'None' ? '' : openEff !== 'SlideLeftIn' ? openEff : 'SlideLeftIn',\n        duration: this.animation.previous.duration,\n        timingFunction: this.animation.previous.easing\n      };\n    } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {\n      const clsEff = this.animation.next.effect;\n      animateObj = {\n        name: clsEff === 'None' ? '' : clsEff !== 'SlideRightIn' ? clsEff : 'SlideRightIn',\n        duration: this.animation.next.duration,\n        timingFunction: this.animation.next.easing\n      };\n    }\n\n    animateObj.progress = () => {\n      cnt.classList.add(CLS_PROGRESS);\n      this.setActiveBorder();\n    };\n\n    animateObj.end = () => {\n      cnt.classList.remove(CLS_PROGRESS);\n      newCnt.classList.add(CLS_ACTIVE$1);\n    };\n\n    if (!this.initRender && !isNullOrUndefined(oldCnt)) {\n      this.triggerPrevAnimation(oldCnt, prevIndex);\n    }\n\n    this.isPopup = false;\n\n    if (animateObj.name === '') {\n      newCnt.classList.add(CLS_ACTIVE$1);\n    } else {\n      new Animation(animateObj).animate(newCnt);\n    }\n  }\n\n  keyPressed(trg) {\n    const trgParent = closest(trg, '.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEM);\n    const trgIndex = this.getEleIndex(trgParent);\n\n    if (!isNullOrUndefined(this.popEle) && trg.classList.contains('e-hor-nav')) {\n      this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);\n    } else if (trg.classList.contains('e-scroll-nav')) {\n      trg.click();\n    } else {\n      if (!isNullOrUndefined(trgParent) && trgParent.classList.contains(CLS_ACTIVE$1) === false) {\n        this.selectTab(trgIndex, null, true);\n\n        if (!isNullOrUndefined(this.popEle)) {\n          this.popObj.hide(this.hide);\n        }\n      }\n    }\n  }\n\n  getTabHeader() {\n    if (isNullOrUndefined(this.element)) {\n      return undefined;\n    }\n\n    const headers = [].slice.call(this.element.children).filter(e => e.classList.contains(CLS_HEADER$1));\n\n    if (headers.length > 0) {\n      return headers[0];\n    } else {\n      const wrap = [].slice.call(this.element.children).filter(e => !e.classList.contains(CLS_BLA_TEM))[0];\n\n      if (!wrap) {\n        return undefined;\n      }\n\n      return [].slice.call(wrap.children).filter(e => e.classList.contains(CLS_HEADER$1))[0];\n    }\n  }\n\n  getEleIndex(item) {\n    return Array.prototype.indexOf.call(selectAll('.' + CLS_TB_ITEM, this.getTabHeader()), item);\n  }\n\n  extIndex(id) {\n    return id.replace(CLS_ITEM$2 + this.tabId + '_', '');\n  }\n\n  expTemplateContent() {\n    this.templateEle.forEach(eleStr => {\n      if (!isNullOrUndefined(this.element.querySelector(eleStr))) {\n        document.body.appendChild(this.element.querySelector(eleStr)).style.display = 'none';\n      }\n    });\n  }\n\n  templateCompile(ele, cnt, index) {\n    const tempEle = this.createElement('div');\n    this.compileElement(tempEle, cnt, 'content', index);\n\n    if (tempEle.childNodes.length !== 0) {\n      ele.appendChild(tempEle);\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n  compileElement(ele, val, prop, index) {\n    let templateFn;\n\n    if (typeof val === 'string') {\n      val = val.trim();\n\n      if (this.isVue) {\n        templateFn = compile(SanitizeHtmlHelper.sanitize(val));\n      } else {\n        ele.innerHTML = SanitizeHtmlHelper.sanitize(val);\n      }\n    } else {\n      templateFn = compile(val);\n    }\n\n    let templateFUN;\n\n    if (!isNullOrUndefined(templateFn)) {\n      templateFUN = templateFn({}, this, prop);\n    }\n\n    if (!isNullOrUndefined(templateFn) && templateFUN.length > 0) {\n      [].slice.call(templateFUN).forEach(el => {\n        ele.appendChild(el);\n      });\n    }\n  }\n\n  headerTextCompile(element, text, index) {\n    this.compileElement(element, text, 'headerTemplate', index);\n  }\n\n  getContent(ele, cnt, callType, index) {\n    let eleStr;\n    cnt = isNullOrUndefined(cnt) ? \"\" : cnt;\n\n    if (typeof cnt === 'string' || isNullOrUndefined(cnt.innerHTML)) {\n      if (typeof cnt === 'string' && this.enableHtmlSanitizer) {\n        cnt = SanitizeHtmlHelper.sanitize(cnt);\n      }\n\n      if (cnt[0] === '.' || cnt[0] === '#') {\n        if (document.querySelectorAll(cnt).length) {\n          const eleVal = document.querySelector(cnt);\n          eleStr = eleVal.outerHTML.trim();\n\n          if (callType === 'clone') {\n            ele.appendChild(eleVal.cloneNode(true));\n          } else {\n            ele.appendChild(eleVal);\n            eleVal.style.display = '';\n          }\n        } else {\n          this.templateCompile(ele, cnt, index);\n        }\n      } else {\n        this.templateCompile(ele, cnt, index);\n      }\n    } else {\n      ele.appendChild(cnt);\n    }\n\n    if (!isNullOrUndefined(eleStr)) {\n      if (this.templateEle.indexOf(cnt.toString()) === -1) {\n        this.templateEle.push(cnt.toString());\n      }\n    }\n  }\n\n  getTrgContent(cntEle, no) {\n    let ele;\n\n    if (this.element.classList.contains(CLS_NEST$1)) {\n      ele = select('.' + CLS_NEST$1 + '> .' + CLS_CONTENT$1 + ' > #' + CLS_CONTENT$1 + this.tabId + '_' + no, this.element);\n    } else {\n      ele = this.findEle(cntEle.children, CLS_CONTENT$1 + this.tabId + '_' + no);\n    }\n\n    return ele;\n  }\n\n  findEle(items, key) {\n    let ele;\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].id === key) {\n        ele = items[i];\n        break;\n      }\n    }\n\n    return ele;\n  }\n\n  isVertical() {\n    const isVertical = this.headerPlacement === 'Left' || this.headerPlacement === 'Right' ? true : false;\n    this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;\n    return isVertical;\n  }\n\n  addVerticalClass() {\n    if (this.isVertical()) {\n      const tbPos = this.headerPlacement === 'Left' ? CLS_VLEFT : CLS_VRIGHT;\n      addClass([this.hdrEle], [CLS_VERTICAL$1, tbPos]);\n\n      if (!this.element.classList.contains(CLS_NEST$1)) {\n        addClass([this.element], [CLS_VTAB, tbPos]);\n      } else {\n        addClass([this.hdrEle], [CLS_VTAB, tbPos]);\n      }\n    }\n\n    if (this.headerPlacement === 'Bottom') {\n      addClass([this.hdrEle], [CLS_HBOTTOM]);\n    }\n  }\n\n  updatePopAnimationConfig() {\n    this.show = {\n      name: this.isVertical() ? 'FadeIn' : 'SlideDown',\n      duration: 100\n    };\n    this.hide = {\n      name: this.isVertical() ? 'FadeOut' : 'SlideUp',\n      duration: 100\n    };\n  }\n\n  changeOrientation(place) {\n    this.setOrientation(place, this.hdrEle);\n    const activeTab = this.hdrEle.querySelector('.' + CLS_ACTIVE$1);\n    const isVertical = this.hdrEle.classList.contains(CLS_VERTICAL$1) ? true : false;\n    removeClass([this.element], [CLS_VTAB]);\n    removeClass([this.hdrEle], [CLS_VERTICAL$1, CLS_VLEFT, CLS_VRIGHT]);\n\n    if (isVertical !== this.isVertical()) {\n      this.changeToolbarOrientation();\n\n      if (!isNullOrUndefined(activeTab) && activeTab.classList.contains(CLS_TB_POPUP)) {\n        this.popupHandler(activeTab);\n      }\n    }\n\n    this.addVerticalClass();\n    this.updateOrientationAttribute();\n    this.setActiveBorder();\n    this.focusItem();\n  }\n\n  focusItem() {\n    const curActItem = select(' #' + CLS_ITEM$2 + this.tabId + '_' + this.selectedItem, this.hdrEle);\n\n    if (!isNullOrUndefined(curActItem)) {\n      curActItem.firstElementChild.focus();\n    }\n  }\n\n  changeToolbarOrientation() {\n    this.tbObj.setProperties({\n      height: this.isVertical() ? '100%' : 'auto',\n      width: this.isVertical() ? 'auto' : '100%'\n    }, true);\n    this.tbObj.changeOrientation();\n    this.updatePopAnimationConfig();\n  }\n\n  setOrientation(place, ele) {\n    const headerPos = Array.prototype.indexOf.call(this.element.children, ele);\n    const contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector('.' + CLS_CONTENT$1));\n\n    if (place === 'Bottom' && contentPos > headerPos) {\n      this.element.appendChild(ele);\n    } else {\n      removeClass([ele], [CLS_HBOTTOM]);\n      this.element.insertBefore(ele, select('.' + CLS_CONTENT$1, this.element));\n    }\n  }\n\n  setCssClass(ele, cls, val) {\n    if (cls === '') {\n      return;\n    }\n\n    const list = cls.split(' ');\n\n    for (let i = 0; i < list.length; i++) {\n      if (val) {\n        ele.classList.add(list[i]);\n      } else {\n        ele.classList.remove(list[i]);\n      }\n    }\n  }\n\n  setContentHeight(val) {\n    if (this.element.classList.contains(CLS_FILL)) {\n      removeClass([this.element], [CLS_FILL]);\n    }\n\n    if (isNullOrUndefined(this.cntEle)) {\n      return;\n    }\n\n    const hdrEle = this.getTabHeader();\n\n    if (this.heightAdjustMode === 'None') {\n      if (this.height === 'auto') {\n        return;\n      } else {\n        if (!this.isVertical()) {\n          setStyleAttribute(this.cntEle, {\n            'height': this.element.offsetHeight - hdrEle.offsetHeight + 'px'\n          });\n        }\n      }\n    } else if (this.heightAdjustMode === 'Fill') {\n      addClass([this.element], [CLS_FILL]);\n      setStyleAttribute(this.element, {\n        'height': '100%'\n      });\n      setStyleAttribute(this.cntEle, {\n        'height': this.element.offsetHeight - hdrEle.offsetHeight + 'px'\n      });\n    } else if (this.heightAdjustMode === 'Auto') {\n      if (this.isTemplate === true) {\n        const cnt = selectAll('.' + CLS_CONTENT$1 + ' > .' + CLS_ITEM$2, this.element);\n\n        for (let i = 0; i < cnt.length; i++) {\n          cnt[i].setAttribute('style', 'display:block; visibility: visible');\n          this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));\n          cnt[i].style.removeProperty('display');\n          cnt[i].style.removeProperty('visibility');\n        }\n      } else {\n        this.cntEle = select('.' + CLS_CONTENT$1, this.element);\n\n        if (val === true) {\n          this.cntEle.appendChild(this.createElement('div', {\n            id: CLS_CONTENT$1 + this.tabId + '_' + 0,\n            className: CLS_ITEM$2 + ' ' + CLS_ACTIVE$1,\n            attrs: {\n              'role': 'tabpanel',\n              'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + 0\n            }\n          }));\n        }\n\n        const ele = this.cntEle.children.item(0);\n\n        for (let i = 0; i < this.items.length; i++) {\n          this.getContent(ele, this.items[i].content, 'clone', i);\n          this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));\n\n          while (ele.firstChild) {\n            ele.removeChild(ele.firstChild);\n          }\n        }\n\n        if (this.isReact) {\n          this.clearTemplate(['content']);\n        }\n\n        this.templateEle = [];\n        this.getContent(ele, this.items[0].content, 'render', 0);\n\n        if (this.prevIndex !== this.selectedItem) {\n          ele.classList.remove(CLS_ACTIVE$1);\n        }\n      }\n\n      setStyleAttribute(this.cntEle, {\n        'height': this.maxHeight + 'px'\n      });\n    } else {\n      setStyleAttribute(this.cntEle, {\n        'height': 'auto'\n      });\n    }\n  }\n\n  getHeight(ele) {\n    const cs = window.getComputedStyle(ele);\n    return ele.offsetHeight + parseFloat(cs.getPropertyValue('padding-top')) + parseFloat(cs.getPropertyValue('padding-bottom')) + parseFloat(cs.getPropertyValue('margin-top')) + parseFloat(cs.getPropertyValue('margin-bottom'));\n  }\n\n  setActiveBorder() {\n    const trgHdrEle = this.getTabHeader();\n    const trg = select('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1, trgHdrEle);\n\n    if (isNullOrUndefined(trg)) {\n      return;\n    }\n\n    if (!this.reorderActiveTab) {\n      if (trg.classList.contains(CLS_TB_POPUP) && !this.bdrLine.classList.contains(CLS_HIDDEN$1)) {\n        this.bdrLine.classList.add(CLS_HIDDEN$1);\n      }\n\n      if (trgHdrEle && !trgHdrEle.classList.contains(CLS_REORDER_ACTIVE_ITEM)) {\n        trgHdrEle.classList.add(CLS_REORDER_ACTIVE_ITEM);\n      }\n    } else if (trgHdrEle) {\n      trgHdrEle.classList.remove(CLS_REORDER_ACTIVE_ITEM);\n    }\n\n    const root = closest(trg, '.' + CLS_TAB);\n\n    if (this.element !== root) {\n      return;\n    }\n\n    this.tbItems = select('.' + CLS_TB_ITEMS, trgHdrEle);\n    const bar = select('.' + CLS_INDICATOR, trgHdrEle);\n    const scrollCnt = select('.' + CLS_TB_ITEMS + ' .' + this.scrCntClass, trgHdrEle);\n\n    if (this.isVertical()) {\n      setStyleAttribute(bar, {\n        'left': '',\n        'right': ''\n      });\n      const tbHeight = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;\n\n      if (tbHeight !== 0) {\n        setStyleAttribute(bar, {\n          'top': trg.offsetTop + 'px',\n          'height': trg.offsetHeight + 'px'\n        });\n      } else {\n        setStyleAttribute(bar, {\n          'top': 0,\n          'height': 0\n        });\n      }\n    } else {\n      if (this.overflowMode === 'MultiRow') {\n        let bar = select('.' + CLS_INDICATOR, this.element);\n        setStyleAttribute(bar, {\n          'top': trg.offsetHeight + trg.offsetTop + 'px',\n          'height': ''\n        });\n      } else {\n        setStyleAttribute(bar, {\n          'top': '',\n          'height': ''\n        });\n      }\n\n      let tbWidth = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;\n\n      if (tbWidth !== 0) {\n        setStyleAttribute(bar, {\n          'left': trg.offsetLeft + 'px',\n          'right': tbWidth - (trg.offsetLeft + trg.offsetWidth) + 'px'\n        });\n      } else {\n        setStyleAttribute(bar, {\n          'left': 'auto',\n          'right': 'auto'\n        });\n      }\n    }\n\n    if (!isNullOrUndefined(this.bdrLine) && !trg.classList.contains(CLS_TB_POPUP)) {\n      this.bdrLine.classList.remove(CLS_HIDDEN$1);\n    }\n  }\n\n  setActive(value, skipDataBind = false, isInteracted = false) {\n    this.tbItem = selectAll('.' + CLS_TB_ITEM, this.getTabHeader());\n    const trg = this.tbItem[value];\n\n    if (value < 0 || isNaN(value) || this.tbItem.length === 0) {\n      return;\n    }\n\n    if (value >= 0 && !skipDataBind) {\n      this.allowServerDataBinding = false;\n      this.setProperties({\n        selectedItem: value\n      }, true);\n      this.allowServerDataBinding = true;\n\n      if (!this.initRender) {\n        this.serverDataBind();\n      }\n    }\n\n    if (trg.classList.contains(CLS_ACTIVE$1)) {\n      this.setActiveBorder();\n      return;\n    }\n\n    if (!this.isTemplate) {\n      const prev = this.tbItem[this.prevIndex];\n\n      if (!isNullOrUndefined(prev)) {\n        prev.removeAttribute('aria-controls');\n      }\n\n      attributes(trg, {\n        'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + value\n      });\n    }\n\n    const id = trg.id;\n    this.removeActiveClass();\n    trg.classList.add(CLS_ACTIVE$1);\n    this.tbItem[this.prevIndex].setAttribute('aria-selected', 'false');\n    trg.setAttribute('aria-selected', 'true');\n    const no = Number(this.extIndex(id));\n\n    if (isNullOrUndefined(this.prevActiveEle)) {\n      this.prevActiveEle = CLS_CONTENT$1 + this.tabId + '_' + no;\n    }\n\n    attributes(this.element, {\n      'aria-activedescendant': id\n    });\n\n    if (this.isTemplate) {\n      if (select('.' + CLS_CONTENT$1, this.element).children.length > 0) {\n        const trg = this.findEle(select('.' + CLS_CONTENT$1, this.element).children, CLS_CONTENT$1 + this.tabId + '_' + no);\n\n        if (!isNullOrUndefined(trg)) {\n          trg.classList.add(CLS_ACTIVE$1);\n        }\n\n        this.triggerAnimation(id, this.enableAnimation);\n      }\n    } else {\n      this.cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n      const item = this.getTrgContent(this.cntEle, this.extIndex(id));\n\n      if (isNullOrUndefined(item)) {\n        this.cntEle.appendChild(this.createElement('div', {\n          id: CLS_CONTENT$1 + this.tabId + '_' + this.extIndex(id),\n          className: CLS_ITEM$2 + ' ' + CLS_ACTIVE$1,\n          attrs: {\n            role: 'tabpanel',\n            'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + this.extIndex(id)\n          }\n        }));\n        const eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));\n        const itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);\n        this.getContent(eleTrg, this.items[itemIndex].content, 'render', itemIndex);\n      } else {\n        item.classList.add(CLS_ACTIVE$1);\n      }\n\n      this.triggerAnimation(id, this.enableAnimation);\n    }\n\n    this.setActiveBorder();\n    this.refreshItemVisibility(trg);\n\n    if (!this.initRender && !skipDataBind) {\n      trg.firstElementChild.focus();\n      const eventArg = {\n        previousItem: this.prevItem,\n        previousIndex: this.prevIndex,\n        selectedItem: trg,\n        selectedIndex: value,\n        selectedContent: select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectingID, this.content),\n        isSwiped: this.isSwipeed,\n        isInteracted: isInteracted\n      };\n      this.trigger('selected', eventArg);\n    }\n  }\n\n  setItems(items) {\n    this.isReplace = true;\n    this.tbItems = select('.' + CLS_TB_ITEMS, this.getTabHeader());\n    this.tbObj.items = this.parseObject(items, 0);\n    this.tbObj.dataBind();\n    this.isReplace = false;\n  }\n\n  setRTL(value) {\n    this.tbObj.enableRtl = value;\n    this.tbObj.dataBind();\n    this.setCssClass(this.element, CLS_RTL$4, value);\n    this.refreshActiveBorder();\n  }\n\n  refreshActiveBorder() {\n    if (!isNullOrUndefined(this.bdrLine)) {\n      this.bdrLine.classList.add(CLS_HIDDEN$1);\n    }\n\n    this.setActiveBorder();\n  }\n\n  showPopup(config) {\n    const tbPop = select('.e-popup.e-toolbar-pop', this.hdrEle);\n\n    if (tbPop.classList.contains('e-popup-close')) {\n      const tbPopObj = tbPop && tbPop.ej2_instances[0];\n      tbPopObj.position.X = this.headerPlacement === 'Left' ? 'left' : 'right';\n      tbPopObj.dataBind();\n      tbPopObj.show(config);\n    }\n  }\n\n  bindDraggable() {\n    if (this.allowDragAndDrop) {\n      const tabHeader = this.element.querySelector('.' + CLS_HEADER$1);\n\n      if (tabHeader) {\n        const items = tabHeader.querySelectorAll('.' + CLS_TB_ITEM);\n        items.forEach(element => {\n          this.initializeDrag(element);\n        });\n      }\n    }\n  }\n\n  wireEvents() {\n    this.bindDraggable();\n    window.addEventListener('resize', this.resizeContext);\n    EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);\n    EventHandler.add(this.element, 'keydown', this.spaceKeyDown, this);\n\n    if (!isNullOrUndefined(this.cntEle)) {\n      this.touchModule = new Touch(this.cntEle, {\n        swipe: this.swipeHandler.bind(this)\n      });\n    }\n\n    this.keyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyHandler.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n    this.tabKeyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyHandler.bind(this),\n      keyConfigs: {\n        openPopup: 'shift+f10',\n        tab: 'tab',\n        shiftTab: 'shift+tab'\n      },\n      eventName: 'keydown'\n    });\n  }\n\n  unWireEvents() {\n    if (!isNullOrUndefined(this.keyModule)) {\n      this.keyModule.destroy();\n    }\n\n    if (!isNullOrUndefined(this.tabKeyModule)) {\n      this.tabKeyModule.destroy();\n    }\n\n    if (!isNullOrUndefined(this.cntEle) && !isNullOrUndefined(this.touchModule)) {\n      this.touchModule.destroy();\n      this.touchModule = null;\n    }\n\n    window.removeEventListener('resize', this.resizeContext);\n    EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n    EventHandler.remove(this.element, 'keydown', this.spaceKeyDown);\n    this.element.classList.remove(CLS_RTL$4);\n    this.element.classList.remove(CLS_FOCUS);\n  }\n\n  clickHandler(args) {\n    this.element.classList.remove(CLS_FOCUS);\n    const trg = args.originalEvent.target;\n    const trgParent = closest(trg, '.' + CLS_TB_ITEM);\n    const trgIndex = this.getEleIndex(trgParent);\n\n    if (trg.classList.contains(CLS_ICON_CLOSE)) {\n      this.removeTab(trgIndex);\n    } else if (this.isVertical() && closest(trg, '.' + CLS_HOR_NAV)) {\n      this.showPopup(this.show);\n    } else {\n      this.isPopup = false;\n\n      if (!isNullOrUndefined(trgParent) && (trgIndex !== this.selectedItem || trgIndex !== this.prevIndex)) {\n        this.selectTab(trgIndex, args.originalEvent, true);\n      }\n    }\n  }\n\n  swipeHandler(e) {\n    if (e.velocity < 3 && isNullOrUndefined(e.originalEvent.changedTouches)) {\n      return;\n    }\n\n    if (this.isNested) {\n      this.element.setAttribute('data-swipe', 'true');\n    }\n\n    const nestedTab = this.element.querySelector('[data-swipe=\"true\"]');\n\n    if (nestedTab) {\n      nestedTab.removeAttribute('data-swipe');\n      return;\n    }\n\n    this.isSwipeed = true;\n\n    if (e.swipeDirection === 'Right' && this.selectedItem !== 0) {\n      for (let k = this.selectedItem - 1; k >= 0; k--) {\n        if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n          this.selectTab(k, null, true);\n          break;\n        }\n      }\n    } else if (e.swipeDirection === 'Left' && this.selectedItem !== selectAll('.' + CLS_TB_ITEM, this.element).length - 1) {\n      for (let i = this.selectedItem + 1; i < this.tbItem.length; i++) {\n        if (!this.tbItem[i].classList.contains(CLS_HIDDEN$1)) {\n          this.selectTab(i, null, true);\n          break;\n        }\n      }\n    }\n\n    this.isSwipeed = false;\n  }\n\n  spaceKeyDown(e) {\n    if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {\n      const clstHead = closest(e.target, '.' + CLS_HEADER$1);\n\n      if (!isNullOrUndefined(clstHead)) {\n        e.preventDefault();\n      }\n    }\n  }\n\n  keyHandler(e) {\n    if (this.element.classList.contains(CLS_DISABLE$4)) {\n      return;\n    }\n\n    this.element.classList.add(CLS_FOCUS);\n    const trg = e.target;\n    const tabHeader = this.getTabHeader();\n    const actEle = select('.' + CLS_ACTIVE$1, tabHeader);\n    this.popEle = select('.' + CLS_TB_POP, tabHeader);\n\n    if (!isNullOrUndefined(this.popEle)) {\n      this.popObj = this.popEle.ej2_instances[0];\n    }\n\n    const item = closest(document.activeElement, '.' + CLS_TB_ITEM);\n    const trgParent = closest(trg, '.' + CLS_TB_ITEM);\n\n    switch (e.action) {\n      case 'space':\n      case 'enter':\n        if (trg.parentElement.classList.contains(CLS_DISABLE$4)) {\n          return;\n        }\n\n        if (e.action === 'enter' && trg.classList.contains('e-hor-nav')) {\n          this.showPopup(this.show);\n          break;\n        }\n\n        this.keyPressed(trg);\n        break;\n\n      case 'tab':\n      case 'shiftTab':\n        if (trg.classList.contains(CLS_WRAP) && closest(trg, '.' + CLS_TB_ITEM).classList.contains(CLS_ACTIVE$1) === false) {\n          trg.setAttribute('tabindex', '-1');\n        }\n\n        if (this.popObj && isVisible(this.popObj.element)) {\n          this.popObj.hide(this.hide);\n        }\n\n        actEle.children.item(0).setAttribute('tabindex', '0');\n        break;\n\n      case 'moveLeft':\n      case 'moveRight':\n        if (!isNullOrUndefined(item)) {\n          this.refreshItemVisibility(item);\n        }\n\n        break;\n\n      case 'openPopup':\n        e.preventDefault();\n\n        if (!isNullOrUndefined(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {\n          this.popObj.show(this.show);\n        }\n\n        break;\n\n      case 'delete':\n        if (this.showCloseButton === true && !isNullOrUndefined(trgParent)) {\n          const nxtSib = trgParent.nextSibling;\n\n          if (!isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {\n            nxtSib.firstElementChild.focus();\n          }\n\n          this.removeTab(this.getEleIndex(trgParent));\n        }\n\n        this.setActiveBorder();\n        break;\n    }\n  }\n  /**\n   * Refresh the active tab border\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  refreshActiveTabBorder() {\n    const activeEle = select('.' + CLS_TB_ITEM + '.' + CLS_TB_POPUP + '.' + CLS_ACTIVE$1, this.element);\n\n    if (!isNullOrUndefined(activeEle) && this.reorderActiveTab) {\n      this.select(this.getEleIndex(activeEle));\n    }\n\n    this.refreshActiveBorder();\n  }\n\n  refreshItemVisibility(target) {\n    const scrCnt = select('.' + this.scrCntClass, this.tbItems);\n\n    if (!this.isVertical() && !isNullOrUndefined(scrCnt)) {\n      const scrBar = select('.e-hscroll-bar', this.tbItems);\n      const scrStart = scrBar.scrollLeft;\n      const scrEnd = scrStart + scrBar.offsetWidth;\n      const eleStart = target.offsetLeft;\n      const eleWidth = target.offsetWidth;\n      const eleEnd = target.offsetLeft + target.offsetWidth;\n\n      if (scrStart < eleStart && scrEnd < eleEnd) {\n        const eleViewRange = scrEnd - eleStart;\n        scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);\n      } else {\n        if (scrStart > eleStart && scrEnd > eleEnd) {\n          const eleViewRange = eleEnd - scrStart;\n          scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);\n        }\n      }\n    } else {\n      return;\n    }\n  }\n\n  hoverHandler(e) {\n    const trg = e.target;\n\n    if (!isNullOrUndefined(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {\n      trg.setAttribute('title', new L10n('tab', {\n        closeButtonTitle: this.title\n      }, this.locale).getConstant('closeButtonTitle'));\n    }\n  }\n\n  evalOnPropertyChangeItems(newProp, oldProp) {\n    if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n      const changedProp = Object.keys(newProp.items);\n\n      for (let i = 0; i < changedProp.length; i++) {\n        const index = parseInt(Object.keys(newProp.items)[i], 10);\n        const properties = Object.keys(newProp.items[index]);\n\n        for (let j = 0; j < properties.length; j++) {\n          const oldVal = Object(oldProp.items[index])[properties[j]];\n          const newVal = Object(newProp.items[index])[properties[j]];\n          const hdr = this.element.querySelectorAll('.' + CLS_TB_ITEM)[index];\n          let itemIndex;\n\n          if (hdr && !isNullOrUndefined(hdr.id) && hdr.id !== '') {\n            const num = hdr.id.lastIndexOf('_');\n            itemIndex = parseInt(hdr.id.substring(num + 1), 10);\n          } else {\n            itemIndex = index;\n          }\n\n          const hdrItem = select('.' + CLS_TB_ITEMS + ' #' + CLS_ITEM$2 + this.tabId + '_' + itemIndex, this.element);\n          const cntItem = select('.' + CLS_CONTENT$1 + ' #' + CLS_CONTENT$1 + this.tabId + '_' + itemIndex, this.element);\n\n          if (properties[j] === 'header' || properties[j] === 'headerTemplate') {\n            const icon = isNullOrUndefined(this.items[index].header) || isNullOrUndefined(this.items[index].header.iconCss) ? '' : this.items[index].header.iconCss;\n            const textVal = this.items[index].headerTemplate || this.items[index].header.text;\n\n            if (textVal === '' && icon === '') {\n              this.removeTab(index);\n            } else {\n              this.tbId = hdr.id;\n              const arr = [];\n              arr.push(this.items[index]);\n              this.items.splice(index, 1);\n              this.itemIndexArray.splice(index, 1);\n              this.tbObj.items.splice(index, 1);\n              const isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN$1);\n              detach(hdrItem);\n              this.isReplace = true;\n              this.addTab(arr, index);\n\n              if (isHiddenEle) {\n                this.hideTab(index);\n              }\n\n              this.isReplace = false;\n            }\n          }\n\n          if (properties[j] === 'content' && !isNullOrUndefined(cntItem)) {\n            const strVal = typeof newVal === 'string' || isNullOrUndefined(newVal.innerHTML);\n\n            if (strVal && (newVal[0] === '.' || newVal[0] === '#') && newVal.length) {\n              const eleVal = document.querySelector(newVal);\n              cntItem.appendChild(eleVal);\n              eleVal.style.display = '';\n            } else if (newVal === '' && oldVal[0] === '#') {\n              document.body.appendChild(this.element.querySelector(oldVal)).style.display = 'none';\n              cntItem.innerHTML = newVal;\n            } else if (this.isReact) {\n              cntItem.innerHTML = '';\n              this.templateCompile(cntItem, newVal, index);\n            } else if (typeof newVal !== 'function') {\n              cntItem.innerHTML = newVal;\n            }\n          }\n\n          if (properties[j] === 'cssClass') {\n            if (!isNullOrUndefined(hdrItem)) {\n              hdrItem.classList.remove(oldVal);\n              hdrItem.classList.add(newVal);\n            }\n\n            if (!isNullOrUndefined(cntItem)) {\n              cntItem.classList.remove(oldVal);\n              cntItem.classList.add(newVal);\n            }\n          }\n\n          if (properties[j] === 'disabled') {\n            this.enableTab(index, newVal === true ? false : true);\n          }\n\n          if (properties[j] === 'visible') {\n            this.hideTab(index, newVal === true ? false : true);\n          }\n        }\n      }\n    } else {\n      this.lastIndex = 0;\n\n      if (isNullOrUndefined(this.tbObj)) {\n        this.reRenderItems();\n      } else {\n        if (this.isReact || this.isAngular) {\n          this.clearTemplate();\n        }\n\n        this.setItems(newProp.items);\n\n        if (this.templateEle.length > 0) {\n          this.expTemplateContent();\n        }\n\n        this.templateEle = [];\n        const selectElement = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n\n        while (selectElement.firstElementChild) {\n          detach(selectElement.firstElementChild);\n        }\n\n        this.select(this.selectedItem);\n        this.draggableItems = [];\n        this.bindDraggable();\n      }\n    }\n  }\n\n  initializeDrag(target) {\n    let dragObj = new Draggable(target, {\n      dragArea: this.dragArea,\n      dragTarget: '.' + CLS_TB_ITEM,\n      clone: true,\n      helper: this.helper.bind(this),\n      dragStart: this.itemDragStart.bind(this),\n      drag: e => {\n        let dragIndex = this.getEleIndex(this.dragItem);\n        let dropIndex;\n        let dropItem;\n        let dragArgs = {\n          draggedItem: this.dragItem,\n          event: e.event,\n          target: e.target,\n          droppedItem: e.target.closest('.' + CLS_TB_ITEM),\n          clonedElement: this.cloneElement,\n          index: dragIndex\n        };\n\n        if (!isNullOrUndefined(e.target.closest('.' + CLS_TAB)) && !e.target.closest('.' + CLS_TAB).isEqualNode(this.element) && this.dragArea !== '.' + CLS_HEADER$1) {\n          this.trigger('dragging', dragArgs);\n        } else {\n          if (!e.target.closest(this.dragArea) && this.overflowMode !== 'Popup') {\n            document.body.style.cursor = 'not-allowed';\n            addClass([this.cloneElement], CLS_HIDDEN$1);\n\n            if (this.dragItem.classList.contains(CLS_HIDDEN$1)) {\n              removeClass([this.dragItem], CLS_HIDDEN$1);\n            }\n\n            this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'visible';\n          } else {\n            document.body.style.cursor = '';\n            this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'hidden';\n\n            if (this.cloneElement.classList.contains(CLS_HIDDEN$1)) {\n              removeClass([this.cloneElement], CLS_HIDDEN$1);\n            }\n          }\n\n          if (this.overflowMode === 'Scrollable' && !isNullOrUndefined(this.element.querySelector('.e-hscroll'))) {\n            let scrollRightNavEle = this.element.querySelector('.e-scroll-right-nav');\n            let scrollLeftNavEle = this.element.querySelector('.e-scroll-left-nav');\n            let hscrollBar = this.element.querySelector('.e-hscroll-bar');\n\n            if (!isNullOrUndefined(scrollRightNavEle) && Math.abs(scrollRightNavEle.offsetWidth / 2 + scrollRightNavEle.offsetLeft) > this.cloneElement.offsetLeft + this.cloneElement.offsetWidth) {\n              hscrollBar.scrollLeft -= 10;\n            }\n\n            if (!isNullOrUndefined(scrollLeftNavEle) && Math.abs(scrollLeftNavEle.offsetLeft + scrollLeftNavEle.offsetWidth - this.cloneElement.offsetLeft) > scrollLeftNavEle.offsetWidth / 2) {\n              hscrollBar.scrollLeft += 10;\n            }\n          }\n\n          this.cloneElement.style.pointerEvents = 'none';\n          dropItem = closest(e.target, '.' + CLS_TB_ITEM + '.e-draggable');\n          let scrollContentWidth = 0;\n\n          if (this.overflowMode === 'Scrollable' && !isNullOrUndefined(this.element.querySelector('.e-hscroll'))) {\n            scrollContentWidth = this.element.querySelector('.e-hscroll-content').offsetWidth;\n          }\n\n          if (dropItem != null && !dropItem.isSameNode(this.dragItem) && dropItem.closest('.' + CLS_TAB).isSameNode(this.dragItem.closest('.' + CLS_TAB))) {\n            dropIndex = this.getEleIndex(dropItem);\n\n            if (dropIndex < dragIndex && Math.abs(dropItem.offsetLeft + dropItem.offsetWidth - this.cloneElement.offsetLeft) > dropItem.offsetWidth / 2) {\n              this.dragAction(dropItem, dragIndex, dropIndex);\n            }\n\n            if (dropIndex > dragIndex && Math.abs(dropItem.offsetWidth / 2) + dropItem.offsetLeft - scrollContentWidth < this.cloneElement.offsetLeft + this.cloneElement.offsetWidth) {\n              this.dragAction(dropItem, dragIndex, dropIndex);\n            }\n          }\n\n          this.droppedIndex = this.getEleIndex(this.dragItem);\n          this.trigger('dragging', dragArgs);\n        }\n      },\n      dragStop: this.itemDragStop.bind(this)\n    });\n    this.draggableItems.push(dragObj);\n  }\n\n  helper(e) {\n    this.cloneElement = this.createElement('div');\n\n    if (e.element) {\n      this.cloneElement = e.element.cloneNode(true);\n      addClass([this.cloneElement], 'e-tab-clone-element');\n\n      if (this.element.querySelector('.' + CLS_HEADER$1).classList.contains(CLS_CLOSE_SHOW)) {\n        addClass([this.cloneElement], CLS_CLOSE_SHOW);\n      }\n\n      removeClass([this.cloneElement.querySelector('.' + CLS_WRAP)], 'e-ripple');\n\n      if (!isNullOrUndefined(this.cloneElement.querySelector('.e-ripple-element'))) {\n        remove(this.cloneElement.querySelector('.e-ripple-element'));\n      }\n\n      document.body.appendChild(this.cloneElement);\n    }\n\n    return this.cloneElement;\n  }\n\n  itemDragStart(e) {\n    this.draggingItems = this.items.map(x => x);\n    this.dragItem = e.element;\n    let dragArgs = {\n      draggedItem: e.element,\n      event: e.event,\n      target: e.target,\n      droppedItem: null,\n      index: this.getEleIndex(this.dragItem),\n      clonedElement: this.cloneElement,\n      cancel: false\n    };\n    this.trigger('onDragStart', dragArgs, tabitemDragArgs => {\n      if (tabitemDragArgs.cancel) {\n        detach(this.cloneElement);\n      } else {\n        this.removeActiveClass();\n        addClass([this.tbItems.querySelector('.' + CLS_INDICATOR)], CLS_HIDDEN$1);\n        this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'hidden';\n      }\n    });\n  }\n\n  dragAction(dropItem, dragsIndex, dropIndex) {\n    if (this.items.length > 0) {\n      let item = this.draggingItems[dragsIndex];\n      this.draggingItems.splice(dragsIndex, 1);\n      this.draggingItems.splice(dropIndex, 0, item);\n    }\n\n    if (this.overflowMode === 'MultiRow') {\n      dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);\n    }\n\n    if (dragsIndex > dropIndex) {\n      if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {\n        if (this.overflowMode === 'Extended') {\n          if (dropItem.isSameNode(dropItem.parentElement.lastChild)) {\n            let popupContainer = this.dragItem.parentNode;\n            dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n            popupContainer.insertBefore(dropItem.parentElement.lastChild, popupContainer.childNodes[0]);\n          } else {\n            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);\n            dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n          }\n        } else {\n          let lastEle = dropItem.parentElement.lastChild;\n\n          if (dropItem.isSameNode(lastEle)) {\n            let popupContainer = this.dragItem.parentNode;\n            dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n            popupContainer.insertBefore(lastEle, popupContainer.childNodes[0]);\n          } else {\n            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);\n            dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n          }\n        }\n      } else {\n        this.dragItem.parentNode.insertBefore(this.dragItem, dropItem);\n      }\n    }\n\n    if (dragsIndex < dropIndex) {\n      if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {\n        if (this.overflowMode === 'Extended') {\n          this.dragItem.parentElement.appendChild(dropItem.parentElement.firstElementChild);\n          dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextSibling);\n        } else {\n          this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);\n          dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n        }\n      } else {\n        this.dragItem.parentNode.insertBefore(dropItem, this.dragItem);\n      }\n    }\n  }\n\n  itemDragStop(e) {\n    detach(this.cloneElement);\n    this.cloneElement = null;\n    this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'visible';\n    document.body.style.cursor = '';\n    let dragStopArgs = {\n      draggedItem: this.dragItem,\n      event: e.event,\n      target: e.target,\n      droppedItem: this.tbItem[this.droppedIndex],\n      clonedElement: null,\n      index: this.droppedIndex,\n      cancel: false\n    };\n    this.trigger('dragged', dragStopArgs, tabItemDropArgs => {\n      if (tabItemDropArgs.cancel) {\n        this.refresh();\n      } else {\n        if (this.items.length > 0 && this.draggingItems.length > 0) {\n          this.items = this.draggingItems;\n          this.selectedItem = this.droppedIndex;\n          this.refresh();\n        } else {\n          this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = '';\n          removeClass([this.tbItems.querySelector('.' + CLS_INDICATOR)], CLS_HIDDEN$1);\n          this.selectTab(this.droppedIndex, null, true);\n        }\n      }\n    });\n    this.dragItem = null;\n  }\n  /**\n   * Enables or disables the specified Tab item. On passing value as `false`, the item will be disabled.\n   *\n   * @param {number} index - Index value of target Tab item.\n   * @param {boolean} value - Boolean value that determines whether the command should be enabled or disabled.\n   * By default, isEnable is true.\n   * @returns {void}.\n   */\n\n\n  enableTab(index, value) {\n    const tbItems = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n\n    if (isNullOrUndefined(tbItems)) {\n      return;\n    }\n\n    if (value === true) {\n      tbItems.classList.remove(CLS_DISABLE$4, CLS_OVERLAY$2);\n      tbItems.firstElementChild.setAttribute('tabindex', '-1');\n    } else {\n      tbItems.classList.add(CLS_DISABLE$4, CLS_OVERLAY$2);\n      tbItems.firstElementChild.removeAttribute('tabindex');\n\n      if (tbItems.classList.contains(CLS_ACTIVE$1)) {\n        this.select(index + 1);\n      }\n    }\n\n    if (!isNullOrUndefined(this.items[index])) {\n      this.items[index].disabled = !value;\n      this.dataBind();\n    }\n\n    tbItems.setAttribute('aria-disabled', value === true ? 'false' : 'true');\n  }\n  /**\n   * Adds new items to the Tab that accepts an array as Tab items.\n   *\n   * @param {TabItemModel[]} items - An array of item that is added to the Tab.\n   * @param {number} index - Number value that determines where the items to be added. By default, index is 0.\n   * @returns {void}.\n   */\n\n\n  addTab(items, index) {\n    const addArgs = {\n      addedItems: items,\n      cancel: false\n    };\n\n    if (!this.isReplace) {\n      this.trigger('adding', addArgs, tabAddingArgs => {\n        if (!tabAddingArgs.cancel) {\n          this.addingTabContent(items, index);\n        }\n      });\n    } else {\n      this.addingTabContent(items, index);\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n  addingTabContent(items, index) {\n    let lastEleIndex = 0;\n    this.hdrEle = select('.' + CLS_HEADER$1, this.element);\n\n    if (isNullOrUndefined(this.hdrEle)) {\n      this.items = items;\n      this.reRenderItems();\n      this.bindDraggable();\n    } else {\n      const itemsCount = selectAll('.e-tab-header .' + CLS_TB_ITEM, this.element).length;\n\n      if (itemsCount !== 0) {\n        lastEleIndex = this.lastIndex + 1;\n      }\n\n      if (isNullOrUndefined(index)) {\n        index = itemsCount - 1;\n      }\n\n      if (itemsCount < index || index < 0 || isNaN(index)) {\n        return;\n      }\n\n      if (itemsCount === 0 && !isNullOrUndefined(this.hdrEle)) {\n        this.hdrEle.style.display = '';\n      }\n\n      if (!isNullOrUndefined(this.bdrLine)) {\n        this.bdrLine.classList.add(CLS_HIDDEN$1);\n      }\n\n      this.tbItems = select('.' + CLS_TB_ITEMS, this.getTabHeader());\n      this.isAdd = true;\n      const tabItems = this.parseObject(items, index);\n      this.isAdd = false;\n      let i = 0;\n      let textValue;\n      items.forEach((item, place) => {\n        textValue = item.headerTemplate || item.header.text;\n\n        if (!(isNullOrUndefined(item.headerTemplate || item.header) || isNullOrUndefined(textValue) || textValue.length === 0 && !isNullOrUndefined(item.header) && isNullOrUndefined(item.header.iconCss))) {\n          if (tabItems[place]) {\n            if (isNullOrUndefined(item.id)) {\n              item.id = TABITEMPREFIX + (lastEleIndex + place).toString();\n            }\n\n            tabItems[place].htmlAttributes['data-id'] = item.id;\n          }\n\n          this.items.splice(index + i, 0, item);\n          i++;\n        }\n\n        if (this.isTemplate && !isNullOrUndefined(item.header) && !isNullOrUndefined(item.header.text)) {\n          const no = lastEleIndex + place;\n          const ele = this.createElement('div', {\n            id: CLS_CONTENT$1 + this.tabId + '_' + no,\n            className: CLS_ITEM$2,\n            attrs: {\n              role: 'tabpanel',\n              'aria-labelledby': CLS_ITEM$2 + '_' + no\n            }\n          });\n          this.cntEle.insertBefore(ele, this.cntEle.children[index + place]);\n          const eleTrg = this.getTrgContent(this.cntEle, no.toString());\n          this.getContent(eleTrg, item.content, 'render', index);\n        }\n      });\n      this.tbObj.addItems(tabItems, index);\n\n      if (!this.isReplace) {\n        this.trigger('added', {\n          addedItems: items\n        });\n      }\n\n      if (this.selectedItem === index) {\n        this.select(index);\n      } else {\n        this.setActiveBorder();\n        this.tbItem = selectAll('.' + CLS_TB_ITEM, this.getTabHeader());\n      }\n\n      this.bindDraggable();\n    }\n  }\n  /**\n   * Removes the items in the Tab from the specified index.\n   *\n   * @param {number} index - Index of target item that is going to be removed.\n   * @returns {void}.\n   */\n\n\n  removeTab(index) {\n    const trg = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n\n    if (isNullOrUndefined(trg)) {\n      return;\n    }\n\n    const removeArgs = {\n      removedItem: trg,\n      removedIndex: index,\n      cancel: false\n    };\n    this.trigger('removing', removeArgs, tabRemovingArgs => {\n      if (!tabRemovingArgs.cancel) {\n        this.tbObj.removeItems(index);\n\n        if (this.allowDragAndDrop && index !== Array.prototype.indexOf.call(this.itemIndexArray, trg.id)) {\n          index = Array.prototype.indexOf.call(this.itemIndexArray, trg.id);\n        }\n\n        this.items.splice(index, 1);\n        this.itemIndexArray.splice(index, 1);\n        this.refreshActiveBorder();\n        const cntTrg = select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.extIndex(trg.id), select('.' + CLS_CONTENT$1, this.element));\n\n        if (!isNullOrUndefined(cntTrg)) {\n          detach(cntTrg);\n        }\n\n        this.trigger('removed', tabRemovingArgs);\n\n        if (this.draggableItems && this.draggableItems.length > 0) {\n          this.draggableItems[index].destroy();\n          this.draggableItems[index] = null;\n          this.draggableItems.splice(index, 1);\n        }\n\n        if (trg.classList.contains(CLS_ACTIVE$1)) {\n          index = index > selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_TB_POPUP + ')', this.element).length - 1 ? index - 1 : index;\n          this.enableAnimation = false;\n          this.selectedItem = index;\n          this.select(index);\n        } else if (index !== this.selectedItem) {\n          if (index < this.selectedItem) {\n            index = this.itemIndexArray.indexOf(this.tbItem[this.selectedItem].id);\n            this.setProperties({\n              selectedItem: index > -1 ? index : this.selectedItem\n            }, true);\n            this.prevIndex = this.selectedItem;\n          }\n\n          this.tbItem = selectAll('.' + CLS_TB_ITEM, this.getTabHeader());\n        }\n\n        if (selectAll('.' + CLS_TB_ITEM, this.element).length === 0) {\n          this.hdrEle.style.display = 'none';\n        }\n\n        this.enableAnimation = true;\n      }\n    });\n  }\n  /**\n   * Shows or hides the Tab that is in the specified index.\n   *\n   * @param {number} index - Index value of target item.\n   * @param {boolean} value - Based on this Boolean value, item will be hide (false) or show (true). By default, value is true.\n   * @returns {void}.\n   */\n\n\n  hideTab(index, value) {\n    let items;\n    const item = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n\n    if (isNullOrUndefined(item)) {\n      return;\n    }\n\n    if (isNullOrUndefined(value)) {\n      value = true;\n    }\n\n    this.bdrLine.classList.add(CLS_HIDDEN$1);\n\n    if (value === true) {\n      item.classList.add(CLS_HIDDEN$1);\n      items = selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN$1 + ')', this.tbItems);\n\n      if (items.length !== 0 && item.classList.contains(CLS_ACTIVE$1)) {\n        if (index !== 0) {\n          for (let i = index - 1; i >= 0; i--) {\n            if (!this.tbItem[i].classList.contains(CLS_HIDDEN$1)) {\n              this.select(i);\n              break;\n            } else if (i === 0) {\n              for (let k = index + 1; k < this.tbItem.length; k++) {\n                if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n                  this.select(k);\n                  break;\n                }\n              }\n            }\n          }\n        } else {\n          for (let k = index + 1; k < this.tbItem.length; k++) {\n            if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n              this.select(k);\n              break;\n            }\n          }\n        }\n      } else if (items.length === 0) {\n        this.element.classList.add(CLS_HIDDEN$1);\n      }\n    } else {\n      this.element.classList.remove(CLS_HIDDEN$1);\n      items = selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN$1 + ')', this.tbItems);\n      item.classList.remove(CLS_HIDDEN$1);\n\n      if (items.length === 0) {\n        this.select(index);\n      }\n    }\n\n    this.setActiveBorder();\n    item.setAttribute('aria-hidden', '' + value);\n\n    if (this.overflowMode === 'Popup' && this.tbObj) {\n      this.tbObj.refreshOverflow();\n    }\n  }\n\n  selectTab(args, event = null, isInteracted = false) {\n    this.isInteracted = isInteracted;\n    this.select(args, event);\n  }\n  /**\n   * Specifies the index or HTMLElement to select an item from the Tab.\n   *\n   * @param {number | HTMLElement} args - Index or DOM element is used for selecting an item from the Tab.\n   * @param {Event} event - An event which takes place in DOM.\n   * @returns {void}\n   */\n\n\n  select(args, event) {\n    const tabHeader = this.getTabHeader();\n    this.tbItems = select('.' + CLS_TB_ITEMS, tabHeader);\n    this.tbItem = selectAll('.' + CLS_TB_ITEM, tabHeader);\n    this.content = select('.' + CLS_CONTENT$1, this.element);\n    this.prevItem = this.tbItem[this.prevIndex];\n\n    if (isNullOrUndefined(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {\n      this.selectedItem = 0;\n    } else {\n      this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);\n    }\n\n    const trg = this.tbItem[args];\n\n    if (isNullOrUndefined(trg)) {\n      this.selectedID = '0';\n    } else {\n      this.selectingID = this.extIndex(trg.id);\n    }\n\n    if (!isNullOrUndefined(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE$4)) {\n      this.prevItem.children.item(0).setAttribute('tabindex', '-1');\n    }\n\n    const eventArg = {\n      event: event,\n      previousItem: this.prevItem,\n      previousIndex: this.prevIndex,\n      selectedItem: this.tbItem[this.selectedItem],\n      selectedIndex: this.selectedItem,\n      selectedContent: !isNullOrUndefined(this.content) ? select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectedID, this.content) : null,\n      selectingItem: trg,\n      selectingIndex: args,\n      selectingContent: !isNullOrUndefined(this.content) ? select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectingID, this.content) : null,\n      isSwiped: this.isSwipeed,\n      isInteracted: this.isInteracted,\n      cancel: false\n    };\n\n    if (!this.initRender) {\n      this.trigger('selecting', eventArg, selectArgs => {\n        if (!selectArgs.cancel) {\n          this.selectingContent(args, this.isInteracted);\n        }\n      });\n    } else {\n      this.selectingContent(args, this.isInteracted);\n    }\n\n    this.isInteracted = false;\n  }\n\n  selectingContent(args, isInteracted) {\n    if (typeof args === 'number') {\n      if (!isNullOrUndefined(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE$4) || this.tbItem[args].classList.contains(CLS_HIDDEN$1))) {\n        for (let i = args + 1; i < this.items.length; i++) {\n          if (this.items[i].disabled === false && this.items[i].visible === true) {\n            args = i;\n            break;\n          } else {\n            args = 0;\n          }\n        }\n      }\n\n      if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {\n        this.prevIndex = this.selectedItem;\n        this.prevItem = this.tbItem[this.prevIndex];\n\n        if (this.tbItem[args].classList.contains(CLS_TB_POPUP) && this.reorderActiveTab) {\n          this.setActive(this.popupHandler(this.tbItem[args]), null, isInteracted);\n\n          if (!isNullOrUndefined(this.items) && this.items.length > 0 && this.allowDragAndDrop) {\n            this.tbItem = selectAll('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);\n            let item = this.items[args];\n            this.items.splice(args, 1);\n            this.items.splice(this.tbItem.length - 1, 0, item);\n            let itemId = this.itemIndexArray[args];\n            this.itemIndexArray.splice(args, 1);\n            this.itemIndexArray.splice(this.tbItem.length - 1, 0, itemId);\n          }\n        } else {\n          this.setActive(args, null, isInteracted);\n        }\n      } else {\n        this.setActive(0, null, isInteracted);\n      }\n    } else if (args instanceof HTMLElement) {\n      this.setActive(this.getEleIndex(args), null, isInteracted);\n    }\n  }\n  /**\n   * Gets the item index from the Tab.\n   *\n   * @param  {string} tabItemId - Item ID is used for getting index from the Tab.\n   * @returns {number} - It returns item index.\n   */\n\n\n  getItemIndex(tabItemId) {\n    let tabIndex;\n\n    for (let i = 0; i < this.tbItem.length; i++) {\n      const value = this.tbItem[i].getAttribute('data-id');\n\n      if (tabItemId === value) {\n        tabIndex = i;\n        break;\n      }\n    }\n\n    return tabIndex;\n  }\n  /**\n   * Specifies the value to disable/enable the Tab component.\n   * When set to `true`, the component will be disabled.\n   *\n   * @param  {boolean} value - Based on this Boolean value, Tab will be enabled (false) or disabled (true).\n   * @returns {void}.\n   */\n\n\n  disable(value) {\n    this.setCssClass(this.element, CLS_DISABLE$4, value);\n    this.element.setAttribute('aria-disabled', '' + value);\n  }\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - It returns the persisted state.\n   */\n\n\n  getPersistData() {\n    return this.addOnPersist(['selectedItem', 'actEleId']);\n  }\n  /**\n   * Returns the current module name.\n   *\n   * @returns {string} - It returns the current module name.\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'tab';\n  }\n  /**\n   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n   *\n   * @param  {TabModel} newProp - It contains the new value of data.\n   * @param  {TabModel} oldProp - It contains the old value of data.\n   * @returns {void}\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'width':\n          setStyleAttribute(this.element, {\n            width: formatUnit(newProp.width)\n          });\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            height: formatUnit(newProp.height)\n          });\n          this.setContentHeight(false);\n          break;\n\n        case 'cssClass':\n          const headerEle = this.element.querySelector('.' + CLS_HEADER$1);\n\n          if (oldProp.cssClass !== '' && !isNullOrUndefined(oldProp.cssClass)) {\n            this.setCssClass(this.element, oldProp.cssClass, false);\n            this.setCssClass(this.element, newProp.cssClass, true);\n\n            if (!isNullOrUndefined(headerEle)) {\n              this.setCssClass(headerEle, oldProp.cssClass, false);\n              this.setCssClass(headerEle, newProp.cssClass, true);\n            }\n          } else {\n            this.setCssClass(this.element, newProp.cssClass, true);\n\n            if (!isNullOrUndefined(headerEle)) {\n              this.setCssClass(headerEle, newProp.cssClass, true);\n            }\n          }\n\n          break;\n\n        case 'items':\n          this.evalOnPropertyChangeItems(newProp, oldProp);\n          break;\n\n        case 'showCloseButton':\n          this.setCloseButton(newProp.showCloseButton);\n          break;\n\n        case 'reorderActiveTab':\n          this.refreshActiveTabBorder();\n          break;\n\n        case 'selectedItem':\n          this.selectedItem = oldProp.selectedItem;\n          this.select(newProp.selectedItem);\n          break;\n\n        case 'headerPlacement':\n          this.changeOrientation(newProp.headerPlacement);\n          break;\n\n        case 'enableRtl':\n          this.setRTL(newProp.enableRtl);\n          break;\n\n        case 'overflowMode':\n          this.tbObj.overflowMode = newProp.overflowMode;\n          this.tbObj.dataBind();\n          this.refreshActiveTabBorder();\n          break;\n\n        case 'heightAdjustMode':\n          this.setContentHeight(false);\n          this.select(this.selectedItem);\n          break;\n\n        case 'scrollStep':\n          if (this.tbObj) {\n            this.tbObj.scrollStep = this.scrollStep;\n          }\n\n          break;\n\n        case 'allowDragAndDrop':\n          this.bindDraggable();\n          break;\n\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            this.draggableItems.forEach(item => {\n              item.dragArea = this.dragArea;\n            });\n            this.refresh();\n          }\n\n          break;\n      }\n    }\n  }\n\n  refreshActiveTab() {\n    if (this.isReact) {\n      this.clearTemplate();\n    }\n\n    if (!this.isTemplate) {\n      if (this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1)) {\n        detach(this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).children[0]);\n        detach(this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).children[0]);\n        const item = this.items[this.selectedItem];\n        const pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? '' : item.header.iconPosition;\n        const css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? '' : item.header.iconCss;\n        const text = item.headerTemplate || item.header.text;\n        const txtWrap = this.createElement('div', {\n          className: CLS_TEXT,\n          attrs: {\n            'role': 'presentation'\n          }\n        });\n\n        if (!isNullOrUndefined(text.tagName)) {\n          txtWrap.appendChild(text);\n        } else {\n          this.headerTextCompile(txtWrap, text, this.selectedItem);\n        }\n\n        let tEle;\n        const icon = this.createElement('span', {\n          className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css\n        });\n        const tConts = this.createElement('div', {\n          className: CLS_TEXT_WRAP\n        });\n        tConts.appendChild(txtWrap);\n\n        if (text !== '' && text !== undefined && css !== '') {\n          if (pos === 'left' || pos === 'top') {\n            tConts.insertBefore(icon, tConts.firstElementChild);\n          } else {\n            tConts.appendChild(icon);\n          }\n\n          tEle = txtWrap;\n          this.isIconAlone = false;\n        } else {\n          tEle = css === '' ? txtWrap : icon;\n\n          if (tEle === icon) {\n            detach(txtWrap);\n            tConts.appendChild(icon);\n            this.isIconAlone = true;\n          }\n        }\n\n        const wrapAtt = item.disabled ? {} : {\n          tabIndex: '-1'\n        };\n        tConts.appendChild(this.btnCls.cloneNode(true));\n        const wraper = this.createElement('div', {\n          className: CLS_WRAP,\n          attrs: wrapAtt\n        });\n        wraper.appendChild(tConts);\n\n        if (pos === 'top' || pos === 'bottom') {\n          this.element.classList.add('e-vertical-icon');\n        }\n\n        this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).appendChild(wraper);\n        const crElem = this.createElement('div');\n        let cnt = item.content;\n        let eleStr;\n\n        if (typeof cnt === 'string' || isNullOrUndefined(cnt.innerHTML)) {\n          if (typeof cnt === 'string' && this.enableHtmlSanitizer) {\n            cnt = SanitizeHtmlHelper.sanitize(cnt);\n          }\n\n          if (cnt[0] === '.' || cnt[0] === '#') {\n            if (document.querySelectorAll(cnt).length) {\n              const eleVal = document.querySelector(cnt);\n              eleStr = eleVal.outerHTML.trim();\n              crElem.appendChild(eleVal);\n              eleVal.style.display = '';\n            } else {\n              this.compileElement(crElem, cnt, 'content', this.selectedItem);\n            }\n          } else {\n            this.compileElement(crElem, cnt, 'content', this.selectedItem);\n          }\n        } else {\n          crElem.appendChild(cnt);\n        }\n\n        if (!isNullOrUndefined(eleStr)) {\n          if (this.templateEle.indexOf(cnt.toString()) === -1) {\n            this.templateEle.push(cnt.toString());\n          }\n        }\n\n        this.element.querySelector('.' + CLS_ITEM$2 + '.' + CLS_ACTIVE$1).appendChild(crElem);\n      }\n    } else {\n      const tabItems = this.element.querySelector('.' + CLS_TB_ITEMS);\n      const element = this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1);\n      const id = element.id;\n      const num = id.indexOf('_');\n      const index = parseInt(id.substring(num + 1), 10);\n      const header = element.innerText;\n      const detachContent = this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).children[0];\n      const mainContents = detachContent.innerHTML;\n      detach(element);\n      detach(detachContent);\n      const attr = {\n        className: CLS_TB_ITEM + ' ' + CLS_TEMPLATE$1 + ' ' + CLS_ACTIVE$1,\n        id: CLS_ITEM$2 + this.tabId + '_' + index,\n        attrs: {\n          role: 'tab',\n          'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + index,\n          'aria-disabled': 'false',\n          'aria-selected': 'true'\n        }\n      };\n      const txtString = this.createElement('span', {\n        className: CLS_TEXT,\n        innerHTML: header,\n        attrs: {\n          'role': 'presentation'\n        }\n      }).outerHTML;\n      const conte = this.createElement('div', {\n        className: CLS_TEXT_WRAP,\n        innerHTML: txtString + this.btnCls.outerHTML\n      }).outerHTML;\n      const wrap = this.createElement('div', {\n        className: CLS_WRAP,\n        innerHTML: conte,\n        attrs: {\n          tabIndex: '-1'\n        }\n      });\n      tabItems.insertBefore(this.createElement('div', attr), tabItems.children[index + 1]);\n      this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).appendChild(wrap);\n      const crElem = this.createElement('div', {\n        innerHTML: mainContents\n      });\n      this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).appendChild(crElem);\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n\n};\n\n__decorate$7([Collection([], TabItem)], Tab.prototype, \"items\", void 0);\n\n__decorate$7([Property('100%')], Tab.prototype, \"width\", void 0);\n\n__decorate$7([Property('auto')], Tab.prototype, \"height\", void 0);\n\n__decorate$7([Property('')], Tab.prototype, \"cssClass\", void 0);\n\n__decorate$7([Property(0)], Tab.prototype, \"selectedItem\", void 0);\n\n__decorate$7([Property('Top')], Tab.prototype, \"headerPlacement\", void 0);\n\n__decorate$7([Property('Content')], Tab.prototype, \"heightAdjustMode\", void 0);\n\n__decorate$7([Property('Scrollable')], Tab.prototype, \"overflowMode\", void 0);\n\n__decorate$7([Property('Dynamic')], Tab.prototype, \"loadOn\", void 0);\n\n__decorate$7([Property(false)], Tab.prototype, \"enablePersistence\", void 0);\n\n__decorate$7([Property(false)], Tab.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$7([Property(false)], Tab.prototype, \"showCloseButton\", void 0);\n\n__decorate$7([Property(true)], Tab.prototype, \"reorderActiveTab\", void 0);\n\n__decorate$7([Property()], Tab.prototype, \"scrollStep\", void 0);\n\n__decorate$7([Property()], Tab.prototype, \"dragArea\", void 0);\n\n__decorate$7([Property(false)], Tab.prototype, \"allowDragAndDrop\", void 0);\n\n__decorate$7([Complex({}, TabAnimationSettings)], Tab.prototype, \"animation\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"created\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"adding\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"added\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"selecting\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"selected\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"removing\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"removed\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"onDragStart\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"dragging\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"dragged\", void 0);\n\n__decorate$7([Event()], Tab.prototype, \"destroyed\", void 0);\n\nTab = __decorate$7([NotifyPropertyChanges], Tab);\n/**\n * Tab modules\n */\n\nvar __decorate$8 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar TreeView_1;\nconst ROOT = 'e-treeview';\nconst CONTROL = 'e-control';\nconst COLLAPSIBLE = 'e-icon-collapsible';\nconst EXPANDABLE = 'e-icon-expandable';\nconst LISTITEM = 'e-list-item';\nconst LISTTEXT = 'e-list-text';\nconst LISTWRAP = 'e-text-wrap';\nconst IELISTWRAP = 'e-ie-wrap';\nconst PARENTITEM = 'e-list-parent';\nconst HOVER = 'e-hover';\nconst ACTIVE = 'e-active';\nconst LOAD = 'e-icons-spinner';\nconst PROCESS = 'e-process';\nconst ICON = 'e-icons';\nconst TEXTWRAP = 'e-text-content';\nconst INPUT = 'e-input';\nconst INPUTGROUP = 'e-input-group';\nconst TREEINPUT = 'e-tree-input';\nconst EDITING = 'e-editing';\nconst RTL$1 = 'e-rtl';\nconst INTERACTION = 'e-interaction';\nconst DRAGITEM = 'e-drag-item';\nconst DROPPABLE = 'e-droppable';\nconst DRAGGING = 'e-dragging';\nconst SIBLING = 'e-sibling';\nconst DROPIN = 'e-drop-in';\nconst DROPNEXT = 'e-drop-next';\nconst DROPOUT = 'e-drop-out';\nconst NODROP = 'e-no-drop';\nconst FULLROWWRAP = 'e-fullrow-wrap';\nconst FULLROW = 'e-fullrow';\nconst SELECTED$1 = 'e-selected';\nconst EXPANDED = 'e-expanded';\nconst NODECOLLAPSED = 'e-node-collapsed';\nconst DISABLE = 'e-disable';\nconst DROPCOUNT = 'e-drop-count';\nconst CHECK = 'e-check';\nconst INDETERMINATE = 'e-stop';\nconst CHECKBOXWRAP = 'e-checkbox-wrapper';\nconst CHECKBOXFRAME = 'e-frame';\nconst CHECKBOXRIPPLE = 'e-ripple-container';\nconst RIPPLE = 'e-ripple';\nconst RIPPLEELMENT = 'e-ripple-element';\nconst FOCUS = 'e-node-focus';\nconst IMAGE = 'e-list-img';\nconst BIGGER = 'e-bigger';\nconst SMALL = 'e-small';\nconst CHILD = 'e-has-child';\nconst ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nconst DISABLED$1 = 'e-disabled';\nconst treeAriaAttr = {\n  treeRole: 'tree',\n  itemRole: 'treeitem',\n  listRole: 'group',\n  itemText: '',\n  wrapperRole: ''\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\n\nclass FieldsSettings extends ChildProperty {}\n\n__decorate$8([Property('child')], FieldsSettings.prototype, \"child\", void 0);\n\n__decorate$8([Property([])], FieldsSettings.prototype, \"dataSource\", void 0);\n\n__decorate$8([Property('expanded')], FieldsSettings.prototype, \"expanded\", void 0);\n\n__decorate$8([Property('hasChildren')], FieldsSettings.prototype, \"hasChildren\", void 0);\n\n__decorate$8([Property('htmlAttributes')], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n\n__decorate$8([Property('iconCss')], FieldsSettings.prototype, \"iconCss\", void 0);\n\n__decorate$8([Property('id')], FieldsSettings.prototype, \"id\", void 0);\n\n__decorate$8([Property('imageUrl')], FieldsSettings.prototype, \"imageUrl\", void 0);\n\n__decorate$8([Property('isChecked')], FieldsSettings.prototype, \"isChecked\", void 0);\n\n__decorate$8([Property('parentID')], FieldsSettings.prototype, \"parentID\", void 0);\n\n__decorate$8([Property(null)], FieldsSettings.prototype, \"query\", void 0);\n\n__decorate$8([Property('selected')], FieldsSettings.prototype, \"selected\", void 0);\n\n__decorate$8([Property(null)], FieldsSettings.prototype, \"tableName\", void 0);\n\n__decorate$8([Property('text')], FieldsSettings.prototype, \"text\", void 0);\n\n__decorate$8([Property('tooltip')], FieldsSettings.prototype, \"tooltip\", void 0);\n\n__decorate$8([Property('navigateUrl')], FieldsSettings.prototype, \"navigateUrl\", void 0);\n/**\n * Configures animation settings for the TreeView component.\n */\n\n\nclass ActionSettings extends ChildProperty {}\n\n__decorate$8([Property('SlideDown')], ActionSettings.prototype, \"effect\", void 0);\n\n__decorate$8([Property(400)], ActionSettings.prototype, \"duration\", void 0);\n\n__decorate$8([Property('linear')], ActionSettings.prototype, \"easing\", void 0);\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\n\n\nclass NodeAnimationSettings extends ChildProperty {}\n\n__decorate$8([Complex({\n  effect: 'SlideUp',\n  duration: 400,\n  easing: 'linear'\n}, ActionSettings)], NodeAnimationSettings.prototype, \"collapse\", void 0);\n\n__decorate$8([Complex({\n  effect: 'SlideDown',\n  duration: 400,\n  easing: 'linear'\n}, ActionSettings)], NodeAnimationSettings.prototype, \"expand\", void 0);\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\n\n\nlet TreeView = TreeView_1 = class TreeView extends Component {\n  constructor(options, element) {\n    super(options, element);\n    this.isRefreshed = false;\n    this.preventExpand = false;\n    this.checkedElement = [];\n    this.disableNode = []; // eslint-disable-next-line\n\n    this.validArr = [];\n    this.validNodes = [];\n    this.expandChildren = [];\n    this.isFieldChange = false;\n    this.changeDataSource = false;\n    this.hasTemplate = false;\n    this.isFirstRender = false;\n    this.mouseDownStatus = false;\n  }\n  /**\n   * Get component name.\n   *\n   * @returns {string} - returns module name.\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'treeview';\n  }\n  /**\n   * Initialize the event handler\n   *\n   * @returns {void}\n   */\n\n\n  preRender() {\n    this.checkActionNodes = [];\n    this.parentNodeCheck = [];\n    this.dragStartAction = false;\n    this.isAnimate = false;\n    this.keyConfigs = {\n      escape: 'escape',\n      end: 'end',\n      enter: 'enter',\n      f2: 'f2',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      ctrlA: 'ctrl+A',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space'\n    };\n    this.listBaseOption = {\n      expandCollapse: true,\n      showIcon: true,\n      expandIconClass: EXPANDABLE,\n      ariaAttributes: treeAriaAttr,\n      expandIconPosition: 'Left',\n      itemCreated: e => {\n        this.beforeNodeCreate(e);\n      },\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      itemNavigable: this.fullRowNavigable\n    };\n    this.updateListProp(this.fields);\n    this.aniObj = new Animation({});\n    this.treeList = [];\n    this.isLoaded = false;\n    this.isInitalExpand = false;\n    this.expandChildren = [];\n    this.index = 0;\n    this.setTouchClass();\n\n    if (isNullOrUndefined(this.selectedNodes)) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n    }\n\n    if (isNullOrUndefined(this.checkedNodes)) {\n      this.setProperties({\n        checkedNodes: []\n      }, true);\n    }\n\n    if (isNullOrUndefined(this.expandedNodes)) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n    } else {\n      this.isInitalExpand = true;\n    }\n  }\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - returns the persisted data\n   * @hidden\n   */\n\n\n  getPersistData() {\n    const keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n    return this.addOnPersist(keyEntity);\n  }\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initialRender = true;\n    this.initialize();\n    this.setDataBinding(false);\n    this.setDisabledMode();\n    this.setExpandOnType();\n\n    if (!this.disabled) {\n      this.setRipple();\n    }\n\n    this.wireEditingEvents(this.allowEditing);\n    this.setDragAndDrop(this.allowDragAndDrop);\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.initialRender = false;\n    this.renderComplete();\n  }\n\n  initialize() {\n    this.element.setAttribute('role', 'tree');\n    this.element.setAttribute('tabindex', '0');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    this.setCssClass(null, this.cssClass);\n    this.setEnableRtl();\n    this.setFullRow(this.fullRowSelect);\n    this.setTextWrap();\n    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n  }\n\n  setDisabledMode() {\n    if (this.disabled) {\n      this.element.classList.add(DISABLED$1);\n    } else {\n      this.element.classList.remove(DISABLED$1);\n    }\n  }\n\n  setEnableRtl() {\n    (this.enableRtl ? addClass : removeClass)([this.element], RTL$1);\n  }\n\n  setRipple() {\n    const tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n    const rippleModel = {\n      selector: tempStr,\n      ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n    };\n    this.rippleFn = rippleEffect(this.element, rippleModel);\n    const iconModel = {\n      selector: '.' + TEXTWRAP + ' > .' + ICON,\n      isCenterRipple: true\n    };\n    this.rippleIconFn = rippleEffect(this.element, iconModel);\n  }\n\n  setFullRow(isEnabled) {\n    (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);\n  }\n\n  setMultiSelect(isEnabled) {\n    const firstUl = select('.' + PARENTITEM, this.element);\n\n    if (isEnabled) {\n      firstUl.setAttribute('aria-multiselectable', 'true');\n    } else {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n  } // eslint-disable-next-line\n\n\n  templateComplier(template) {\n    if (template) {\n      this.hasTemplate = true; // eslint-disable-next-line\n\n      this.element.classList.add(INTERACTION);\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    this.element.classList.remove(INTERACTION);\n    return undefined;\n  }\n\n  setDataBinding(changeDataSource) {\n    this.treeList.push('false');\n\n    if (this.fields.dataSource instanceof DataManager) {\n      /* eslint-disable */\n      this.isOffline = this.fields.dataSource.dataSource.offline;\n\n      if (this.fields.dataSource.ready) {\n        this.fields.dataSource.ready.then(e => {\n          /* eslint-disable */\n          this.isOffline = this.fields.dataSource.dataSource.offline;\n\n          if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n            this.treeList.pop();\n            this.treeData = e.result;\n            this.isNumberTypeId = this.getType();\n            this.setRootData();\n            this.renderItems(true);\n\n            if (this.treeList.length === 0 && !this.isLoaded) {\n              this.finalize();\n            }\n          }\n        }).catch(e => {\n          this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      } else {\n        this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(e => {\n          this.treeList.pop();\n          this.treeData = e.result;\n          this.isNumberTypeId = this.getType();\n          this.setRootData();\n\n          if (changeDataSource) {\n            this.changeDataSource = true;\n          }\n\n          this.renderItems(true);\n          this.changeDataSource = false;\n\n          if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n          }\n        }).catch(e => {\n          this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      this.treeList.pop();\n\n      if (isNullOrUndefined(this.fields.dataSource)) {\n        this.rootData = this.treeData = [];\n      } else {\n        this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n        this.setRootData();\n      }\n\n      this.isNumberTypeId = this.getType();\n      this.renderItems(false);\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  }\n\n  getQuery(mapper, value = null) {\n    let columns = [];\n    let query;\n\n    if (!mapper.query) {\n      query = new Query();\n      let prop = this.getActualProperties(mapper);\n\n      for (let col of Object.keys(prop)) {\n        if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n          columns.push(mapper[col]);\n        }\n      }\n\n      query.select(columns);\n\n      if (prop.hasOwnProperty('tableName')) {\n        query.from(mapper.tableName);\n      }\n    } else {\n      query = mapper.query.clone();\n    }\n\n    ListBase.addSorting(this.sortOrder, mapper.text, query);\n\n    if (!isNullOrUndefined(value) && !isNullOrUndefined(mapper.parentID)) {\n      query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);\n    }\n\n    return query;\n  }\n\n  getType() {\n    return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;\n  }\n\n  setRootData() {\n    this.dataType = this.getDataType(this.treeData, this.fields);\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n      let rootItems = this.getChildNodes(this.treeData, undefined, true);\n\n      if (isNullOrUndefined(rootItems)) {\n        this.rootData = [];\n      } else {\n        this.rootData = rootItems;\n      }\n    } else {\n      this.rootData = this.treeData;\n    }\n  }\n\n  renderItems(isSorted) {\n    /* eslint-disable */\n    this.listBaseOption.ariaAttributes.level = 1;\n    let sortedData = this.getSortedData(this.rootData);\n    this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n    this.element.appendChild(this.ulElement);\n    let rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n\n    if (this.loadOnDemand === false) {\n      let i = 0;\n\n      while (i < rootNodes.length) {\n        this.renderChildNodes(rootNodes[i], true, null, true);\n        i++;\n      }\n    }\n\n    let parentEle = selectAll('.' + PARENTITEM, this.element);\n\n    if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {\n      this.finalizeNode(this.element);\n    }\n\n    this.parentNodeCheck = [];\n    this.parentCheckData = [];\n    this.updateCheckedStateFromDS();\n\n    if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n      this.updateParentCheckState();\n    }\n  }\n  /**\n   * Update the checkedNodes from datasource at initial rendering\n   */\n\n\n  updateCheckedStateFromDS(id) {\n    this.validNodes = [];\n\n    if (this.treeData && this.showCheckBox) {\n      if (this.dataType === 1) {\n        let mapper = this.fields;\n        let resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (let i = 0; i < resultData.length; i++) {\n          let resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n          let resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n\n          if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {\n            this.checkedNodes.push(resultId);\n          }\n\n          if (resultData[i][this.fields.hasChildren]) {\n            let id = resultData[i][this.fields.id];\n            let childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', id, false));\n\n            for (let child = 0; child < childData.length; child++) {\n              let childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n\n              if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                this.checkedNodes.push(childId);\n              }\n            }\n          }\n        }\n\n        for (let i = 0; i < this.checkedNodes.length; i++) {\n          let mapper = this.fields;\n          let checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', this.checkedNodes[i], true));\n\n          if (checkState[0] && this.autoCheck) {\n            this.getCheckedNodeDetails(mapper, checkState);\n            this.checkIndeterminateState(checkState[0]);\n          }\n\n          if (checkState.length > 0) {\n            let checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n\n          let checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', this.checkedNodes[i], true));\n\n          for (let index = 0; index < checkedData.length; index++) {\n            let checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n              this.checkedNodes.push(checkedId);\n            }\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n        }\n      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n        for (let index = 0; index < this.treeData.length; index++) {\n          let fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n\n          if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {\n            this.checkedNodes.push(fieldId);\n          }\n\n          if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\n            this.validNodes.push(fieldId);\n          }\n\n          let childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n\n          if (childItems) {\n            this.updateChildCheckState(childItems, this.treeData[index]);\n          }\n        }\n\n        this.validNodes = this.enablePersistence ? this.checkedNodes : this.validNodes;\n      }\n\n      this.setProperties({\n        checkedNodes: this.validNodes\n      }, true);\n    }\n  }\n  /**\n   * To check whether the list data has sub child and to change the parent check state accordingly\n   */\n\n\n  getCheckedNodeDetails(mapper, checkNodes) {\n    let id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n    let count = 0;\n    let element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n    let parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n\n    if (!element && !parentEle) {\n      let len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(id) === -1) {\n        this.parentNodeCheck.push(id);\n      }\n\n      let childNodes = this.getChildNodes(this.treeData, id);\n\n      for (let i = 0; i < childNodes.length; i++) {\n        let childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n\n        if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n          this.checkedNodes.push(id);\n        }\n      }\n\n      let preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', id, true));\n      this.getCheckedNodeDetails(mapper, preElement);\n    } else if (parentEle) {\n      let check = select('.' + CHECK, parentEle);\n\n      if (!check) {\n        this.changeState(parentEle, 'indeterminate', null, true, true);\n      }\n    }\n  }\n  /**\n   * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n   */\n\n\n  updateParentCheckState() {\n    let indeterminate = selectAll('.' + INDETERMINATE, this.element);\n    let childCheckedElement;\n\n    for (let i = 0; i < indeterminate.length; i++) {\n      let node = closest(indeterminate[i], '.' + LISTITEM);\n      let nodeId = node.getAttribute('data-uid').toString();\n\n      if (this.dataType === 1) {\n        childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n      } else {\n        childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n      }\n\n      let count = 0;\n\n      if (childCheckedElement) {\n        for (let j = 0; j < childCheckedElement.length; j++) {\n          let childId = childCheckedElement[j][this.fields.id].toString();\n\n          if (this.checkedNodes.indexOf(childId) !== -1) {\n            count++;\n          }\n        }\n\n        if (count === childCheckedElement.length) {\n          let nodeCheck = node.getAttribute('data-uid');\n\n          if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n            this.checkedNodes.push(nodeCheck);\n          }\n\n          this.changeState(node, 'check', null, true, true);\n        } else if (count === 0 && this.checkedNodes.length === 0) {\n          this.changeState(node, 'uncheck', null, true, true);\n        }\n      }\n    }\n  }\n  /**\n   * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n   */\n\n\n  checkIndeterminateState(data) {\n    let element;\n\n    if (this.dataType === 1) {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n    } else {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n    }\n\n    if (element) {\n      let ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n\n      if (ariaChecked !== 'true') {\n        this.changeState(element, 'indeterminate', null, true, true);\n      }\n    } else if (this.dataType === 2) {\n      let len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n        this.parentNodeCheck.push(data[this.fields.id].toString());\n      }\n    }\n  }\n  /**\n   * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n   */\n\n\n  updateChildCheckState(childItems, treeData) {\n    let count = 0;\n    let checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n\n    for (let index = 0; index < childItems.length; index++) {\n      let checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n      if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n        count++;\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\n        this.validNodes.push(checkedChild);\n      }\n\n      let subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n      if (subChildItems && subChildItems.length) {\n        if (this.parentCheckData.indexOf(treeData) === -1) this.parentCheckData.push(treeData);\n        this.updateChildCheckState(subChildItems, childItems[index]);\n      }\n\n      if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n        this.checkedNodes.push(checkedParent);\n      }\n    }\n\n    if (count !== 0 && this.autoCheck) {\n      this.checkIndeterminateState(treeData);\n\n      for (let len = 0; len < this.parentCheckData.length; len++) {\n        if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {\n          this.checkIndeterminateState(this.parentCheckData[len]);\n        }\n      }\n    }\n  }\n\n  beforeNodeCreate(e) {\n    if (this.showCheckBox) {\n      let checkboxEle = createCheckBox(this.createElement, true, {\n        cssClass: this.touchClass\n      });\n      checkboxEle.setAttribute('role', 'checkbox');\n      let icon = select('div.' + ICON, e.item);\n      let id = e.item.getAttribute('data-uid');\n      e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNullOrUndefined(icon) ? 0 : 1]);\n      let checkValue = getValue(e.fields.isChecked, e.curData);\n\n      if (this.checkedNodes.indexOf(id) > -1) {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else if (!isNullOrUndefined(checkValue) && checkValue.toString() === 'true') {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else {\n        checkboxEle.setAttribute('aria-checked', 'false');\n      }\n\n      let frame = select('.' + CHECKBOXFRAME, checkboxEle);\n      EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n      EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n    }\n\n    if (this.fullRowSelect) {\n      this.createFullRow(e.item);\n    }\n\n    if (this.allowMultiSelection && !e.item.classList.contains(SELECTED$1)) {\n      e.item.setAttribute('aria-selected', 'false');\n    }\n\n    let fields = e.fields;\n    this.addActionClass(e, fields.selected, SELECTED$1);\n    this.addActionClass(e, fields.expanded, EXPANDED);\n\n    if (!isNullOrUndefined(this.nodeTemplateFn)) {\n      let textEle = e.item.querySelector('.' + LISTTEXT);\n      let dataId = e.item.getAttribute('data-uid');\n      textEle.innerHTML = '';\n      this.renderNodeTemplate(e.curData, textEle, dataId);\n    }\n\n    let eventArgs = {\n      node: e.item,\n      nodeData: e.curData,\n      text: e.text\n    };\n\n    if (!this.isRefreshed) {\n      this.trigger('drawNode', eventArgs);\n    }\n  }\n\n  frameMouseHandler(e) {\n    let rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n    rippleMouseHandler(e, rippleSpan);\n  }\n\n  addActionClass(e, action, cssClass) {\n    let data = e.curData;\n    let actionValue = getValue(action, data);\n\n    if (!isNullOrUndefined(actionValue) && actionValue.toString() !== 'false') {\n      e.item.classList.add(cssClass);\n    }\n  }\n\n  getDataType(ds, mapper) {\n    if (this.fields.dataSource instanceof DataManager) {\n      for (let i = 0; i < ds.length; i++) {\n        if (this.isOffline) {\n          if (typeof mapper.child === 'string' && isNullOrUndefined(getValue(mapper.child, ds[i])) && !isNullOrUndefined(getValue(mapper.parentID, ds[i]))) {\n            return 1;\n          }\n        } else if (typeof mapper.child === 'string' && isNullOrUndefined(getValue(mapper.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    for (let i = 0, len = ds.length; i < len; i++) {\n      if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, ds[i]))) {\n        return 2;\n      }\n\n      if (!isNullOrUndefined(getValue(mapper.parentID, ds[i])) || !isNullOrUndefined(getValue(mapper.hasChildren, ds[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  }\n\n  getGroupedData(dataSource, groupBy) {\n    let cusQuery = new Query().group(groupBy);\n    let ds = ListBase.getDataSource(dataSource, cusQuery);\n    let grpItem = [];\n\n    for (let j = 0; j < ds.length; j++) {\n      let itemObj = ds[j].items;\n      grpItem.push(itemObj);\n    }\n\n    return grpItem;\n  }\n\n  getSortedData(list) {\n    if (list && this.sortOrder !== 'None') {\n      list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n    }\n\n    return list;\n  }\n\n  finalizeNode(element) {\n    let iNodes = selectAll('.' + IMAGE, element);\n\n    for (let k = 0; k < iNodes.length; k++) {\n      iNodes[k].setAttribute('alt', IMAGE);\n    }\n\n    if (this.isLoaded) {\n      let sNodes = selectAll('.' + SELECTED$1, element);\n\n      for (let i = 0; i < sNodes.length; i++) {\n        this.selectNode(sNodes[i], null);\n        break;\n      }\n\n      removeClass(sNodes, SELECTED$1);\n    }\n\n    let cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n\n    for (let j = 0; j < cNodes.length; j++) {\n      let icon = select('div.' + ICON, cNodes[j]);\n\n      if (icon && icon.classList.contains(EXPANDABLE)) {\n        this.disableExpandAttr(cNodes[j]);\n      }\n    }\n\n    let eNodes = selectAll('.' + EXPANDED, element);\n\n    if (!this.isInitalExpand) {\n      for (let i = 0; i < eNodes.length; i++) {\n        this.renderChildNodes(eNodes[i]);\n      }\n    }\n\n    removeClass(eNodes, EXPANDED);\n    this.updateList();\n\n    if (this.isLoaded) {\n      this.updateCheckedProp();\n    }\n  }\n\n  updateCheckedProp() {\n    if (this.showCheckBox) {\n      let nodes = [].concat([], this.checkedNodes);\n      this.setProperties({\n        checkedNodes: nodes\n      }, true);\n    }\n  }\n\n  ensureIndeterminate() {\n    if (this.autoCheck) {\n      let liElement = selectAll('li', this.element);\n      let ulElement;\n\n      for (let i = 0; i < liElement.length; i++) {\n        if (liElement[i].classList.contains(LISTITEM)) {\n          ulElement = select('.' + PARENTITEM, liElement[i]);\n\n          if (ulElement) {\n            this.ensureParentCheckState(liElement[i]);\n          } else {\n            this.ensureChildCheckState(liElement[i]);\n          }\n        }\n      }\n    } else {\n      let indeterminate = selectAll('.' + INDETERMINATE, this.element);\n\n      for (let i = 0; i < indeterminate.length; i++) {\n        indeterminate[i].classList.remove(INDETERMINATE);\n      }\n    }\n  }\n\n  ensureParentCheckState(element) {\n    if (!isNullOrUndefined(element)) {\n      if (element.classList.contains(ROOT)) {\n        return;\n      }\n\n      let ulElement = element;\n\n      if (element.classList.contains(LISTITEM)) {\n        ulElement = select('.' + PARENTITEM, element);\n      }\n\n      let checkedNodes = selectAll('.' + CHECK, ulElement);\n      let indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n      let nodes = selectAll('.' + LISTITEM, ulElement);\n      let checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n\n      if (nodes.length === checkedNodes.length) {\n        this.changeState(checkBoxEle, 'check', null, true, true);\n      } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n        this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n      } else if (checkedNodes.length === 0) {\n        this.changeState(checkBoxEle, 'uncheck', null, true, true);\n      }\n\n      let parentUL = closest(element, '.' + PARENTITEM);\n\n      if (!isNullOrUndefined(parentUL)) {\n        let currentParent = closest(parentUL, '.' + LISTITEM);\n        this.ensureParentCheckState(currentParent);\n      }\n    }\n  }\n\n  ensureChildCheckState(element, e) {\n    if (!isNullOrUndefined(element)) {\n      let childElement = select('.' + PARENTITEM, element);\n      let checkBoxes;\n\n      if (!isNullOrUndefined(childElement)) {\n        checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n        let isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n        let parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n        let childCheck = childElement.querySelectorAll('li');\n        let expandState = childElement.parentElement.getAttribute('aria-expanded');\n        let checkedState;\n\n        for (let index = 0; index < checkBoxes.length; index++) {\n          let childId = childCheck[index].getAttribute('data-uid');\n\n          if (!isNullOrUndefined(this.currentLoadData) && !isNullOrUndefined(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n            checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n\n            if (this.ele !== -1) {\n              checkedState = isChecked ? 'check' : 'uncheck';\n            }\n\n            if (checkedState === 'uncheck' && !isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n              checkedState = 'indeterminate';\n            }\n          } else {\n            let isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n\n            if (isChecked) {\n              checkedState = 'check';\n            } else if (isNodeChecked && !this.isLoaded) {\n              checkedState = 'check';\n            } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n              checkedState = 'check';\n            } else if (childCheck[index].classList.contains(CHILD) && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else if (this.dataType === 1 && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else {\n              checkedState = 'uncheck';\n            }\n          }\n\n          this.changeState(checkBoxes[index], checkedState, e, true, true);\n        }\n      }\n\n      if (this.autoCheck && this.isLoaded) {\n        this.updateParentCheckState();\n      }\n    }\n  }\n\n  doCheckBoxAction(nodes, doCheck) {\n    let li = selectAll('.' + LISTITEM, this.element);\n\n    if (!isNullOrUndefined(nodes)) {\n      for (let len = nodes.length; len >= 0; len--) {\n        let liEle;\n\n        if (nodes.length === 1) {\n          liEle = this.getElement(nodes[len - 1]);\n        } else {\n          liEle = this.getElement(nodes[len]);\n        }\n\n        if (isNullOrUndefined(liEle)) {\n          let node;\n          node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n\n          if (node !== '' && doCheck && node) {\n            this.setValidCheckedNode(node);\n            this.dynamicCheckState(node, doCheck);\n          } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n            let childItems = this.getChildNodes(this.treeData, node);\n\n            if (childItems) {\n              for (let i = 0; i < childItems.length; i++) {\n                let id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n                if (this.checkedNodes.indexOf(id) !== -1) {\n                  this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                  let ele = this.element.querySelector('[data-uid=\"' + id + '\"]');\n\n                  if (ele) {\n                    this.changeState(ele, 'uncheck', null);\n                  }\n                }\n              }\n\n              if (this.parentNodeCheck.indexOf(node) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n              }\n            }\n\n            if (node) {\n              this.dynamicCheckState(node, doCheck);\n            }\n\n            this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n          }\n\n          continue;\n        }\n\n        let checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n        this.validateCheckNode(checkBox, !doCheck, liEle, null);\n      }\n    } else {\n      let checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n\n      if (this.loadOnDemand) {\n        for (let index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n        }\n      } else {\n        for (let index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n        }\n      }\n    }\n\n    if (nodes) {\n      for (let j = 0; j < nodes.length; j++) {\n        let node = nodes[j] ? nodes[j].toString() : '';\n\n        if (!doCheck) {\n          this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n        }\n      }\n    }\n\n    if (this.autoCheck) {\n      this.updateParentCheckState();\n    }\n  }\n\n  updateFieldChecked(checkbox, doCheck) {\n    let currLi = closest(checkbox, '.' + LISTITEM);\n    let id = currLi.getAttribute('data-uid');\n    let nodeDetails = this.getNodeData(currLi);\n\n    if (nodeDetails.isChecked === 'true' && !doCheck) {\n      this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n    }\n  }\n  /**\n   * Changes the parent and child  check state while changing the checkedNodes via setmodel\n   */\n\n\n  dynamicCheckState(node, doCheck) {\n    if (this.dataType === 1) {\n      let count = 0;\n      let resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n\n      if (resultId[0]) {\n        let id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n        let parent = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n        let parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n        let indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n        let check = parentElement ? select('.' + CHECK, parentElement) : null;\n        let element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        let childNodes = this.getChildNodes(this.treeData, parent);\n\n        if (childNodes) {\n          for (let i = 0; i < childNodes.length; i++) {\n            let childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n        }\n\n        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {\n          this.changeState(element, 'uncheck', null);\n        } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {\n          this.changeState(element, 'check', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else if (!element && !parentElement && id === node && this.autoCheck) {\n          this.updateIndeterminate(node, doCheck);\n        }\n      }\n    } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n      let id;\n      let parentElement;\n      let check;\n\n      for (let i = 0; i < this.treeData.length; i++) {\n        id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n        parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        check = parentElement ? select('.' + CHECK, parentElement) : null;\n\n        if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        }\n\n        let subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n\n        if (subChild) {\n          this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n        }\n      }\n    }\n  }\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n   */\n\n\n  updateIndeterminate(node, doCheck) {\n    let indeterminateData = this.getTreeData(node);\n    let count = 0;\n    let parent;\n\n    if (this.dataType === 1) {\n      parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n    }\n\n    let childNodes = this.getChildNodes(this.treeData, parent);\n\n    if (childNodes) {\n      for (let i = 0; i < childNodes.length; i++) {\n        let childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n      }\n    }\n\n    let parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n\n    if (parentElement && doCheck) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n      this.changeState(parentElement, 'uncheck', null);\n    } else if (!parentElement) {\n      if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n      } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n        this.parentNodeCheck.push(parent);\n      } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n        this.parentNodeCheck.push(parent);\n      }\n\n      this.updateIndeterminate(parent, doCheck);\n\n      if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n      }\n    }\n  }\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n   */\n\n\n  updateChildIndeterminate(subChild, parent, node, doCheck, child) {\n    let count = 0;\n\n    for (let j = 0; j < subChild.length; j++) {\n      let subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n\n      if (this.checkedNodes.indexOf(subId) !== -1) {\n        count++;\n      }\n\n      let parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n      let indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n      let check = parentElement ? select('.' + CHECK, parentElement) : null;\n      let element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n      let childElementCheck = element ? select('.' + CHECK, element) : null;\n\n      if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {\n        this.changeState(parentElement, 'indeterminate', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {\n        if (this.autoCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else {\n          if (count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n          } else {\n            this.changeState(parentElement, 'uncheck', null);\n          }\n        }\n      } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {\n        this.changeState(element, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {\n        indeterminate.classList.remove(INDETERMINATE);\n      } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {\n        this.changeState(parentElement, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n        this.changeState(element, 'uncheck', null);\n      } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {\n        let childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n\n        if (doCheck && count !== 0) {\n          this.changeState(childElement, 'indeterminate', null);\n        } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n          this.checkedNodes.push(parent);\n        } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n        }\n\n        if (this.parentNodeCheck.indexOf(parent) === -1) {\n          this.parentNodeCheck.push(parent);\n        }\n      }\n\n      let innerChild = getValue(this.fields.child.toString(), subChild[j]);\n\n      if (innerChild) {\n        this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n      }\n    }\n  }\n\n  changeState(wrapper, state, e, isPrevent, isAdd, doCheck) {\n    let eventArgs;\n    let currLi = closest(wrapper, '.' + LISTITEM);\n\n    if (wrapper === currLi) {\n      wrapper = select('.' + CHECKBOXWRAP, currLi);\n    }\n\n    if (!isPrevent) {\n      this.checkActionNodes = [];\n      eventArgs = this.getCheckEvent(currLi, state, e);\n      this.trigger('nodeChecking', eventArgs, observedArgs => {\n        if (!observedArgs.cancel) {\n          this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n        }\n      });\n    } else {\n      this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n    }\n  }\n\n  nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n    let ariaState;\n    let frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n      this.addCheck(currLi);\n      ariaState = 'true';\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n      this.removeCheck(currLi);\n      ariaState = 'false';\n    } else if (state === 'indeterminate' && this.autoCheck) {\n      frameSpan.classList.remove(CHECK);\n      frameSpan.classList.add(INDETERMINATE);\n      this.removeCheck(currLi);\n      ariaState = 'mixed';\n    }\n\n    ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n\n    if (!isNullOrUndefined(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n\n    if (isAdd) {\n      let data = [].concat([], this.checkActionNodes);\n      eventArgs = this.getCheckEvent(currLi, state, e);\n\n      if (isUndefined(isPrevent)) {\n        eventArgs.data = data;\n      }\n    }\n\n    if (doCheck !== undefined) {\n      this.ensureStateChange(currLi, doCheck);\n    }\n\n    if (!isPrevent) {\n      if (!isNullOrUndefined(ariaState)) {\n        wrapper.setAttribute('aria-checked', ariaState);\n        eventArgs.data[0].checked = ariaState;\n        this.trigger('nodeChecked', eventArgs);\n        this.checkActionNodes = [];\n      }\n    }\n  }\n\n  addCheck(liEle) {\n    let id = liEle.getAttribute('data-uid');\n\n    if (!isNullOrUndefined(id) && this.checkedNodes.indexOf(id) === -1) {\n      this.checkedNodes.push(id);\n    }\n  }\n\n  removeCheck(liEle) {\n    let index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.checkedNodes.splice(index, 1);\n    }\n  }\n\n  getCheckEvent(currLi, action, e) {\n    this.checkActionNodes.push(this.getNodeData(currLi));\n    let nodeData = this.checkActionNodes;\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNullOrUndefined(e) ? false : true,\n      node: currLi,\n      data: nodeData\n    };\n  }\n\n  finalize() {\n    let firstUl = select('.' + PARENTITEM, this.element);\n\n    if (!isNullOrUndefined(firstUl)) {\n      firstUl.setAttribute('role', treeAriaAttr.treeRole);\n      this.setMultiSelect(this.allowMultiSelection);\n      let firstNode = select('.' + LISTITEM, this.element);\n\n      if (firstNode) {\n        addClass([firstNode], FOCUS);\n        this.updateIdAttr(null, firstNode);\n      }\n\n      if (this.allowTextWrap) {\n        this.updateWrap();\n      }\n\n      this.renderReactTemplates();\n      this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n      this.doExpandAction();\n    }\n  }\n\n  setTextWrap() {\n    (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);\n\n    if (Browser.isIE) {\n      (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);\n    }\n  }\n\n  updateWrap(ulEle) {\n    if (!this.fullRowSelect) {\n      return;\n    }\n\n    const liEle = ulEle ? selectAll('.' + LISTITEM, ulEle) : this.liList;\n    const length = liEle.length;\n\n    for (let i = 0; i < length; i++) {\n      this.calculateWrap(liEle[i]);\n    }\n  }\n\n  calculateWrap(liEle) {\n    const element = select('.' + FULLROW, liEle);\n\n    if (element && element.nextElementSibling) {\n      element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + 'px' : '';\n    }\n  }\n\n  doExpandAction() {\n    let eUids = this.expandedNodes;\n\n    if (this.isInitalExpand && eUids.length > 0) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n      /* eslint-disable */\n\n      if (this.fields.dataSource instanceof DataManager) {\n        this.expandGivenNodes(eUids);\n      } else {\n        for (let i = 0; i < eUids.length; i++) {\n          let eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n\n          if (!isNullOrUndefined(eNode)) {\n            let icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n            if (!isNullOrUndefined(icon)) {\n              this.expandAction(eNode, icon, null);\n            }\n          } else {\n            if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n              this.expandChildren.push(eUids[i].toString());\n            }\n\n            continue;\n          }\n        }\n\n        this.afterFinalized();\n      }\n    } else {\n      this.afterFinalized();\n    }\n  }\n\n  expandGivenNodes(arr) {\n    let proxy = this;\n    this.expandCallback(arr[this.index], () => {\n      proxy.index++;\n\n      if (proxy.index < arr.length) {\n        proxy.expandGivenNodes(arr);\n      } else {\n        proxy.afterFinalized();\n      }\n    });\n  }\n\n  expandCallback(eUid, callback) {\n    let eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n\n    if (!isNullOrUndefined(eNode)) {\n      let icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n      if (!isNullOrUndefined(icon)) {\n        this.expandAction(eNode, icon, null, false, callback);\n      } else {\n        callback();\n      }\n    } else {\n      callback();\n    }\n  }\n\n  afterFinalized() {\n    this.doSelectionAction();\n    this.updateCheckedProp();\n    this.isAnimate = true;\n    this.isInitalExpand = false;\n\n    if (!this.isLoaded || this.isFieldChange) {\n      let eventArgs = {\n        data: this.treeData\n      };\n      this.trigger('dataBound', eventArgs);\n    }\n\n    this.isLoaded = true;\n  }\n\n  doSelectionAction() {\n    let sNodes = selectAll('.' + SELECTED$1, this.element);\n    let sUids = this.selectedNodes;\n\n    if (sUids.length > 0) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n\n      for (let i = 0; i < sUids.length; i++) {\n        let sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n\n        if (sNode && !sNode.classList.contains('e-active')) {\n          this.selectNode(sNode, null, true);\n        } else {\n          this.selectedNodes.push(sUids[i]);\n        }\n\n        if (!this.allowMultiSelection) {\n          break;\n        }\n      }\n    } else {\n      this.selectGivenNodes(sNodes);\n    }\n\n    removeClass(sNodes, SELECTED$1);\n  }\n\n  selectGivenNodes(sNodes) {\n    for (let i = 0; i < sNodes.length; i++) {\n      if (!sNodes[i].classList.contains('e-disable')) {\n        this.selectNode(sNodes[i], null, true);\n      }\n\n      if (!this.allowMultiSelection) {\n        break;\n      }\n    }\n  }\n\n  clickHandler(event) {\n    let target = event.originalEvent.target;\n    EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n\n    if (!target || this.dragStartAction) {\n      return;\n    } else {\n      let classList$$1 = target.classList;\n      let li = closest(target, '.' + LISTITEM);\n\n      if (!li) {\n        return;\n      } else if (event.originalEvent.which !== 3) {\n        let rippleElement = select('.' + RIPPLEELMENT, li);\n        let rippleIcons = select('.' + ICON, li);\n        this.removeHover();\n        this.setFocusElement(li);\n\n        if (this.showCheckBox && !li.classList.contains('e-disable')) {\n          let checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n          if (!isNullOrUndefined(checkWrapper)) {\n            let checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n            this.triggerClickEvent(event.originalEvent, li);\n            return;\n          }\n        }\n\n        if (classList$$1.contains(EXPANDABLE)) {\n          this.expandAction(li, target, event);\n        } else if (classList$$1.contains(COLLAPSIBLE)) {\n          this.collapseNode(li, target, event);\n        } else if (rippleElement && rippleIcons) {\n          if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n            this.expandAction(li, rippleIcons, event);\n          } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n            this.collapseNode(li, rippleIcons, event);\n          } else if (!classList$$1.contains(PARENTITEM) && !classList$$1.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        } else {\n          if (!classList$$1.contains(PARENTITEM) && !classList$$1.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        }\n      }\n\n      this.triggerClickEvent(event.originalEvent, li);\n    }\n  }\n\n  nodeCheckedEvent(wrapper, isCheck, e) {\n    let currLi = closest(wrapper, '.' + LISTITEM);\n    let eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n    eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n    this.trigger('nodeChecked', eventArgs);\n  }\n\n  triggerClickEvent(e, li) {\n    let eventArgs = {\n      event: e,\n      node: li\n    };\n    this.trigger('nodeClicked', eventArgs);\n  }\n\n  expandNode(currLi, icon, loaded) {\n    this.renderReactTemplates();\n\n    if (icon.classList.contains(LOAD)) {\n      this.hideSpinner(icon);\n    }\n\n    if (!this.initialRender) {\n      icon.classList.add('interaction');\n    }\n\n    if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {\n      if (this.preventExpand !== true) {\n        removeClass([icon], EXPANDABLE);\n        addClass([icon], COLLAPSIBLE);\n        let start = 0;\n        let end = 0;\n        let proxy = this;\n        let ul = select('.' + PARENTITEM, currLi);\n        let liEle = currLi;\n        this.setHeight(liEle, ul);\n        let activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n        if (this.isAnimate && !this.isRefreshed) {\n          this.aniObj.animate(ul, {\n            name: this.animation.expand.effect,\n            duration: this.animation.expand.duration,\n            timingFunction: this.animation.expand.easing,\n            begin: args => {\n              liEle.style.overflow = 'hidden';\n\n              if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n              }\n\n              start = liEle.offsetHeight;\n              end = select('.' + TEXTWRAP, currLi).offsetHeight;\n            },\n            progress: args => {\n              args.element.style.display = 'block';\n              proxy.animateHeight(args, start, end);\n            },\n            end: args => {\n              args.element.style.display = 'block';\n\n              if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n              }\n\n              this.expandedNode(liEle, ul, icon);\n            }\n          });\n        } else {\n          this.expandedNode(liEle, ul, icon);\n        }\n      }\n    } else {\n      let ul = select('.' + PARENTITEM, currLi);\n      ul.style.display = 'none';\n\n      if (this.fields.dataSource instanceof DataManager === true) {\n        this.preventExpand = false;\n      }\n    }\n\n    if (this.initialRender) {\n      icon.classList.add('interaction');\n    }\n  }\n\n  expandedNode(currLi, ul, icon) {\n    ul.style.display = 'block';\n    currLi.style.display = 'block';\n    currLi.style.overflow = '';\n    currLi.style.height = '';\n    removeClass([icon], PROCESS);\n    this.addExpand(currLi);\n\n    if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {\n      this.updateWrap(currLi);\n      this.isFirstRender = false;\n    }\n\n    if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, null);\n      this.trigger('nodeExpanded', this.expandArgs);\n    }\n  }\n\n  addExpand(liEle) {\n    liEle.setAttribute('aria-expanded', 'true');\n    removeClass([liEle], NODECOLLAPSED);\n    let id = liEle.getAttribute('data-uid');\n\n    if (!isNullOrUndefined(id) && this.expandedNodes.indexOf(id) === -1) {\n      this.expandedNodes.push(id);\n    }\n  }\n\n  collapseNode(currLi, icon, e) {\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    let colArgs;\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeCollapsing', colArgs, observedArgs => {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          this.nodeCollapseAction(currLi, icon, observedArgs);\n        }\n      });\n    } else {\n      this.nodeCollapseAction(currLi, icon, colArgs);\n    }\n  }\n\n  nodeCollapseAction(currLi, icon, colArgs) {\n    removeClass([icon], COLLAPSIBLE);\n    addClass([icon], EXPANDABLE);\n    let start = 0;\n    let end = 0;\n    let proxy = this;\n    let ul = select('.' + PARENTITEM, currLi);\n    let liEle = currLi;\n    let activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n    if (this.isAnimate) {\n      this.aniObj.animate(ul, {\n        name: this.animation.collapse.effect,\n        duration: this.animation.collapse.duration,\n        timingFunction: this.animation.collapse.easing,\n        begin: args => {\n          liEle.style.overflow = 'hidden';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n          }\n\n          start = select('.' + TEXTWRAP, currLi).offsetHeight;\n          end = liEle.offsetHeight;\n        },\n        progress: args => {\n          proxy.animateHeight(args, start, end);\n        },\n        end: args => {\n          args.element.style.display = 'none';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n          }\n\n          this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n      });\n    } else {\n      this.collapsedNode(liEle, ul, icon, colArgs);\n    }\n  }\n\n  collapsedNode(liEle, ul, icon, colArgs) {\n    ul.style.display = 'none';\n    liEle.style.overflow = '';\n    liEle.style.height = '';\n    removeClass([icon], PROCESS);\n    this.removeExpand(liEle);\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(liEle, null);\n      this.trigger('nodeCollapsed', colArgs);\n    }\n  }\n\n  removeExpand(liEle, toRemove) {\n    if (toRemove) {\n      liEle.removeAttribute('aria-expanded');\n    } else {\n      this.disableExpandAttr(liEle);\n    }\n\n    let index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.expandedNodes.splice(index, 1);\n    }\n  }\n\n  disableExpandAttr(liEle) {\n    liEle.setAttribute('aria-expanded', 'false');\n    addClass([liEle], NODECOLLAPSED);\n  }\n\n  setHeight(currLi, ul) {\n    ul.style.display = 'block';\n    ul.style.visibility = 'hidden';\n    currLi.style.height = currLi.offsetHeight + 'px';\n    ul.style.display = 'none';\n    ul.style.visibility = '';\n  }\n\n  animateHeight(args, start, end) {\n    let remaining = (args.duration - args.timeStamp) / args.duration;\n    let currentHeight = (end - start) * remaining + start;\n    args.element.parentElement.style.height = currentHeight + 'px';\n  }\n\n  renderChildNodes(parentLi, expandChild, callback, loaded) {\n    let eicon = select('div.' + ICON, parentLi);\n\n    if (isNullOrUndefined(eicon)) {\n      return;\n    }\n\n    this.showSpinner(eicon);\n    let childItems;\n    /* eslint-disable */\n\n    if (this.fields.dataSource instanceof DataManager) {\n      let level = this.parents(parentLi, '.' + PARENTITEM).length;\n      let mapper = this.getChildFields(this.fields, level, 1);\n\n      if (isNullOrUndefined(mapper) || isNullOrUndefined(mapper.dataSource)) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      }\n\n      this.treeList.push('false');\n\n      if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n        this.treeList.pop();\n        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n        this.loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded);\n      } else {\n        mapper.dataSource.executeQuery(this.getQuery(mapper, parentLi.getAttribute('data-uid'))).then(e => {\n          this.treeList.pop();\n          childItems = e.result;\n\n          if (this.dataType === 1) {\n            this.dataType = 2;\n          }\n\n          this.loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded);\n        }).catch(e => {\n          this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n      this.currentLoadData = this.getSortedData(childItems);\n\n      if (isNullOrUndefined(childItems) || childItems.length === 0) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      } else {\n        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n        parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n        this.expandNode(parentLi, eicon, loaded);\n        this.setSelectionForChildNodes(childItems);\n        this.ensureCheckNode(parentLi);\n        this.finalizeNode(parentLi);\n        this.disableTreeNodes(childItems);\n        this.renderSubChild(parentLi, expandChild, loaded);\n      }\n    }\n  }\n\n  loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n    this.currentLoadData = childItems;\n\n    if (isNullOrUndefined(childItems) || childItems.length === 0) {\n      detach(eicon);\n      this.removeExpand(parentLi, true);\n    } else {\n      this.updateListProp(mapper);\n\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        let id = parentLi.getAttribute('data-uid');\n        let nodeData = this.getNodeObject(id);\n        setValue('child', childItems, nodeData);\n      }\n\n      this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n      parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n      this.expandNode(parentLi, eicon, loaded);\n      this.setSelectionForChildNodes(childItems);\n      this.ensureCheckNode(parentLi);\n      this.finalizeNode(parentLi);\n      this.disableTreeNodes(childItems);\n      this.renderSubChild(parentLi, expandChild, loaded);\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  }\n\n  disableTreeNodes(childItems) {\n    let i = 0;\n\n    while (i < childItems.length) {\n      let id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n      if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n        this.doDisableAction([id]);\n      }\n\n      i++;\n    }\n  }\n  /**\n   * Sets the child Item in selectedState while rendering the child node\n   */\n\n\n  setSelectionForChildNodes(nodes) {\n    let i;\n\n    for (i = 0; i < nodes.length; i++) {\n      let id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n\n      if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n        this.doSelectionAction();\n      }\n    }\n  }\n\n  ensureCheckNode(element) {\n    if (this.showCheckBox) {\n      this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n\n      if (this.autoCheck) {\n        this.ensureChildCheckState(element);\n        this.ensureParentCheckState(element);\n      }\n    }\n\n    this.currentLoadData = null;\n  }\n\n  getFields(mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return mapper;\n    } else {\n      return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  }\n\n  getChildFields(mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return this.getChildMapper(mapper);\n    } else {\n      return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  }\n\n  getChildMapper(mapper) {\n    return typeof mapper.child === 'string' || isNullOrUndefined(mapper.child) ? mapper : mapper.child;\n  }\n\n  getChildNodes(obj, parentId, isRoot = false) {\n    let childNodes;\n\n    if (isNullOrUndefined(obj)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      return this.getChildGroup(this.groupedData, parentId, isRoot);\n    } else {\n      if (typeof this.fields.child === 'string') {\n        for (let i = 0, objlen = obj.length; i < objlen; i++) {\n          let dataId = getValue(this.fields.id, obj[i]);\n\n          if (dataId && dataId.toString() === parentId) {\n            return getValue(this.fields.child, obj[i]);\n          } else if (!isNullOrUndefined(getValue(this.fields.child, obj[i]))) {\n            childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n\n            if (childNodes !== undefined) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return childNodes;\n  }\n\n  getChildGroup(data, parentId, isRoot) {\n    let childNodes;\n\n    if (isNullOrUndefined(data)) {\n      return childNodes;\n    }\n\n    for (let i = 0, objlen = data.length; i < objlen; i++) {\n      if (!isNullOrUndefined(data[i][0]) && !isNullOrUndefined(getValue(this.fields.parentID, data[i][0]))) {\n        if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n          return data[i];\n        }\n      } else if (isRoot) {\n        return data[i];\n      } else {\n        return [];\n      }\n    }\n\n    return childNodes;\n  }\n\n  renderSubChild(element, expandChild, loaded) {\n    if (expandChild) {\n      let cIcons = selectAll('.' + EXPANDABLE, element);\n\n      for (let i = 0, len = cIcons.length; i < len; i++) {\n        let icon = cIcons[i];\n\n        if (element.querySelector('.e-icons') !== cIcons[i]) {\n          let curLi = closest(icon, '.' + LISTITEM);\n          this.expandArgs = this.getExpandEvent(curLi, null);\n\n          if (loaded !== true) {\n            this.trigger('nodeExpanding', this.expandArgs);\n          }\n\n          this.renderChildNodes(curLi, expandChild, null, loaded);\n        }\n      }\n    }\n  }\n\n  toggleSelect(li, e, multiSelect) {\n    if (!li.classList.contains('e-disable')) {\n      if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {\n        this.unselectNode(li, e);\n      } else {\n        this.selectNode(li, e, multiSelect);\n      }\n    }\n  }\n\n  isActive(li) {\n    return li.classList.contains(ACTIVE) ? true : false;\n  }\n\n  selectNode(li, e, multiSelect) {\n    if (isNullOrUndefined(li) || !this.allowMultiSelection && this.isActive(li) && !isNullOrUndefined(e)) {\n      this.setFocusElement(li);\n      return;\n    }\n\n    let eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'select', e);\n      this.trigger('nodeSelecting', eventArgs, observedArgs => {\n        if (!observedArgs.cancel) {\n          this.nodeSelectAction(li, e, observedArgs, multiSelect);\n        }\n      });\n    } else {\n      this.nodeSelectAction(li, e, eventArgs, multiSelect);\n    }\n  }\n\n  nodeSelectAction(li, e, eventArgs, multiSelect) {\n    if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {\n      this.removeSelectAll();\n    }\n\n    if (this.allowMultiSelection && e && e.shiftKey) {\n      if (!this.startNode) {\n        this.startNode = li;\n      }\n\n      let startIndex = this.liList.indexOf(this.startNode);\n      let endIndex = this.liList.indexOf(li);\n\n      if (startIndex > endIndex) {\n        let temp = startIndex;\n        startIndex = endIndex;\n        endIndex = temp;\n      }\n\n      for (let i = startIndex; i <= endIndex; i++) {\n        let currNode = this.liList[i];\n\n        if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n          this.addSelect(currNode);\n        }\n      }\n    } else {\n      this.startNode = li;\n      this.addSelect(li);\n    }\n\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  }\n\n  unselectNode(li, e) {\n    let eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'un-select', e);\n      this.trigger('nodeSelecting', eventArgs, observedArgs => {\n        if (!observedArgs.cancel) {\n          this.nodeUnselectAction(li, observedArgs);\n        }\n      });\n    } else {\n      this.nodeUnselectAction(li, eventArgs);\n    }\n  }\n\n  nodeUnselectAction(li, eventArgs) {\n    this.removeSelect(li);\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  }\n\n  setFocusElement(li) {\n    if (!isNullOrUndefined(li)) {\n      let focusedNode = this.getFocusedNode();\n\n      if (focusedNode) {\n        removeClass([focusedNode], FOCUS);\n      }\n\n      addClass([li], FOCUS);\n      this.updateIdAttr(focusedNode, li);\n    }\n  }\n\n  addSelect(liEle) {\n    liEle.setAttribute('aria-selected', 'true');\n    addClass([liEle], ACTIVE);\n    let id = liEle.getAttribute('data-uid');\n\n    if (!isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {\n      this.selectedNodes.push(id);\n    }\n  }\n\n  removeSelect(liEle) {\n    if (this.allowMultiSelection) {\n      liEle.setAttribute('aria-selected', 'false');\n    } else {\n      liEle.removeAttribute('aria-selected');\n    }\n\n    removeClass([liEle], ACTIVE);\n    let index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.selectedNodes.splice(index, 1);\n    }\n  }\n\n  removeSelectAll() {\n    let selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n\n    for (let ele of selectedLI) {\n      if (this.allowMultiSelection) {\n        ele.setAttribute('aria-selected', 'false');\n      } else {\n        ele.removeAttribute('aria-selected');\n      }\n    }\n\n    removeClass(selectedLI, ACTIVE);\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n  }\n\n  getSelectEvent(currLi, action, e) {\n    let nodeData = this.getNodeData(currLi);\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNullOrUndefined(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData\n    };\n  }\n\n  setExpandOnType() {\n    this.expandOnType = this.expandOn === 'Auto' ? Browser.isDevice ? 'Click' : 'DblClick' : this.expandOn;\n  }\n\n  expandHandler(e) {\n    let target = e.originalEvent.target;\n\n    if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n      return;\n    } else {\n      this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n    }\n  }\n\n  expandCollapseAction(currLi, e) {\n    let icon = select('div.' + ICON, currLi);\n\n    if (!icon || icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      let classList$$1 = icon.classList;\n\n      if (classList$$1.contains(EXPANDABLE)) {\n        this.expandAction(currLi, icon, e);\n      } else if (classList$$1.contains(COLLAPSIBLE)) {\n        this.collapseNode(currLi, icon, e);\n      }\n    }\n  }\n\n  expandAction(currLi, icon, e, expandChild, callback) {\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    if (this.isLoaded && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeExpanding', this.expandArgs, observedArgs => {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n      });\n    } else {\n      this.nodeExpandAction(currLi, icon, expandChild, callback);\n    }\n  }\n\n  nodeExpandAction(currLi, icon, expandChild, callback) {\n    let ul = select('.' + PARENTITEM, currLi);\n\n    if (ul && ul.nodeName === 'UL') {\n      this.expandNode(currLi, icon);\n    } else {\n      this.isFirstRender = true;\n      this.renderChildNodes(currLi, expandChild, callback);\n      let liEles = selectAll('.' + LISTITEM, currLi);\n\n      for (let i = 0; i < liEles.length; i++) {\n        let id = this.getId(liEles[i]);\n\n        if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n          let icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n\n          if (!isNullOrUndefined(icon)) {\n            this.expandAction(liEles[i], icon, null);\n          }\n\n          this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n        }\n      }\n    }\n  }\n\n  keyActionHandler(e) {\n    let target = e.target;\n    let focusedNode = this.getFocusedNode();\n\n    if (target && target.classList.contains(INPUT)) {\n      let inpEle = target;\n\n      if (e.action === 'enter') {\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      } else if (e.action === 'escape') {\n        inpEle.value = this.oldText;\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n    let eventArgs = {\n      cancel: false,\n      event: e,\n      node: focusedNode\n    };\n    this.trigger('keyPress', eventArgs, observedArgs => {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            if (this.showCheckBox) {\n              this.checkNode(e);\n            }\n\n            break;\n\n          case 'moveRight':\n            this.openNode(this.enableRtl ? false : true, e);\n            break;\n\n          case 'moveLeft':\n            this.openNode(this.enableRtl ? true : false, e);\n            break;\n\n          case 'shiftDown':\n            this.shiftKeySelect(true, e);\n            break;\n\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n            this.navigateNode(true);\n            break;\n\n          case 'shiftUp':\n            this.shiftKeySelect(false, e);\n            break;\n\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n            this.navigateNode(false);\n            break;\n\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n            this.navigateRootNode(true);\n            break;\n\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n            this.navigateRootNode(false);\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n            this.toggleSelect(focusedNode, e);\n            break;\n\n          case 'f2':\n            if (this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n              this.createTextbox(focusedNode, e);\n            }\n\n            break;\n\n          case 'ctrlA':\n            if (this.allowMultiSelection) {\n              let sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', this.element);\n              this.selectGivenNodes(sNodes);\n            }\n\n            break;\n        }\n      }\n    });\n  }\n\n  navigateToFocus(isUp) {\n    let focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n    let pos = focusNode.getBoundingClientRect();\n    let parent = this.getScrollParent(this.element);\n\n    if (!isNullOrUndefined(parent)) {\n      let parentPos = parent.getBoundingClientRect();\n\n      if (pos.bottom > parentPos.bottom) {\n        parent.scrollTop += pos.bottom - parentPos.bottom;\n      } else if (pos.top < parentPos.top) {\n        parent.scrollTop -= parentPos.top - pos.top;\n      }\n    }\n\n    let isVisible$$1 = this.isVisibleInViewport(focusNode);\n\n    if (!isVisible$$1) {\n      focusNode.scrollIntoView(isUp);\n    }\n  }\n\n  isVisibleInViewport(txtWrap) {\n    let pos = txtWrap.getBoundingClientRect();\n    return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);\n  }\n\n  getScrollParent(node) {\n    if (isNullOrUndefined(node)) {\n      return null;\n    }\n\n    return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);\n  }\n\n  shiftKeySelect(isTowards, e) {\n    if (this.allowMultiSelection) {\n      let focusedNode = this.getFocusedNode();\n      let nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n      this.removeHover();\n      this.setFocusElement(nextNode);\n      this.toggleSelect(nextNode, e, false);\n      this.navigateToFocus(!isTowards);\n    } else {\n      this.navigateNode(isTowards);\n    }\n  }\n\n  checkNode(e) {\n    let focusedNode = this.getFocusedNode();\n    let checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n    let isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n\n    if (!focusedNode.classList.contains('e-disable')) {\n      if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n        this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n      }\n    }\n  }\n\n  validateCheckNode(checkWrap, isCheck, li, e) {\n    let currLi = closest(checkWrap, '.' + LISTITEM);\n    this.checkActionNodes = [];\n    let ariaState = !isCheck ? 'true' : 'false';\n\n    if (!isNullOrUndefined(ariaState)) {\n      checkWrap.setAttribute('aria-checked', ariaState);\n    }\n\n    let eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n    this.trigger('nodeChecking', eventArgs, observedArgs => {\n      if (!observedArgs.cancel) {\n        this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n      }\n    });\n  }\n\n  nodeCheckingAction(checkWrap, isCheck, li, eventArgs, e) {\n    if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n      this.checkedElement.push(li.getAttribute('data-uid'));\n\n      if (this.autoCheck) {\n        let child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n        child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n      }\n    }\n\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n\n    if (this.autoCheck) {\n      this.ensureChildCheckState(li);\n      this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n      let doCheck;\n\n      if (eventArgs.action === 'check') {\n        doCheck = true;\n      } else if (eventArgs.action === 'uncheck') {\n        doCheck = false;\n      }\n\n      this.ensureStateChange(li, doCheck);\n    }\n\n    this.nodeCheckedEvent(checkWrap, isCheck, e);\n  }\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM\n   */\n\n\n  ensureStateChange(li, doCheck) {\n    let childElement = select('.' + PARENTITEM, li);\n    let parentIndex = li.getAttribute('data-uid');\n    let mapper = this.fields;\n\n    if (this.dataType === 1 && this.autoCheck) {\n      let resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n\n      for (let i = 0; i < resultData.length; i++) {\n        let resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n        let isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n\n        if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n          this.checkedNodes.push(resultId);\n          let childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n\n          if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n          }\n\n          if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {\n            let childNodes = this.getChildNodes(this.treeData, resultId);\n            this.getChildItems(childNodes, doCheck);\n\n            if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n            }\n          }\n        } else {\n          let childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n        }\n      }\n    } else if (this.dataType === 1 && !this.autoCheck) {\n      if (!doCheck) {\n        let checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (let i = 0; i < checkedData.length; i++) {\n          let id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(id) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n\n        this.checkedNodes = [];\n      } else {\n        for (let i = 0; i < this.treeData.length; i++) {\n          let checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(checkedId) === -1) {\n            this.checkedNodes.push(checkedId);\n          }\n        }\n      }\n    } else {\n      let childItems = this.getChildNodes(this.treeData, parentIndex);\n\n      if (childItems) {\n        this.childStateChange(childItems, parentIndex, childElement, doCheck);\n      }\n    }\n  }\n\n  getChildItems(childItems, doCheck) {\n    for (let i = 0; i < childItems.length; i++) {\n      let childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n      let childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n      }\n\n      if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n        this.checkedNodes.push(childId);\n      }\n\n      if (childIsCheck === 'true' && !doCheck) {\n        this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n      }\n\n      let subChildItems = this.getChildNodes(this.treeData, childId);\n\n      if (subChildItems.length > 0) {\n        this.getChildItems(subChildItems, doCheck);\n      }\n    }\n  }\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n   */\n\n\n  childStateChange(childItems, parent, childElement, doCheck) {\n    for (let i = 0; i < childItems.length; i++) {\n      let checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n      let isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.autoCheck) {\n        if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n          this.checkedNodes.push(checkedChild);\n\n          if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          }\n        }\n      } else if (!this.autoCheck) {\n        if (!doCheck) {\n          if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          this.checkedNodes = [];\n        } else {\n          if (this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n      }\n\n      let subChild = this.getChildNodes([childItems[i]], checkedChild);\n\n      if (subChild) {\n        this.childStateChange(subChild, parent, childElement, doCheck);\n      }\n    }\n  } //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n\n\n  allCheckNode(child, newCheck, checked, childCheck, validateCheck) {\n    if (child) {\n      for (let length = 0; length < child.length; length++) {\n        let childId = getValue(this.fields.id, child[length]);\n        let check = this.element.querySelector('[data-uid=\"' + childId + '\"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n\n        if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n          if (check === null && !isNullOrUndefined(child[length][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {\n            child[length][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;\n            childCheck = child[length][this.fields.isChecked] !== false || checked === 2 ? 0 : null;\n          }\n        } //Pushes child checked node done thro' UI interaction\n\n\n        if (newCheck.indexOf(childId.toString()) === -1 && isNullOrUndefined(checked)) {\n          newCheck.push(childId.toString());\n        }\n\n        let hierChildId = getValue(this.fields.child.toString(), child[length]); //Gets if any next level children are available for child nodes\n\n        if (getValue(this.fields.hasChildren, child[length]) === true || hierChildId) {\n          let id = getValue(this.fields.id, child[length]);\n          let childId;\n\n          if (this.dataType === 1) {\n            childId = this.getChildNodes(this.treeData, id.toString());\n          } else {\n            childId = hierChildId;\n          }\n\n          if (childId) {\n            isNullOrUndefined(validateCheck) ? this.allCheckNode(childId, newCheck, checked, childCheck) : this.allCheckNode(childId, newCheck, checked, childCheck, validateCheck);\n            childCheck = null;\n          }\n        }\n\n        childCheck = null;\n      }\n    }\n  }\n\n  openNode(toBeOpened, e) {\n    let focusedNode = this.getFocusedNode();\n    let icon = select('div.' + ICON, focusedNode);\n\n    if (toBeOpened) {\n      if (!icon) {\n        return;\n      } else if (icon.classList.contains(EXPANDABLE)) {\n        this.expandAction(focusedNode, icon, e);\n      } else {\n        this.focusNextNode(focusedNode, true);\n      }\n    } else {\n      if (icon && icon.classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(focusedNode, icon, e);\n      } else {\n        let parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n\n        if (!parentLi) {\n          return;\n        } else {\n          if (!parentLi.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, parentLi);\n            this.navigateToFocus(true);\n          }\n        }\n      }\n    }\n  }\n\n  navigateNode(isTowards) {\n    let focusedNode = this.getFocusedNode();\n    this.focusNextNode(focusedNode, isTowards);\n  }\n\n  navigateRootNode(isBackwards) {\n    let focusedNode = this.getFocusedNode();\n    let rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n\n    if (!rootNode.classList.contains('e-disable')) {\n      this.setFocus(focusedNode, rootNode);\n      this.navigateToFocus(isBackwards);\n    }\n  }\n\n  getFocusedNode() {\n    let selectedItem;\n    let fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n\n    if (isNullOrUndefined(fNode)) {\n      selectedItem = select('.' + LISTITEM, this.element);\n    }\n\n    return isNullOrUndefined(fNode) ? isNullOrUndefined(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;\n  }\n\n  focusNextNode(li, isTowards) {\n    let nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n    this.setFocus(li, nextNode);\n    this.navigateToFocus(!isTowards);\n\n    if (nextNode.classList.contains('e-disable')) {\n      let lastChild = nextNode.lastChild;\n\n      if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n        this.focusNextNode(nextNode, true);\n      } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n        this.focusNextNode(nextNode, false);\n      } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\n        this.focusNextNode(nextNode, false);\n      } else {\n        this.focusNextNode(nextNode, isTowards);\n      }\n    }\n  }\n\n  getNextNode(li) {\n    let index = this.liList.indexOf(li);\n    let nextNode;\n\n    do {\n      index++;\n      nextNode = this.liList[index];\n\n      if (isNullOrUndefined(nextNode)) {\n        return li;\n      }\n    } while (!isVisible(nextNode));\n\n    return nextNode;\n  }\n\n  getPrevNode(li) {\n    let index = this.liList.indexOf(li);\n    let prevNode;\n\n    do {\n      index--;\n      prevNode = this.liList[index];\n\n      if (isNullOrUndefined(prevNode)) {\n        return li;\n      }\n    } while (!isVisible(prevNode));\n\n    return prevNode;\n  }\n\n  getRootNode() {\n    let index = 0;\n    let rootNode;\n\n    do {\n      rootNode = this.liList[index];\n      index++;\n    } while (!isVisible(rootNode));\n\n    return rootNode;\n  }\n\n  getEndNode() {\n    let index = this.liList.length - 1;\n    let endNode;\n\n    do {\n      endNode = this.liList[index];\n      index--;\n    } while (!isVisible(endNode));\n\n    return endNode;\n  }\n\n  setFocus(preNode, nextNode) {\n    removeClass([preNode], [HOVER, FOCUS]);\n\n    if (!nextNode.classList.contains('e-disable')) {\n      addClass([nextNode], [HOVER, FOCUS]);\n      this.updateIdAttr(preNode, nextNode);\n    }\n  }\n\n  updateIdAttr(preNode, nextNode) {\n    this.element.removeAttribute('aria-activedescendant');\n\n    if (preNode) {\n      preNode.removeAttribute('id');\n    }\n\n    nextNode.setAttribute('id', this.element.id + '_active');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n  }\n\n  focusIn() {\n    if (!this.mouseDownStatus) {\n      addClass([this.getFocusedNode()], HOVER);\n    }\n\n    this.mouseDownStatus = false;\n  }\n\n  focusOut() {\n    removeClass([this.getFocusedNode()], HOVER);\n  }\n\n  onMouseOver(e) {\n    let target = e.target;\n    let classList$$1 = target.classList;\n    let currentLi = closest(target, '.' + LISTITEM);\n\n    if (!currentLi || classList$$1.contains(PARENTITEM) || classList$$1.contains(LISTITEM)) {\n      this.removeHover();\n      return;\n    } else {\n      if (currentLi && !currentLi.classList.contains('e-disable')) {\n        this.setHover(currentLi);\n      }\n    }\n  }\n\n  setHover(li) {\n    if (!li.classList.contains(HOVER)) {\n      this.removeHover();\n      addClass([li], HOVER);\n    }\n  }\n\n  onMouseLeave(e) {\n    this.removeHover();\n  }\n\n  removeHover() {\n    let hoveredNode = selectAll('.' + HOVER, this.element);\n\n    if (hoveredNode && hoveredNode.length) {\n      removeClass(hoveredNode, HOVER);\n    }\n  }\n\n  getNodeData(currLi, fromDS) {\n    if (!isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM) && !isNullOrUndefined(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n      let id = currLi.getAttribute('data-uid');\n      let text = this.getText(currLi, fromDS);\n      let pNode = closest(currLi.parentNode, '.' + LISTITEM);\n      let pid = pNode ? pNode.getAttribute('data-uid') : null;\n      let selected = currLi.classList.contains(ACTIVE);\n      let expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;\n      let hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (select('.' + EXPANDABLE, currLi) || select('.' + COLLAPSIBLE, currLi)) != null ? true : false;\n      let checked = null;\n\n      if (this.showCheckBox) {\n        checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n      }\n\n      return {\n        id: id,\n        text: text,\n        parentID: pid,\n        selected: selected,\n        expanded: expanded,\n        isChecked: checked,\n        hasChildren: hasChildren\n      };\n    }\n\n    return {\n      id: '',\n      text: '',\n      parentID: '',\n      selected: false,\n      expanded: false,\n      isChecked: '',\n      hasChildren: false\n    };\n  }\n\n  getText(currLi, fromDS) {\n    if (fromDS) {\n      let nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n      let level = parseFloat(currLi.getAttribute('aria-level'));\n      let nodeFields = this.getFields(this.fields, level, 1);\n      return getValue(nodeFields.text, nodeData);\n    }\n\n    return select('.' + LISTTEXT, currLi).textContent;\n  }\n\n  getExpandEvent(currLi, e) {\n    let nodeData = this.getNodeData(currLi);\n    return {\n      cancel: false,\n      isInteracted: isNullOrUndefined(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData,\n      event: e\n    };\n  }\n\n  renderNodeTemplate(data, textEle, dataId) {\n    let tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle, this.root);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, textEle);\n    }\n  }\n\n  destroyTemplate(liEle) {\n    this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n  }\n\n  reRenderNodes() {\n    this.updateListProp(this.fields);\n\n    if (Browser.isIE) {\n      this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    } else {\n      this.element.innerHTML = '';\n    }\n\n    if (!isNullOrUndefined(this.nodeTemplateFn)) {\n      this.clearTemplate();\n    }\n\n    this.setTouchClass();\n    this.setProperties({\n      selectedNodes: [],\n      checkedNodes: [],\n      expandedNodes: []\n    }, true);\n    this.checkedElement = [];\n    this.isLoaded = false;\n    this.setDataBinding(true);\n  }\n\n  setCssClass(oldClass, newClass) {\n    if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n      removeClass([this.element], oldClass.split(' '));\n    }\n\n    if (!isNullOrUndefined(newClass) && newClass !== '') {\n      addClass([this.element], newClass.split(' '));\n    }\n  }\n\n  editingHandler(e) {\n    let target = e.target;\n\n    if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n      return;\n    } else {\n      let liEle = closest(target, '.' + LISTITEM);\n      this.createTextbox(liEle, e);\n    }\n  }\n\n  createTextbox(liEle, e) {\n    let oldInpEle = select('.' + TREEINPUT, this.element);\n\n    if (oldInpEle) {\n      oldInpEle.blur();\n    }\n\n    let textEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    let innerEle = this.createElement('input', {\n      className: TREEINPUT,\n      attrs: {\n        value: this.oldText\n      }\n    });\n    let eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n    this.trigger('nodeEditing', eventArgs, observedArgs => {\n      if (!observedArgs.cancel) {\n        let inpWidth = textEle.offsetWidth + 5;\n        let style = 'width:' + inpWidth + 'px';\n        addClass([liEle], EDITING);\n\n        if (!isNullOrUndefined(this.nodeTemplateFn)) {\n          this.destroyTemplate(liEle);\n        }\n\n        textEle.innerHTML = eventArgs.innerHtml;\n        let inpEle = select('.' + TREEINPUT, textEle);\n        this.inputObj = Input.createInput({\n          element: inpEle,\n          properties: {\n            enableRtl: this.enableRtl\n          }\n        }, this.createElement);\n        this.inputObj.container.setAttribute('style', style);\n        inpEle.focus();\n        let inputEle = inpEle;\n        inputEle.setSelectionRange(0, inputEle.value.length);\n        this.wireInputEvents(inpEle);\n      }\n    });\n  }\n\n  updateOldText(liEle) {\n    let id = liEle.getAttribute('data-uid');\n    this.editData = this.getNodeObject(id);\n    let level = parseFloat(liEle.getAttribute('aria-level'));\n    this.editFields = this.getFields(this.fields, level, 1);\n    this.oldText = getValue(this.editFields.text, this.editData);\n  }\n\n  inputFocusOut(e) {\n    if (!select('.' + TREEINPUT, this.element)) {\n      return;\n    }\n\n    let target = e.target;\n    let newText = target.value;\n    let txtEle = closest(target, '.' + LISTTEXT);\n    let liEle = closest(target, '.' + LISTITEM);\n    detach(this.inputObj.container);\n\n    if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n      this.crudOperation('update', null, liEle, newText, null, null, true);\n    } else {\n      this.appendNewText(liEle, txtEle, newText, true);\n    }\n  }\n\n  appendNewText(liEle, txtEle, newText, isInput) {\n    let eventArgs = this.getEditEvent(liEle, newText, null);\n    this.trigger('nodeEdited', eventArgs, observedArgs => {\n      newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n      this.updateText(liEle, txtEle, newText, isInput);\n\n      if (observedArgs.oldText !== newText) {\n        this.triggerEvent();\n      }\n    });\n  }\n\n  updateText(liEle, txtEle, newText, isInput) {\n    let newData = setValue(this.editFields.text, newText, this.editData);\n\n    if (!isNullOrUndefined(this.nodeTemplateFn)) {\n      txtEle.innerText = '';\n      let dataId = liEle.getAttribute('data-uid');\n      this.renderNodeTemplate(newData, txtEle, dataId);\n      this.renderReactTemplates();\n    } else {\n      txtEle.innerText = newText;\n    }\n\n    if (isInput) {\n      removeClass([liEle], EDITING);\n      txtEle.focus();\n    }\n\n    if (this.allowTextWrap) {\n      this.calculateWrap(liEle);\n    }\n  }\n\n  getElement(ele) {\n    if (isNullOrUndefined(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n    } else if (typeof ele === 'object') {\n      return getElement(ele);\n    } else {\n      return null;\n    }\n  }\n\n  getId(ele) {\n    if (isNullOrUndefined(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return ele;\n    } else if (typeof ele === 'object') {\n      return getElement(ele).getAttribute('data-uid');\n    } else {\n      return null;\n    }\n  }\n\n  getEditEvent(liEle, newText, inpEle) {\n    let data = this.getNodeData(liEle);\n    return {\n      cancel: false,\n      newText: newText,\n      node: liEle,\n      nodeData: data,\n      oldText: this.oldText,\n      innerHtml: inpEle\n    };\n  }\n\n  getNodeObject(id) {\n    let childNodes;\n\n    if (isNullOrUndefined(id)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      for (let i = 0, objlen = this.treeData.length; i < objlen; i++) {\n        let dataId = getValue(this.fields.id, this.treeData[i]);\n\n        if (!isNullOrUndefined(this.treeData[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {\n          return this.treeData[i];\n        }\n      }\n    } else {\n      return this.getChildNodeObject(this.treeData, this.fields, id);\n    }\n\n    return childNodes;\n  }\n\n  getChildNodeObject(obj, mapper, id) {\n    let newList;\n\n    if (isNullOrUndefined(obj)) {\n      return newList;\n    }\n\n    for (let i = 0, objlen = obj.length; i < objlen; i++) {\n      let dataId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && dataId && dataId.toString() === id) {\n        return obj[i];\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        let childData = getValue(mapper.child, obj[i]);\n        newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        let child = 'child';\n        newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newList;\n  }\n\n  setDragAndDrop(toBind) {\n    if (toBind && !this.disabled) {\n      this.initializeDrag();\n    } else {\n      this.destroyDrag();\n    }\n  }\n\n  initializeDrag() {\n    let virtualEle;\n    let proxy = this;\n    this.dragObj = new Draggable(this.element, {\n      enableTailMode: true,\n      enableAutoScroll: true,\n      dragArea: this.dragArea,\n      dragTarget: '.' + TEXTWRAP,\n      helper: e => {\n        this.dragTarget = e.sender.target;\n        let dragRoot = closest(this.dragTarget, '.' + ROOT);\n        let dragWrap = closest(this.dragTarget, '.' + TEXTWRAP);\n        this.dragLi = closest(this.dragTarget, '.' + LISTITEM);\n\n        if (this.fullRowSelect && !dragWrap && this.dragTarget.classList.contains(FULLROW)) {\n          dragWrap = this.dragTarget.nextElementSibling;\n        }\n\n        if (!this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || this.dragTarget.classList.contains(ROOT) || this.dragTarget.classList.contains(PARENTITEM) || this.dragTarget.classList.contains(LISTITEM) || this.dragLi.classList.contains('e-disable')) {\n          return false;\n        }\n\n        let cloneEle = dragWrap.cloneNode(true);\n\n        if (isNullOrUndefined(select('div.' + ICON, cloneEle))) {\n          let icon = proxy.createElement('div', {\n            className: ICON + ' ' + EXPANDABLE\n          });\n          cloneEle.insertBefore(icon, cloneEle.children[0]);\n        }\n\n        let cssClass = DRAGITEM + ' ' + ROOT + ' ' + this.cssClass + ' ' + (this.enableRtl ? RTL$1 : '');\n        virtualEle = proxy.createElement('div', {\n          className: cssClass\n        });\n        virtualEle.appendChild(cloneEle);\n        let nLen = this.selectedNodes.length;\n\n        if (nLen > 1 && this.allowMultiSelection && this.dragLi.classList.contains(ACTIVE)) {\n          let cNode = proxy.createElement('span', {\n            className: DROPCOUNT,\n            innerHTML: '' + nLen\n          });\n          virtualEle.appendChild(cNode);\n        }\n\n        document.body.appendChild(virtualEle);\n        document.body.style.cursor = '';\n        this.dragData = this.getNodeData(this.dragLi);\n        return virtualEle;\n      },\n      dragStart: e => {\n        addClass([this.element], DRAGGING);\n        let listItem = closest(e.target, '.e-list-item');\n        let level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        let eventArgs = this.getDragEvent(e.event, this, null, e.target, null, virtualEle, level);\n\n        if (eventArgs.draggedNode.classList.contains(EDITING)) {\n          this.dragObj.intDestroy(e.event);\n          this.dragCancelAction(virtualEle);\n        } else {\n          this.trigger('nodeDragStart', eventArgs, observedArgs => {\n            if (observedArgs.cancel) {\n              this.dragObj.intDestroy(e.event);\n              this.dragCancelAction(virtualEle);\n            } else {\n              this.dragStartAction = true;\n            }\n          });\n        }\n      },\n      drag: e => {\n        this.dragObj.setProperties({\n          cursorAt: {\n            top: !isNullOrUndefined(e.event.targetTouches) || Browser.isDevice ? 60 : -20\n          }\n        });\n        this.dragAction(e, virtualEle);\n      },\n      dragStop: e => {\n        removeClass([this.element], DRAGGING);\n        this.removeVirtualEle();\n        let dropTarget = e.target;\n        let preventTargetExpand = false;\n        let dropRoot = closest(dropTarget, '.' + DROPPABLE);\n\n        if (!dropTarget || !dropRoot) {\n          detach(e.helper);\n          document.body.style.cursor = '';\n        }\n\n        let listItem = closest(dropTarget, '.e-list-item');\n        let level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        let eventArgs = this.getDragEvent(e.event, this, dropTarget, dropTarget, null, e.helper, level);\n        eventArgs.preventTargetExpand = preventTargetExpand;\n        this.trigger('nodeDragStop', eventArgs, observedArgs => {\n          this.dragParent = observedArgs.draggedParentNode;\n          this.preventExpand = observedArgs.preventTargetExpand;\n\n          if (observedArgs.cancel) {\n            if (e.helper.parentNode) {\n              detach(e.helper);\n            }\n\n            document.body.style.cursor = '';\n          }\n\n          this.dragStartAction = false;\n        });\n      }\n    });\n    this.dropObj = new Droppable(this.element, {\n      out: e => {\n        if (!isNullOrUndefined(e) && !e.target.classList.contains(SIBLING)) {\n          document.body.style.cursor = 'not-allowed';\n        }\n      },\n      over: e => {\n        document.body.style.cursor = '';\n      },\n      drop: e => {\n        this.dropAction(e);\n      }\n    });\n  }\n\n  dragCancelAction(virtualEle) {\n    detach(virtualEle);\n    removeClass([this.element], DRAGGING);\n    this.dragStartAction = false;\n  }\n\n  dragAction(e, virtualEle) {\n    let dropRoot = closest(e.target, '.' + DROPPABLE);\n    let dropWrap = closest(e.target, '.' + TEXTWRAP);\n    let icon = select('div.' + ICON, virtualEle);\n    removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n    this.removeVirtualEle();\n    document.body.style.cursor = '';\n    let classList$$1 = e.target.classList;\n\n    if (this.fullRowSelect && !dropWrap && !isNullOrUndefined(classList$$1) && classList$$1.contains(FULLROW)) {\n      dropWrap = e.target.nextElementSibling;\n    }\n\n    if (dropRoot) {\n      let dropLi = closest(e.target, '.' + LISTITEM);\n      let checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n      let collapse = closest(e.target, '.' + COLLAPSIBLE);\n      let expand = closest(e.target, '.' + EXPANDABLE);\n\n      if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        if (this.hasTemplate && dropLi) {\n          let templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n\n          if (e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            let index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (e && !expand && !collapse && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            let index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        } else {\n          if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            let index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            let index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        }\n      } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        addClass([icon], DROPNEXT);\n        this.renderVirtualEle(e);\n      } else if (e.target.classList.contains(SIBLING)) {\n        addClass([icon], DROPNEXT);\n      } else {\n        addClass([icon], DROPOUT);\n      }\n    } else {\n      addClass([icon], NODROP);\n      document.body.style.cursor = 'not-allowed';\n    }\n\n    let listItem = closest(e.target, '.e-list-item');\n    let level;\n\n    if (listItem) {\n      level = parseInt(listItem.getAttribute('aria-level'), 10);\n    }\n\n    let eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n\n    if (eventArgs.dropIndicator) {\n      removeClass([icon], eventArgs.dropIndicator);\n    }\n\n    this.trigger('nodeDragging', eventArgs);\n\n    if (eventArgs.dropIndicator) {\n      addClass([icon], eventArgs.dropIndicator);\n    }\n  }\n\n  appendIndicator(dropLi, icon, index) {\n    addClass([icon], DROPNEXT);\n    let virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    dropLi.insertBefore(virEle, dropLi.children[index]);\n  }\n  /* eslint-disable */\n\n\n  dropAction(e) {\n    let offsetY = e.event.offsetY;\n    let dropTarget = e.target;\n    let dragObj;\n    let level;\n    let drop = false;\n    let dragInstance;\n    dragInstance = e.dragData.draggable;\n\n    for (let i = 0; i < dragInstance.ej2_instances.length; i++) {\n      if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n        dragObj = dragInstance.ej2_instances[i];\n        break;\n      }\n    }\n\n    if (dragObj && dragObj.dragTarget) {\n      let dragTarget = dragObj.dragTarget;\n      let dragLi = closest(dragTarget, '.' + LISTITEM);\n      let dropLi = closest(dropTarget, '.' + LISTITEM);\n\n      if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n        dropLi = dropTarget.firstElementChild;\n      }\n\n      detach(e.droppedElement);\n      document.body.style.cursor = '';\n\n      if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        if (this.fields.dataSource instanceof DataManager === false) {\n          this.preventExpand = false;\n        }\n\n        return;\n      }\n\n      if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n        let sNodes = selectAll('.' + ACTIVE, dragObj.element);\n\n        if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n          for (let i = sNodes.length - 1; i >= 0; i--) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        } else {\n          for (let i = 0; i < sNodes.length; i++) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        }\n      } else {\n        this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n      }\n\n      level = parseInt(dragLi.getAttribute('aria-level'), 10);\n      drop = true;\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n\n    if (dragObj.element.id !== this.element.id) {\n      dragObj.triggerEvent();\n    }\n\n    this.triggerEvent();\n  }\n\n  appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n    let checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n    let collapse = closest(e.target, '.' + COLLAPSIBLE);\n    let expand = closest(e.target, '.' + EXPANDABLE);\n\n    if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {\n      if (dropTarget.nodeName === 'LI') {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n        if (dropTarget.firstElementChild.nodeName === 'UL') {\n          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n        }\n      } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else {\n        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n      }\n    } else {\n      this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n    }\n  }\n\n  dropAsSiblingNode(dragLi, dropLi, e, dragObj) {\n    let dropUl = closest(dropLi, '.' + PARENTITEM);\n    let dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    let dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    let pre;\n\n    if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      if (e.event.offsetY < 5 || e.event.offsetX < 3) {\n        pre = true;\n      } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {\n        pre = false;\n      }\n    }\n\n    if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      let target = e.target.closest('li');\n      dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n    } else {\n      dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n    }\n\n    this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  }\n\n  dropAsChildNode(dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n    let dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    let dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    let dropParentUl = closest(dropLi, '.' + PARENTITEM);\n    let templateTarget;\n\n    if (e && e.target) {\n      templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n    }\n\n    if (e && pos < 7 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi);\n      this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n    } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck && !this.hasTemplate) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else {\n      let dropUl = this.expandParent(dropLi);\n      let childLi = dropUl.childNodes[index];\n      dropUl.insertBefore(dragLi, childLi);\n      this.moveData(dragLi, childLi, dropUl, true, dragObj);\n    }\n\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  }\n\n  moveData(dragLi, dropLi, dropUl, pre, dragObj) {\n    let dropParentLi = closest(dropUl, '.' + LISTITEM);\n    let id = this.getId(dragLi);\n    let removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n    let refId = this.getId(dropLi);\n    let index = this.getDataPos(this.treeData, this.fields, refId);\n    let parentId = this.getId(dropParentLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n      let pos = isNullOrUndefined(index) ? this.treeData.length : pre ? index : index + 1;\n\n      if (isNullOrUndefined(parentId) && !this.hasPid) {\n        delete removedData[0][this.fields.parentID];\n      } else {\n        let currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n        setValue(this.fields.parentID, currPid, removedData[0]);\n      }\n\n      this.treeData.splice(pos, 0, removedData[0]);\n\n      if (dragObj.element.id !== this.element.id) {\n        let childData = dragObj.removeChildNodes(id);\n        pos++;\n\n        for (let i = 0, len = childData.length; i < len; i++) {\n          this.treeData.splice(pos, 0, childData[i]);\n          pos++;\n        }\n\n        dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n    }\n  }\n\n  expandParent(dropLi) {\n    let dropIcon = select('div.' + ICON, dropLi);\n\n    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n      this.expandAction(dropLi, dropIcon, null);\n    }\n\n    let dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (this.preventExpand === true && !dropUl && dropIcon) {\n      this.renderChildNodes(dropLi);\n    }\n\n    dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (!isNullOrUndefined(dropUl) && this.preventExpand === true) {\n      dropUl.style.display = 'none';\n    }\n\n    if (!isNullOrUndefined(dropUl) && this.preventExpand === false) {\n      dropUl.style.display = 'block';\n    }\n\n    if (isNullOrUndefined(dropUl) && this.preventExpand === true) {\n      if (isNullOrUndefined(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      let icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        icon.classList.add('e-icon-expandable');\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n\n      if (icon) {\n        removeClass([icon], COLLAPSIBLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      dropLi.setAttribute('aria-expanded', 'false');\n      dropUl.style.display = 'none';\n    }\n\n    if (isNullOrUndefined(dropUl)) {\n      this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n\n      if (isNullOrUndefined(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n      }\n\n      let icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        removeClass([icon], EXPANDABLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n        icon = select('div.' + ICON, dropLi);\n        removeClass([icon], EXPANDABLE);\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n      this.addExpand(dropLi);\n      this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n    }\n\n    return dropUl;\n  }\n\n  updateElement(dragParentUl, dragParentLi) {\n    if (dragParentLi && dragParentUl.childElementCount === 0) {\n      let dragIcon = select('div.' + ICON, dragParentLi);\n      detach(dragParentUl);\n      detach(dragIcon);\n      let parentId = this.getId(dragParentLi);\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n      this.removeExpand(dragParentLi, true);\n    }\n  }\n\n  updateAriaLevel(dragLi) {\n    let level = this.parents(dragLi, '.' + PARENTITEM).length;\n    dragLi.setAttribute('aria-level', '' + level);\n    this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n  }\n\n  updateChildAriaLevel(element, level) {\n    if (!isNullOrUndefined(element)) {\n      let cNodes = element.childNodes;\n\n      for (let i = 0, len = cNodes.length; i < len; i++) {\n        let liEle = cNodes[i];\n        liEle.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n      }\n    }\n  }\n\n  renderVirtualEle(e) {\n    let pre;\n\n    if (e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    }\n\n    let virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    let index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;\n    e.target.insertBefore(virEle, e.target.children[index]);\n  }\n\n  removeVirtualEle() {\n    let sibEle = select('.' + SIBLING);\n\n    if (sibEle) {\n      detach(sibEle);\n    }\n  }\n\n  destroyDrag() {\n    if (this.dragObj && this.dropObj) {\n      this.dragObj.destroy();\n      this.dropObj.destroy();\n    }\n  }\n\n  getDragEvent(event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n    let dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n    let dropData = dropLi ? this.getNodeData(dropLi) : null;\n    let draggedNode = obj ? obj.dragLi : dragNode;\n    let draggedNodeData = obj ? obj.dragData : null;\n    let newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n    let dragLiParent = obj.dragLi.parentElement;\n    let dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n    let targetParent = null;\n    let indexValue = null;\n    let iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n    let iconClass = null;\n    let node = drop === true ? draggedNode : dropLi;\n    let index = node ? closest(node, '.e-list-parent') : null;\n    let i = 0;\n    let position = null;\n    dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, '.' + ROOT) : dragParent;\n    dragParent = drop === true ? this.dragParent : dragParent;\n\n    if (cloneEle) {\n      while (i < 4) {\n        if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n          iconClass = iconCss[i];\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    if (index) {\n      let dropTar = 0;\n\n      for (i = 0; i < index.childElementCount; i++) {\n        dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;\n\n        if (drop !== true && index.children[i].classList.contains('e-hover')) {\n          indexValue = event.offsetY >= 23 ? i + 1 : i;\n          break;\n        } else if (index.children[i] === node) {\n          indexValue = event.offsetY >= 23 ? i : i;\n          break;\n        }\n      }\n\n      indexValue = dropTar !== 0 ? --indexValue : indexValue;\n      position = iconClass == \"e-drop-in\" ? \"Inside\" : event.offsetY < 7 ? \"Before\" : \"After\";\n    }\n\n    if (dropTarget) {\n      if (newParent.length === 0) {\n        targetParent = null;\n      } else if (dropTarget.classList.contains(LISTITEM)) {\n        targetParent = newParent[0];\n      } else {\n        targetParent = newParent[1];\n      }\n    }\n\n    if (dropLi === draggedNode) {\n      targetParent = dropLi;\n    }\n\n    if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n      targetParent = dropLi;\n\n      if (drop !== true) {\n        level = ++level;\n        let parent = targetParent ? select('.e-list-parent', targetParent) : null;\n        indexValue = parent ? parent.children.length : 0;\n\n        if (!(this.fields.dataSource instanceof DataManager) && parent === null && targetParent) {\n          let parent = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n          indexValue = parent ? parent.length : 0;\n        }\n      }\n    }\n\n    return {\n      cancel: false,\n      clonedNode: cloneEle,\n      event: event,\n      draggedNode: draggedNode,\n      draggedNodeData: draggedNodeData,\n      droppedNode: dropLi,\n      droppedNodeData: dropData,\n      dropIndex: indexValue,\n      dropLevel: level,\n      draggedParentNode: dragParent,\n      dropTarget: targetParent,\n      dropIndicator: iconClass,\n      target: target,\n      position: position\n    };\n  }\n\n  addFullRow(toAdd) {\n    let len = this.liList.length;\n\n    if (toAdd) {\n      for (let i = 0; i < len; i++) {\n        this.createFullRow(this.liList[i]);\n      }\n    } else {\n      for (let i = 0; i < len; i++) {\n        let rowDiv = select('.' + FULLROW, this.liList[i]);\n        detach(rowDiv);\n      }\n    }\n  }\n\n  createFullRow(item) {\n    let rowDiv = this.createElement('div', {\n      className: FULLROW\n    });\n    item.insertBefore(rowDiv, item.childNodes[0]);\n  }\n\n  addMultiSelect(toAdd) {\n    if (toAdd) {\n      let liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n\n      for (let ele of liEles) {\n        ele.setAttribute('aria-selected', 'false');\n      }\n    } else {\n      let liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n\n      for (let ele of liEles) {\n        ele.removeAttribute('aria-selected');\n      }\n    }\n  }\n\n  collapseByLevel(element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNullOrUndefined(element)) {\n      let cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (let i = 0, len = cNodes.length; i < len; i++) {\n        let liEle = cNodes[i];\n        let icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNullOrUndefined(icon)) {\n          this.collapseNode(liEle, icon, null);\n        }\n\n        this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  }\n\n  collapseAllNodes(excludeHiddenNodes) {\n    let cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n\n    for (let i = 0, len = cIcons.length; i < len; i++) {\n      let icon = cIcons[i];\n      let liEle = closest(icon, '.' + LISTITEM);\n      this.collapseNode(liEle, icon, null);\n    }\n  }\n\n  expandByLevel(element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNullOrUndefined(element)) {\n      let eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (let i = 0, len = eNodes.length; i < len; i++) {\n        let liEle = eNodes[i];\n        let icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNullOrUndefined(icon)) {\n          this.expandAction(liEle, icon, null);\n        }\n\n        this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  }\n\n  expandAllNodes(excludeHiddenNodes) {\n    let eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n\n    for (let i = 0, len = eIcons.length; i < len; i++) {\n      let icon = eIcons[i];\n      let liEle = closest(icon, '.' + LISTITEM);\n      this.expandAction(liEle, icon, null, true);\n    }\n  }\n\n  getVisibleNodes(excludeHiddenNodes, nodes) {\n    let vNodes = Array.prototype.slice.call(nodes);\n\n    if (excludeHiddenNodes) {\n      for (let i = 0; i < vNodes.length; i++) {\n        if (!isVisible(vNodes[i])) {\n          vNodes.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    return vNodes;\n  }\n\n  removeNode(node) {\n    let dragParentUl = closest(node, '.' + PARENTITEM);\n    let dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n\n    if (!isNullOrUndefined(this.nodeTemplateFn)) {\n      this.destroyTemplate(node);\n    }\n\n    detach(node);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.removeData(node);\n  }\n\n  updateInstance() {\n    this.updateList();\n    this.updateSelectedNodes();\n    this.updateExpandedNodes();\n  }\n\n  updateList() {\n    this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n  }\n\n  updateSelectedNodes() {\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n    let sNodes = selectAll('.' + ACTIVE, this.element);\n    this.selectGivenNodes(sNodes);\n  }\n\n  updateExpandedNodes() {\n    this.setProperties({\n      expandedNodes: []\n    }, true);\n    let eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n\n    for (let i = 0, len = eNodes.length; i < len; i++) {\n      this.addExpand(eNodes[i]);\n    }\n  }\n\n  removeData(node) {\n    if (this.dataType === 1) {\n      let dm = new DataManager(this.treeData);\n      let id = this.getId(node);\n      let data = {};\n      let newId = this.isNumberTypeId ? parseFloat(id) : id;\n      data[this.fields.id] = newId;\n      dm.remove(this.fields.id, data);\n      this.removeChildNodes(id);\n    } else {\n      let id = this.getId(node);\n      this.updateChildField(this.treeData, this.fields, id, null, null, true);\n    }\n  }\n\n  removeChildNodes(parentId) {\n    let cNodes = this.getChildGroup(this.groupedData, parentId, false);\n    let childData = [];\n\n    if (cNodes) {\n      for (let i = 0, len = cNodes.length; i < len; i++) {\n        let dm = new DataManager(this.treeData);\n        let id = getValue(this.fields.id, cNodes[i]).toString();\n        let data = {};\n        let currId = this.isNumberTypeId ? parseFloat(id) : id;\n        data[this.fields.id] = currId;\n        let nodeData = dm.remove(this.fields.id, data);\n        childData.push(nodeData[0]);\n        this.removeChildNodes(id);\n      }\n    }\n\n    return childData;\n  }\n\n  doGivenAction(nodes, selector, toExpand) {\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      let liEle = this.getElement(nodes[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      let icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n\n      if (!isNullOrUndefined(icon)) {\n        toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n      }\n    }\n  }\n\n  addGivenNodes(nodes, dropLi, index, isRemote, dropEle) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    let sNodes = this.getSortedData(nodes);\n    let level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n\n    if (isRemote) {\n      this.updateMapper(level);\n    }\n\n    let li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n    let dropUl;\n\n    if (!dropEle) {\n      dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n    } else {\n      dropUl = dropEle;\n    }\n\n    let refNode = dropUl.childNodes[index];\n\n    if (refNode || this.sortOrder === 'None') {\n      for (let i = 0; i < li.length; i++) {\n        dropUl.insertBefore(li[i], refNode);\n      }\n    }\n\n    if (!refNode && (this.sortOrder === 'Ascending' || this.sortOrder === 'Descending')) {\n      let cNodes = dropUl.childNodes;\n\n      for (let i = 0; i < li.length; i++) {\n        for (let j = 0; j < cNodes.length; j++) {\n          let returnValue = this.sortOrder === 'Ascending' ? cNodes[j].textContent.toUpperCase() > li[i].innerText.toUpperCase() : cNodes[j].textContent.toUpperCase() < li[i].innerText.toUpperCase();\n\n          if (returnValue) {\n            dropUl.insertBefore(li[i], cNodes[j]);\n            break;\n          }\n\n          dropUl.insertBefore(li[i], cNodes[cNodes.length]);\n        }\n      }\n    }\n\n    let id = this.getId(dropLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n      let refId = this.getId(refNode);\n      let pos = isNullOrUndefined(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n\n      for (let j = 0; j < nodes.length; j++) {\n        if (!isNullOrUndefined(id)) {\n          let currId = this.isNumberTypeId ? parseFloat(id) : id;\n          setValue(this.fields.parentID, currId, nodes[j]);\n        }\n\n        this.treeData.splice(pos, 0, nodes[j]);\n        pos++;\n      }\n    } else {\n      this.addChildData(this.treeData, this.fields, id, nodes, index);\n    }\n\n    this.finalizeNode(dropUl);\n  }\n\n  updateMapper(level) {\n    let mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n    this.updateListProp(mapper);\n  }\n\n  updateListProp(mapper) {\n    let prop = this.getActualProperties(mapper);\n    this.listBaseOption.fields = prop;\n    this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n  }\n\n  getDataPos(obj, mapper, id) {\n    let pos = null;\n\n    for (let i = 0, objlen = obj.length; i < objlen; i++) {\n      let nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        return i;\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        let data = getValue(mapper.child, obj[i]);\n        pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        let items = getValue('child', obj[i]);\n        pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      }\n    }\n\n    return pos;\n  }\n\n  addChildData(obj, mapper, id, data, index) {\n    let updated;\n\n    if (isNullOrUndefined(id)) {\n      index = isNullOrUndefined(index) ? obj.length : index;\n\n      for (let k = 0, len = data.length; k < len; k++) {\n        obj.splice(index, 0, data[k]);\n        index++;\n      }\n\n      return updated;\n    }\n\n    for (let i = 0, objlen = obj.length; i < objlen; i++) {\n      let nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty('child')) {\n          let key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          let childData = getValue(key, obj[i]);\n\n          if (isNullOrUndefined(childData)) {\n            childData = [];\n          }\n\n          index = isNullOrUndefined(index) ? childData.length : index;\n\n          for (let k = 0, len = data.length; k < len; k++) {\n            childData.splice(index, 0, data[k]);\n            index++;\n          }\n        } else {\n          let key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          obj[i][key] = data;\n        }\n\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        let childObj = getValue(mapper.child, obj[i]);\n        updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        let childData = getValue('child', obj[i]);\n        updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return updated;\n  }\n\n  doDisableAction(nodes) {\n    let validNodes = this.nodeType(nodes);\n    let validID = this.checkValidId(validNodes);\n    this.validArr = [];\n\n    for (let i = 0, len = validID.length; i < len; i++) {\n      let id = validID[i][this.fields.id].toString();\n\n      if (id && this.disableNode.indexOf(id) === -1) {\n        this.disableNode.push(id);\n      }\n\n      let liEle = this.getElement(id);\n\n      if (liEle) {\n        liEle.setAttribute('aria-disabled', 'true');\n        addClass([liEle], DISABLE);\n      }\n    }\n  }\n\n  doEnableAction(nodes) {\n    let strNodes = this.nodeType(nodes);\n\n    for (let i = 0, len = strNodes.length; i < len; i++) {\n      let liEle = this.getElement(strNodes[i]);\n      let id = strNodes[i];\n\n      if (id && this.disableNode.indexOf(id) !== -1) {\n        this.disableNode.splice(this.disableNode.indexOf(id), 1);\n      }\n\n      if (liEle) {\n        liEle.removeAttribute('aria-disabled');\n        removeClass([liEle], DISABLE);\n      }\n    }\n  }\n\n  nodeType(nodes) {\n    let validID = [];\n\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      let id;\n\n      if (typeof nodes[i] == \"string\") {\n        id = nodes[i] ? nodes[i].toString() : null;\n      } else if (typeof nodes[i] === \"object\") {\n        id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n      }\n\n      if (validID.indexOf(id) == -1) {\n        validID.push(id);\n      }\n    }\n\n    return validID;\n  }\n\n  checkValidId(node) {\n    if (this.dataType === 1) {\n      this.validArr = this.treeData.filter(data => {\n        return node.indexOf(data[this.fields.id] ? data[this.fields.id].toString() : null) !== -1;\n      });\n    } else if (this.dataType === 2) {\n      for (let k = 0; k < this.treeData.length; k++) {\n        let id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n\n        if (node.indexOf(id) !== -1) {\n          this.validArr.push(this.treeData[k]);\n        }\n\n        let childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n\n        if (childItems) {\n          this.filterNestedChild(childItems, node);\n        }\n      }\n    }\n\n    return this.validArr;\n  }\n\n  filterNestedChild(treeData, nodes) {\n    for (let k = 0; k < treeData.length; k++) {\n      let id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n\n      if (nodes.indexOf(id) !== -1) {\n        this.validArr.push(treeData[k]);\n      }\n\n      let childItems = getValue(this.fields.child.toString(), treeData[k]);\n\n      if (childItems) {\n        this.filterNestedChild(childItems, nodes);\n      }\n    }\n  }\n\n  setTouchClass() {\n    let ele = closest(this.element, '.' + BIGGER);\n    this.touchClass = isNullOrUndefined(ele) ? '' : SMALL;\n  }\n\n  updatePersistProp() {\n    this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n    let sleNodes = this.selectedNodes;\n\n    for (let l = 0, slelen = sleNodes.length; l < slelen; l++) {\n      this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n    }\n\n    let enodes = this.expandedNodes;\n\n    for (let k = 0, nodelen = enodes.length; k < nodelen; k++) {\n      this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n    }\n\n    if (this.showCheckBox) {\n      this.removeField(this.treeData, this.fields, ['isChecked']);\n      let cnodes = this.checkedNodes;\n\n      for (let m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n        this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n      }\n    }\n  }\n\n  removeField(obj, mapper, names) {\n    if (isNullOrUndefined(obj) || isNullOrUndefined(mapper)) {\n      return;\n    }\n\n    for (let i = 0, objlen = obj.length; i < objlen; i++) {\n      for (let j = 0; j < names.length; j++) {\n        let field = this.getMapperProp(mapper, names[j]);\n\n        if (!isNullOrUndefined(obj[i][field])) {\n          delete obj[i][field];\n        }\n      }\n\n      if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n      }\n    }\n  }\n\n  getMapperProp(mapper, fieldName) {\n    switch (fieldName) {\n      case 'selected':\n        return !isNullOrUndefined(mapper.selected) ? mapper.selected : 'selected';\n\n      case 'expanded':\n        return !isNullOrUndefined(mapper.expanded) ? mapper.expanded : 'expanded';\n\n      case 'isChecked':\n        return !isNullOrUndefined(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n\n      case 'hasChildren':\n        return !isNullOrUndefined(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n\n      default:\n        return fieldName;\n    }\n  }\n\n  updateField(obj, mapper, id, key, value) {\n    if (isNullOrUndefined(id)) {\n      return;\n    } else if (this.dataType === 1) {\n      let newId = this.isNumberTypeId ? parseFloat(id) : id;\n      let resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n      setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n    } else {\n      this.updateChildField(obj, mapper, id, key, value);\n    }\n  }\n\n  updateChildField(obj, mapper, id, key, value, remove$$1) {\n    let removedData;\n\n    if (isNullOrUndefined(obj)) {\n      return removedData;\n    }\n\n    for (let i = 0, objlen = obj.length; i < objlen; i++) {\n      let nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (remove$$1) {\n          removedData = obj.splice(i, 1);\n        } else {\n          setValue(this.getMapperProp(mapper, key), value, obj[i]);\n          removedData = [];\n        }\n\n        return removedData;\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        let childData = getValue(mapper.child, obj[i]);\n        removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove$$1);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        let childItems = getValue('child', obj[i]);\n        removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove$$1);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return removedData;\n  }\n\n  triggerEvent() {\n    this.renderReactTemplates();\n    let eventArgs = {\n      data: this.treeData\n    };\n    this.trigger('dataSourceChanged', eventArgs);\n  }\n\n  wireInputEvents(inpEle) {\n    EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n  }\n\n  wireEditingEvents(toBind) {\n    if (toBind && !this.disabled) {\n      let proxy = this;\n      this.touchEditObj = new Touch(this.element, {\n        tap: e => {\n          if (this.isDoubleTapped(e) && e.tapCount === 2) {\n            e.originalEvent.preventDefault();\n            proxy.editingHandler(e.originalEvent);\n          }\n        }\n      });\n    } else {\n      if (this.touchEditObj) {\n        this.touchEditObj.destroy();\n      }\n    }\n  }\n\n  wireClickEvent(toBind) {\n    if (toBind) {\n      let proxy = this;\n      this.touchClickObj = new Touch(this.element, {\n        tap: e => {\n          proxy.clickHandler(e);\n        }\n      });\n    } else {\n      if (this.touchClickObj) {\n        this.touchClickObj.destroy();\n      }\n    }\n  }\n\n  wireExpandOnEvent(toBind) {\n    if (toBind) {\n      let proxy = this;\n      this.touchExpandObj = new Touch(this.element, {\n        tap: e => {\n          if ((this.expandOnType === 'Click' || this.expandOnType === 'DblClick' && this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {\n            proxy.expandHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.touchExpandObj) {\n        this.touchExpandObj.destroy();\n      }\n    }\n  }\n\n  mouseDownHandler(e) {\n    this.mouseDownStatus = true;\n\n    if (e.shiftKey || e.ctrlKey) {\n      e.preventDefault();\n    }\n\n    if (e.ctrlKey && this.allowMultiSelection) {\n      EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n    }\n  }\n\n  preventContextMenu(e) {\n    e.preventDefault();\n  }\n\n  wireEvents() {\n    EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n    this.wireClickEvent(true);\n\n    if (this.expandOnType !== 'None') {\n      this.wireExpandOnEvent(true);\n    }\n\n    EventHandler.add(this.element, 'focus', this.focusIn, this);\n    EventHandler.add(this.element, 'blur', this.focusOut, this);\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  }\n\n  unWireEvents() {\n    EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n    this.wireClickEvent(false);\n    this.wireExpandOnEvent(false);\n    EventHandler.remove(this.element, 'focus', this.focusIn);\n    EventHandler.remove(this.element, 'blur', this.focusOut);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n\n    if (!this.disabled) {\n      this.keyboardModule.destroy();\n    }\n  }\n\n  parents(element, selector) {\n    let matched = [];\n    let el = element.parentNode;\n\n    while (!isNullOrUndefined(el)) {\n      if (matches(el, selector)) {\n        matched.push(el);\n      }\n\n      el = el.parentNode;\n    }\n\n    return matched;\n  }\n\n  isDoubleTapped(e) {\n    let target = e.originalEvent.target;\n    let secondTap;\n\n    if (target && e.tapCount) {\n      if (e.tapCount === 1) {\n        this.firstTap = closest(target, '.' + LISTITEM);\n      } else if (e.tapCount === 2) {\n        secondTap = closest(target, '.' + LISTITEM);\n      }\n    }\n\n    return this.firstTap === secondTap;\n  }\n\n  isDescendant(parent, child) {\n    let node = child.parentNode;\n\n    while (!isNullOrUndefined(node)) {\n      if (node === parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  }\n\n  showSpinner(element) {\n    addClass([element], LOAD);\n    createSpinner({\n      target: element,\n      width: Browser.isDevice ? 16 : 14\n    }, this.createElement);\n    showSpinner(element);\n  }\n\n  hideSpinner(element) {\n    hideSpinner(element);\n    element.innerHTML = '';\n    removeClass([element], LOAD);\n  }\n\n  setCheckedNodes(nodes) {\n    nodes = JSON.parse(JSON.stringify(nodes));\n    this.uncheckAll(this.checkedNodes);\n    this.setIndeterminate(nodes);\n\n    if (nodes.length > 0) {\n      this.checkAll(nodes);\n    }\n  }\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n   */\n\n\n  setValidCheckedNode(node) {\n    if (this.dataType === 1) {\n      let mapper = this.fields;\n      let resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n\n      if (resultData[0]) {\n        this.setChildCheckState(resultData, node, resultData[0]);\n\n        if (this.autoCheck) {\n          let parent = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n          let childNodes = this.getChildNodes(this.treeData, parent);\n          let count = 0;\n\n          for (let len = 0; len < childNodes.length; len++) {\n            let childId = childNodes[len][this.fields.id].toString();\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n\n          if (count === childNodes.length && this.checkedNodes.indexOf(parent) === -1 && parent) {\n            this.checkedNodes.push(parent);\n          }\n        }\n      }\n    } else if (this.dataType === 2) {\n      for (let a = 0; a < this.treeData.length; a++) {\n        let index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n\n        if (index === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n          break;\n        }\n\n        let childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n\n        if (childItems) {\n          this.setChildCheckState(childItems, node, this.treeData[a]);\n        }\n      }\n    }\n  }\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n   */\n\n\n  setChildCheckState(childItems, node, treeData) {\n    let checkedParent;\n    let count = 0;\n\n    if (this.dataType === 1) {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n      }\n\n      for (let index = 0; index < childItems.length; index++) {\n        let checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n            this.checkedNodes.push(checkNode);\n          }\n        }\n\n        if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        let subChildItems = this.getChildNodes(this.treeData, checkNode);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, treeData);\n        }\n      }\n    } else {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n      }\n\n      for (let index = 0; index < childItems.length; index++) {\n        let checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n\n        if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        let subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, childItems[index]);\n        }\n\n        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n          count++;\n        }\n\n        if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n          this.checkedNodes.push(checkedParent);\n        }\n      }\n    }\n  }\n\n  setIndeterminate(nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      this.setValidCheckedNode(nodes[i]);\n    }\n  }\n\n  updatePosition(id, newData, isRefreshChild, childValue) {\n    if (this.dataType === 1) {\n      let pos = this.getDataPos(this.treeData, this.fields, id);\n      this.treeData.splice(pos, 1, newData);\n\n      if (isRefreshChild) {\n        this.removeChildNodes(id);\n\n        for (let j = 0; j < childValue.length; j++) {\n          this.treeData.splice(pos, 0, childValue[j]);\n          pos++;\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n    }\n  }\n\n  updateChildPosition(treeData, mapper, currID, newData, index) {\n    let found;\n\n    for (let i = 0, objlen = treeData.length; i < objlen; i++) {\n      let nodeId = getValue(mapper.id, treeData[i]);\n\n      if (treeData[i] && nodeId && nodeId.toString() === currID) {\n        treeData[i] = newData[0];\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, treeData[i]))) {\n        let childObj = getValue(mapper.child, treeData[i]);\n        found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', treeData[i]))) {\n        let childData = getValue('child', treeData[i]);\n        found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return found;\n  }\n\n  dynamicState() {\n    this.setDragAndDrop(this.allowDragAndDrop);\n    this.wireEditingEvents(this.allowEditing);\n\n    if (!this.disabled) {\n      this.wireEvents();\n      this.setRipple();\n    } else {\n      this.unWireEvents();\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n  }\n\n  crudOperation(operation, nodes, target, newText, newNode, index, prevent) {\n    let data = this.fields.dataSource;\n    let matchedArr = [];\n    let query = this.getQuery(this.fields);\n    let key = this.fields.id;\n    let crud;\n    let changes = {\n      addedRecords: [],\n      deletedRecords: [],\n      changedRecords: []\n    };\n    let nodesID = [];\n\n    if (nodes) {\n      nodesID = this.nodeType(nodes);\n    } else if (target) {\n      if (typeof target == \"string\") {\n        nodesID[0] = target.toString();\n      } else if (typeof target === \"object\") {\n        nodesID[0] = target.getAttribute(\"data-uid\").toString();\n      }\n    }\n\n    for (let i = 0, len = nodesID.length; i < len; i++) {\n      let liEle = this.getElement(nodesID[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      let removedData = this.getNodeObject(nodesID[i]);\n      matchedArr.push(removedData);\n    }\n\n    switch (operation) {\n      case 'delete':\n        if (nodes.length == 1) {\n          crud = data.remove(key, matchedArr[0], query.fromTable, query);\n        } else {\n          changes.deletedRecords = matchedArr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(e => this.deleteSuccess(nodesID)).catch(e => this.dmFailure(e));\n        break;\n\n      case 'update':\n        matchedArr[0][this.fields.text] = newText;\n        crud = data.update(key, matchedArr[0], query.fromTable, query);\n        crud.then(e => this.editSucess(target, newText, prevent)).catch(e => this.dmFailure(e, target, prevent));\n        break;\n\n      case 'insert':\n        if (newNode.length == 1) {\n          crud = data.insert(newNode[0], query.fromTable, query);\n        } else {\n          let arr = [];\n\n          for (let i = 0, len = newNode.length; i < len; i++) {\n            arr.push(newNode[i]);\n          }\n\n          changes.addedRecords = arr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(e => {\n          let dropLi = this.getElement(target);\n          this.addSuccess(newNode, dropLi, index);\n          this.preventExpand = false;\n        }).catch(e => this.dmFailure(e));\n        break;\n    }\n  }\n\n  deleteSuccess(nodes) {\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      let liEle = this.getElement(nodes[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      this.removeNode(liEle);\n    }\n\n    this.updateInstance();\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.triggerEvent();\n  }\n\n  editSucess(target, newText, prevent) {\n    let liEle = this.getElement(target);\n    let txtEle = select('.' + LISTTEXT, liEle);\n    this.appendNewText(liEle, txtEle, newText, prevent);\n  }\n\n  addSuccess(nodes, dropLi, index) {\n    let dropUl;\n    let icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n    let proxy = this;\n\n    if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {\n      proxy.renderChildNodes(dropLi, null, () => {\n        dropUl = dropLi.querySelector('.' + PARENTITEM);\n        proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n        proxy.triggerEvent();\n      });\n    } else {\n      this.addGivenNodes(nodes, dropLi, index, true);\n      this.triggerEvent();\n    }\n  }\n\n  dmFailure(e, target, prevent) {\n    if (target) {\n      this.updatePreviousText(target, prevent);\n    }\n\n    this.trigger('actionFailure', {\n      error: e\n    });\n  }\n\n  updatePreviousText(target, prevent) {\n    let liEle = this.getElement(target);\n    let txtEle = select('.' + LISTTEXT, liEle);\n    this.updateText(liEle, txtEle, this.oldText, prevent);\n  }\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {TreeView} newProp\n   * @param  {TreeView} oldProp\n   * @returns void\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (let prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.setDragAndDrop(this.allowDragAndDrop);\n          break;\n\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            this.dragObj.dragArea = this.dragArea;\n          }\n\n          break;\n\n        case 'allowEditing':\n          this.wireEditingEvents(this.allowEditing);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.selectedNodes.length > 1) {\n            let sNode = this.getElement(this.selectedNodes[0]);\n            this.isLoaded = false;\n            this.removeSelectAll();\n            this.selectNode(sNode, null);\n            this.isLoaded = true;\n          }\n\n          this.setMultiSelect(this.allowMultiSelection);\n          this.addMultiSelect(this.allowMultiSelection);\n          break;\n\n        case 'allowTextWrap':\n          this.setTextWrap();\n          this.updateWrap();\n          break;\n\n        case 'checkedNodes':\n          if (this.showCheckBox) {\n            this.checkedNodes = oldProp.checkedNodes;\n            this.setCheckedNodes(newProp.checkedNodes);\n          }\n\n          break;\n\n        case 'autoCheck':\n          if (this.showCheckBox) {\n            this.autoCheck = newProp.autoCheck;\n            this.ensureIndeterminate();\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCssClass(oldProp.cssClass, newProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'expandedNodes':\n          this.isAnimate = false;\n          this.setProperties({\n            expandedNodes: []\n          }, true);\n          this.collapseAll();\n          this.isInitalExpand = true;\n          this.setProperties({\n            expandedNodes: isNullOrUndefined(newProp.expandedNodes) ? [] : newProp.expandedNodes\n          }, true);\n          this.doExpandAction();\n          this.isInitalExpand = false;\n          this.isAnimate = true;\n          break;\n\n        case 'expandOn':\n          this.wireExpandOnEvent(false);\n          this.setExpandOnType();\n\n          if (this.expandOnType !== 'None' && !this.disabled) {\n            this.wireExpandOnEvent(true);\n          }\n\n          break;\n\n        case 'disabled':\n          this.setDisabledMode();\n          this.dynamicState();\n          break;\n\n        case 'fields':\n          this.isAnimate = false;\n          this.isFieldChange = true;\n          this.initialRender = true;\n          this.reRenderNodes();\n          this.initialRender = false;\n          this.isAnimate = true;\n          this.isFieldChange = false;\n          break;\n\n        case 'fullRowSelect':\n          this.setFullRow(this.fullRowSelect);\n          this.addFullRow(this.fullRowSelect);\n\n          if (this.allowTextWrap) {\n            this.setTextWrap();\n            this.updateWrap();\n          }\n\n          break;\n\n        case 'loadOnDemand':\n          if (this.loadOnDemand === false && !this.onLoaded) {\n            let nodes = this.element.querySelectorAll('li');\n            let i = 0;\n\n            while (i < nodes.length) {\n              if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                this.renderChildNodes(nodes[i], true, null, true);\n              }\n\n              i++;\n            }\n\n            this.onLoaded = true;\n          }\n\n          break;\n\n        case 'nodeTemplate':\n          this.hasTemplate = false;\n          this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n          this.reRenderNodes();\n          break;\n\n        case 'selectedNodes':\n          this.removeSelectAll();\n          this.setProperties({\n            selectedNodes: newProp.selectedNodes\n          }, true);\n          this.doSelectionAction();\n          break;\n\n        case 'showCheckBox':\n          this.reRenderNodes();\n          break;\n\n        case 'sortOrder':\n          this.reRenderNodes();\n          break;\n\n        case 'fullRowNavigable':\n          this.setProperties({\n            fullRowNavigable: newProp.fullRowNavigable\n          }, true);\n          this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n          this.reRenderNodes();\n          break;\n      }\n    }\n  }\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n   */\n\n\n  destroy() {\n    this.clearTemplate();\n    this.element.removeAttribute('aria-activedescendant');\n    this.element.removeAttribute('tabindex');\n    this.unWireEvents();\n    this.wireEditingEvents(false);\n\n    if (!this.disabled) {\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n\n    this.setCssClass(this.cssClass, null);\n    this.setDragAndDrop(false);\n    this.setFullRow(false);\n\n    if (this.ulElement && this.ulElement.parentElement) {\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    }\n\n    super.destroy();\n  }\n  /**\n   * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n   * then the nodes are added as children of the given parentID or in the root level of TreeView.\n   * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n   * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  addNodes(nodes, target, index, preventTargetExpand) {\n    if (isNullOrUndefined(nodes)) {\n      return;\n    }\n\n    nodes = JSON.parse(JSON.stringify(nodes));\n    let dropLi = this.getElement(target);\n    this.preventExpand = preventTargetExpand;\n\n    if (this.fields.dataSource instanceof DataManager) {\n      if (!this.isOffline) {\n        this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n      } else {\n        this.addSuccess(nodes, dropLi, index);\n      }\n    } else if (this.dataType === 2) {\n      this.addGivenNodes(nodes, dropLi, index);\n    } else {\n      if (dropLi) {\n        this.addGivenNodes(nodes, dropLi, index);\n      } else {\n        nodes = this.getSortedData(nodes);\n\n        for (let i = 0; i < nodes.length; i++) {\n          let pid = getValue(this.fields.parentID, nodes[i]);\n          dropLi = pid ? this.getElement(pid.toString()) : pid;\n          this.addGivenNodes([nodes[i]], dropLi, index);\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.updateCheckedStateFromDS();\n\n    if (this.showCheckBox && dropLi) {\n      this.ensureParentCheckState(dropLi);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n      this.triggerEvent();\n    }\n  }\n  /**\n   * Instead of clicking on the TreeView node for editing, we can enable it by using\n   * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n   * will be created for the particular node thus allowing us to edit it.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   */\n\n\n  beginEdit(node) {\n    let ele = this.getElement(node);\n\n    if (isNullOrUndefined(ele) || this.disabled) {\n      return;\n    }\n\n    this.createTextbox(ele, null);\n  }\n  /**\n   * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  checkAll(nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, true);\n    }\n  }\n  /**\n   * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n   * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n   * a specific level of nodes, set **level** as argument to collapseAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n   * @param  {number} level - TreeView nodes will collapse up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n   */\n\n\n  collapseAll(nodes, level, excludeHiddenNodes) {\n    if (!isNullOrUndefined(nodes)) {\n      this.doGivenAction(nodes, COLLAPSIBLE, false);\n    } else {\n      if (level > 0) {\n        this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.collapseAllNodes(excludeHiddenNodes);\n      }\n    }\n  }\n  /**\n   * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  disableNodes(nodes) {\n    if (!isNullOrUndefined(nodes)) {\n      this.doDisableAction(nodes);\n    }\n  }\n  /**\n   * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  enableNodes(nodes) {\n    if (!isNullOrUndefined(nodes)) {\n      this.doEnableAction(nodes);\n    }\n  }\n  /**\n   * Ensures visibility of the TreeView node by using node ID or node element.\n   * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n   * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n   */\n\n\n  ensureVisible(node) {\n    let liEle = this.getElement(node);\n\n    if (isNullOrUndefined(liEle)) {\n      return;\n    }\n\n    let parents = this.parents(liEle, '.' + LISTITEM);\n    this.expandAll(parents);\n    setTimeout(() => {\n      liEle.scrollIntoView(true);\n    }, 450);\n  }\n  /**\n   * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n   * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n   * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   * @param  {number} level - TreeView nodes will expand up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n   */\n\n\n  expandAll(nodes, level, excludeHiddenNodes) {\n    if (!isNullOrUndefined(nodes)) {\n      this.doGivenAction(nodes, EXPANDABLE, true);\n    } else {\n      if (level > 0) {\n        this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.expandAllNodes(excludeHiddenNodes);\n      }\n    }\n  }\n  /**\n   * Gets all the checked nodes including child, whether it is loaded or not.\n   */\n\n\n  getAllCheckedNodes() {\n    let checkNodes = this.checkedNodes;\n    return checkNodes;\n  }\n  /**\n  * Gets all the disabled nodes including child, whether it is loaded or not.\n  */\n\n\n  getDisabledNodes() {\n    let disabledNodes = this.disableNode;\n    return disabledNodes;\n  }\n  /**\n   * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   */\n\n\n  getNode(node) {\n    let ele = this.getElement(node);\n    return this.getNodeData(ele, true);\n  }\n  /**\n   * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n   * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n   * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n   * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n   * * The updated data source also contains custom attributes if you specified in data source.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   * @isGenericType true\n   */\n\n\n  getTreeData(node) {\n    let id = this.getId(node);\n    this.updatePersistProp();\n\n    if (isNullOrUndefined(id)) {\n      return this.treeData;\n    } else {\n      let data = this.getNodeObject(id);\n      return isNullOrUndefined(data) ? [] : [data];\n    }\n  }\n  /**\n   * Moves the collection of nodes within the same TreeView based on target or its index position.\n   * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  moveNodes(sourceNodes, target, index, preventTargetExpand) {\n    let dropLi = this.getElement(target);\n\n    if (isNullOrUndefined(dropLi)) {\n      return;\n    }\n\n    for (let i = 0; i < sourceNodes.length; i++) {\n      let dragLi = this.getElement(sourceNodes[i]);\n\n      if (isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        continue;\n      }\n\n      this.preventExpand = preventTargetExpand;\n      this.dropAsChildNode(dragLi, dropLi, this, index);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.triggerEvent();\n  }\n  /**\n   * Refreshes a particular node of the TreeView.\n   * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n   * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n   */\n\n\n  refreshNode(target, newData) {\n    if (isNullOrUndefined(target) || isNullOrUndefined(newData)) {\n      return;\n    }\n\n    let id;\n    let isRefreshChild = false;\n\n    if (this.dataType == 1 && newData.length > 1) {\n      isRefreshChild = true;\n    } else if (this.dataType == 2 && newData.length === 1) {\n      let updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n\n      if (!isNullOrUndefined(updatedChildValue)) {\n        isRefreshChild = true;\n      }\n    }\n\n    let liEle = this.getElement(target);\n    id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;\n    this.refreshData = this.getNodeObject(id);\n    newData = JSON.parse(JSON.stringify(newData));\n    /* eslint-disable */\n\n    let newNodeData;\n    let parentData;\n\n    if (this.dataType == 1 && isRefreshChild) {\n      for (let k = 0; k < newData.length; k++) {\n        if (isNullOrUndefined(newData[k][this.fields.parentID])) {\n          parentData = newData[k];\n          newData.splice(k, 1);\n          break;\n        }\n      }\n\n      newNodeData = extend({}, this.refreshData, parentData);\n    } else {\n      newNodeData = extend({}, this.refreshData, newData[0]);\n    }\n\n    if (isNullOrUndefined(liEle)) {\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n      return;\n    }\n\n    this.isRefreshed = true;\n    let level = parseFloat(liEle.getAttribute('aria-level'));\n    let newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n    let ul = select('.' + PARENTITEM, liEle);\n    let childItems = getValue(this.fields.child.toString(), newNodeData);\n\n    if (isRefreshChild && ul || isRefreshChild && !isNullOrUndefined(childItems)) {\n      let parentEle = liEle.parentElement;\n      let index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n      remove(liEle);\n      parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n\n      if (isRefreshChild && ul) {\n        this.expandAll([id]);\n      }\n    } else {\n      let txtEle = select('.' + TEXTWRAP, liEle);\n      let newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n      let icon = select('div.' + ICON, txtEle);\n      let newIcon = select('div.' + ICON, newTextEle);\n\n      if (icon && newIcon) {\n        if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n          removeClass([newIcon], EXPANDABLE);\n          addClass([newIcon], COLLAPSIBLE);\n        } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n          removeClass([newIcon], COLLAPSIBLE);\n          addClass([newIcon], EXPANDABLE);\n        } else if (icon.classList.contains('interaction')) {\n          addClass([newIcon], 'interaction');\n        }\n      }\n\n      remove(txtEle);\n      let fullEle = select('.' + FULLROW, liEle);\n      fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n    }\n\n    liEle = this.getElement(target);\n\n    if (newNodeData[this.fields.tooltip]) {\n      liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n    }\n\n    if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n      let attr = {};\n      merge(attr, newNodeData[this.fields.htmlAttributes]);\n\n      if (attr.class) {\n        addClass([liEle], attr.class.split(' '));\n        delete attr.class;\n      } else {\n        attributes(liEle, attr);\n      }\n    }\n\n    if (this.selectedNodes.indexOf(id) !== -1) {\n      liEle.setAttribute('aria-selected', 'true');\n      addClass([liEle], ACTIVE);\n    }\n\n    this.isRefreshed = false;\n    this.triggerEvent();\n  }\n  /**\n   * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  removeNodes(nodes) {\n    if (!isNullOrUndefined(nodes)) {\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        this.crudOperation('delete', nodes);\n      } else {\n        this.deleteSuccess(nodes);\n      }\n    }\n  }\n  /**\n   * Replaces the text of the TreeView node with the given text.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {string} newText - Specifies the new text of TreeView node.\n   */\n\n\n  updateNode(target, newText) {\n    if (isNullOrUndefined(target) || isNullOrUndefined(newText) || !this.allowEditing) {\n      return;\n    }\n\n    let liEle = this.getElement(target);\n\n    if (isNullOrUndefined(liEle)) {\n      return;\n    }\n\n    let txtEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    let eventArgs = this.getEditEvent(liEle, null, null);\n    this.trigger('nodeEditing', eventArgs, observedArgs => {\n      if (!observedArgs.cancel) {\n        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n          this.crudOperation('update', null, target, newText, null, null, false);\n        } else {\n          this.appendNewText(liEle, txtEle, newText, false);\n        }\n      }\n    });\n  }\n  /**\n   * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  uncheckAll(nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, false);\n    }\n  }\n\n};\n\n__decorate$8([Property(false)], TreeView.prototype, \"allowDragAndDrop\", void 0);\n\n__decorate$8([Property(false)], TreeView.prototype, \"allowEditing\", void 0);\n\n__decorate$8([Property(false)], TreeView.prototype, \"allowMultiSelection\", void 0);\n\n__decorate$8([Property(false)], TreeView.prototype, \"allowTextWrap\", void 0);\n\n__decorate$8([Complex({}, NodeAnimationSettings)], TreeView.prototype, \"animation\", void 0);\n\n__decorate$8([Property()], TreeView.prototype, \"checkedNodes\", void 0);\n\n__decorate$8([Property('')], TreeView.prototype, \"cssClass\", void 0);\n\n__decorate$8([Property(false)], TreeView.prototype, \"disabled\", void 0);\n\n__decorate$8([Property(null)], TreeView.prototype, \"dragArea\", void 0);\n\n__decorate$8([Property(false)], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$8([Property(false)], TreeView.prototype, \"enablePersistence\", void 0);\n\n__decorate$8([Property()], TreeView.prototype, \"expandedNodes\", void 0);\n\n__decorate$8([Property('Auto')], TreeView.prototype, \"expandOn\", void 0);\n\n__decorate$8([Complex({}, FieldsSettings)], TreeView.prototype, \"fields\", void 0);\n\n__decorate$8([Property(true)], TreeView.prototype, \"fullRowSelect\", void 0);\n\n__decorate$8([Property(true)], TreeView.prototype, \"loadOnDemand\", void 0);\n\n__decorate$8([Property()], TreeView.prototype, \"locale\", void 0);\n\n__decorate$8([Property()], TreeView.prototype, \"nodeTemplate\", void 0);\n\n__decorate$8([Property()], TreeView.prototype, \"selectedNodes\", void 0);\n\n__decorate$8([Property('None')], TreeView.prototype, \"sortOrder\", void 0);\n\n__decorate$8([Property(false)], TreeView.prototype, \"showCheckBox\", void 0);\n\n__decorate$8([Property(true)], TreeView.prototype, \"autoCheck\", void 0);\n\n__decorate$8([Property(false)], TreeView.prototype, \"fullRowNavigable\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"actionFailure\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"created\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"dataBound\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"dataSourceChanged\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"drawNode\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"destroyed\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"keyPress\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeChecked\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeChecking\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeClicked\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeCollapsed\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeCollapsing\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeDragging\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeDragStart\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeDragStop\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeDropped\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeEdited\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeEditing\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeExpanded\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeExpanding\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeSelected\", void 0);\n\n__decorate$8([Event()], TreeView.prototype, \"nodeSelecting\", void 0);\n\nTreeView = TreeView_1 = __decorate$8([NotifyPropertyChanges], TreeView);\n/**\n * TreeView modules\n */\n\nvar __decorate$9 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst CONTROL$1 = 'e-control';\nconst ROOT$1 = 'e-sidebar';\nconst DOCKER = 'e-dock';\nconst CLOSE = 'e-close';\nconst OPEN = 'e-open';\nconst TRASITION = 'e-transition';\nconst DEFAULTBACKDROP = 'e-sidebar-overlay';\nconst CONTEXTBACKDROP = 'e-backdrop';\nconst RTL$2 = 'e-rtl';\nconst RIGHT = 'e-right';\nconst LEFT = 'e-left';\nconst OVER = 'e-over';\nconst PUSH = 'e-push';\nconst SLIDE = 'e-slide';\nconst VISIBILITY = 'e-visibility';\nconst DISPLAY = 'e-sidebar-display';\nconst MAINCONTENTANIMATION = 'e-content-animation';\nconst DISABLEANIMATION = 'e-disable-animation';\nconst CONTEXT = 'e-sidebar-context';\nconst SIDEBARABSOLUTE = 'e-sidebar-absolute';\n/**\n * Sidebar is an expandable or collapsible\n * component that typically act as a side container to place the primary or secondary content alongside of the main content.\n * ```html\n * <aside id=\"sidebar\">\n * </aside>\n * ```\n * ```typescript\n * <script>\n *   let sidebarObject: Sidebar = new Sidebar();\n *   sidebarObject.appendTo(\"#sidebar\");\n * </script>\n * ```\n */\n\nlet Sidebar = class Sidebar extends Component {\n  /* eslint-enable */\n  constructor(options, element) {\n    super(options, element);\n  }\n\n  preRender() {\n    this.setWidth();\n  }\n\n  render() {\n    this.initialize();\n    this.wireEvents();\n    this.renderComplete();\n  }\n\n  initialize() {\n    this.setTarget();\n    this.addClass();\n    this.setZindex();\n\n    if (this.enableDock) {\n      this.setDock();\n    }\n\n    if (this.isOpen) {\n      this.show();\n      this.firstRender = true;\n    } else {\n      this.setMediaQuery();\n    }\n\n    this.checkType(true);\n    this.setType(this.type);\n    this.setCloseOnDocumentClick();\n    this.setEnableRTL();\n\n    if (Browser.isDevice) {\n      this.windowWidth = window.innerWidth;\n    }\n  }\n\n  setEnableRTL() {\n    (this.enableRtl ? addClass : removeClass)([this.element], RTL$2);\n  }\n\n  setTarget() {\n    this.targetEle = this.element.nextElementSibling;\n    this.sidebarEleCopy = this.element.cloneNode(true);\n\n    if (typeof this.target === 'string') {\n      this.setProperties({\n        target: document.querySelector(this.target)\n      }, true);\n    }\n\n    if (this.target) {\n      this.target.insertBefore(this.element, this.target.children[0]);\n      addClass([this.element], SIDEBARABSOLUTE);\n      addClass([this.target], CONTEXT);\n      this.targetEle = this.getTargetElement();\n    }\n  }\n\n  getTargetElement() {\n    let siblingElement = this.element.nextElementSibling;\n\n    while (!isNullOrUndefined(siblingElement)) {\n      if (!siblingElement.classList.contains(ROOT$1)) {\n        break;\n      }\n\n      siblingElement = siblingElement.nextElementSibling;\n    }\n\n    return siblingElement;\n  }\n\n  setCloseOnDocumentClick() {\n    if (this.closeOnDocumentClick) {\n      EventHandler.add(document, 'mousedown touchstart', this.documentclickHandler, this);\n    } else {\n      EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);\n    }\n  }\n\n  setWidth() {\n    if (this.enableDock && this.position === 'Left') {\n      setStyleAttribute(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    } else if (this.enableDock && this.position === 'Right') {\n      setStyleAttribute(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    } else if (!this.enableDock) {\n      setStyleAttribute(this.element, {\n        'width': this.setDimension(this.width)\n      });\n    }\n  }\n\n  setDimension(width) {\n    if (typeof width === 'number') {\n      width = formatUnit(width);\n    } else if (typeof width === 'string') {\n      width = width.match(/px|%|em/) ? width : formatUnit(width);\n    } else {\n      width = '100%';\n    }\n\n    return width;\n  }\n\n  setZindex() {\n    setStyleAttribute(this.element, {\n      'z-index': '' + this.zIndex\n    });\n  }\n\n  addClass() {\n    if (this.element.tagName === \"EJS-SIDEBAR\") {\n      addClass([this.element], DISPLAY);\n    }\n\n    const classELement = document.querySelector('.e-main-content');\n\n    if (!isNullOrUndefined(classELement || this.targetEle)) {\n      addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);\n    }\n\n    this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n\n    if (!this.enableDock && this.type !== 'Auto') {\n      addClass([this.element], [VISIBILITY]);\n    }\n\n    removeClass([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);\n    this.element.classList.add(ROOT$1);\n    addClass([this.element], this.position === 'Right' ? RIGHT : LEFT);\n\n    if (this.enableDock) {\n      addClass([this.element], DOCKER);\n    }\n\n    this.element.setAttribute('tabindex', this.tabIndex);\n\n    if (this.type === 'Auto' && !Browser.isDevice) {\n      this.show();\n    } else if (!this.isOpen) {\n      addClass([this.element], CLOSE);\n    }\n  }\n\n  checkType(val) {\n    if (!(this.type === 'Push' || this.type === 'Over' || this.type === 'Slide')) {\n      this.type = 'Auto';\n    } else {\n      if (!this.element.classList.contains(CLOSE) && !val) {\n        this.hide();\n      }\n    }\n  }\n\n  transitionEnd(e) {\n    this.setDock();\n\n    if (!isNullOrUndefined(e) && !this.firstRender) {\n      this.triggerChange();\n    }\n\n    this.firstRender = false;\n    EventHandler.remove(this.element, 'transitionend', this.transitionEnd);\n  }\n\n  destroyBackDrop() {\n    const sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (this.target && this.showBackdrop && sibling) {\n      removeClass([sibling], CONTEXTBACKDROP);\n    } else if (this.showBackdrop && this.modal) {\n      this.modal.style.display = 'none';\n      this.modal.outerHTML = '';\n      this.modal = null;\n    }\n  }\n  /* eslint-disable */\n\n  /**\n   * Hide the Sidebar component, if it is in an open state.\n   *\n   * @returns {void}\n   *\n   */\n\n\n  hide(e) {\n    const closeArguments = {\n      model: this,\n      element: this.element,\n      cancel: false,\n      isInteracted: !isNullOrUndefined(e),\n      event: e || null\n    };\n    this.trigger('close', closeArguments, observedcloseArgs => {\n      if (!observedcloseArgs.cancel) {\n        if (this.element.classList.contains(CLOSE)) {\n          return;\n        }\n\n        if (this.element.classList.contains(OPEN) && !this.animate) {\n          this.triggerChange();\n        }\n\n        addClass([this.element], CLOSE);\n        removeClass([this.element], OPEN);\n        setStyleAttribute(this.element, {\n          'width': formatUnit(this.enableDock ? this.dockSize : this.width)\n        });\n        this.setType(this.type);\n        const sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n        if (!this.enableDock && sibling) {\n          sibling.style.transform = 'translateX(' + 0 + 'px)';\n          sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = '0px';\n        }\n\n        this.destroyBackDrop();\n        this.setAnimation();\n\n        if (this.type === 'Slide') {\n          document.body.classList.remove('e-sidebar-overflow');\n        }\n\n        this.setProperties({\n          isOpen: false\n        }, true);\n\n        if (this.enableDock) {\n          setTimeout(() => this.setTimeOut(), 50);\n        }\n\n        EventHandler.add(this.element, 'transitionend', this.transitionEnd, this);\n      }\n    });\n  }\n\n  setTimeOut() {\n    const sibling = document.querySelector('.e-main-content') || this.targetEle;\n    const elementWidth = this.element.getBoundingClientRect().width;\n\n    if (this.element.classList.contains(OPEN) && sibling && !(this.type === 'Over' && this.enableDock)) {\n      if (this.position === 'Left') {\n        sibling.style.marginLeft = this.setDimension(this.width === 'auto' ? elementWidth : this.width);\n      } else {\n        sibling.style.marginRight = this.setDimension(this.width === 'auto' ? elementWidth : this.width);\n      }\n    } else if (this.element.classList.contains(CLOSE) && sibling) {\n      if (this.position === 'Left') {\n        sibling.style.marginLeft = this.setDimension(this.dockSize === 'auto' ? elementWidth : this.dockSize);\n      } else {\n        sibling.style.marginRight = this.setDimension(this.dockSize === 'auto' ? elementWidth : this.dockSize);\n      }\n    }\n  }\n  /* eslint-disable */\n\n  /**\n   * Shows the Sidebar component, if it is in closed state.\n   *\n   * @returns {void}\n   */\n\n\n  show(e) {\n    const openArguments = {\n      model: this,\n      element: this.element,\n      cancel: false,\n      isInteracted: !isNullOrUndefined(e),\n      event: e || null\n    };\n    this.trigger('open', openArguments, observedopenArgs => {\n      if (!observedopenArgs.cancel) {\n        removeClass([this.element], VISIBILITY);\n\n        if (this.element.classList.contains(OPEN)) {\n          return;\n        }\n\n        if (this.element.classList.contains(CLOSE) && !this.animate) {\n          this.triggerChange();\n        }\n\n        addClass([this.element], [OPEN, TRASITION]);\n        setStyleAttribute(this.element, {\n          'transform': ''\n        });\n        removeClass([this.element], CLOSE);\n        setStyleAttribute(this.element, {\n          'width': formatUnit(this.width)\n        });\n        this.setType(this.type);\n        this.createBackDrop();\n        this.setAnimation();\n\n        if (this.type === 'Slide') {\n          document.body.classList.add('e-sidebar-overflow');\n        }\n\n        this.setProperties({\n          isOpen: true\n        }, true);\n        EventHandler.add(this.element, 'transitionend', this.transitionEnd, this);\n      }\n    });\n  }\n\n  setAnimation() {\n    if (this.animate) {\n      removeClass([this.element], DISABLEANIMATION);\n    } else {\n      addClass([this.element], DISABLEANIMATION);\n    }\n  }\n\n  triggerChange() {\n    const changeArguments = {\n      name: 'change',\n      element: this.element\n    };\n    this.trigger('change', changeArguments);\n  }\n\n  setDock() {\n    if (this.enableDock && this.position === 'Left' && !this.getState()) {\n      setStyleAttribute(this.element, {\n        'transform': 'translateX(' + -100 + '%) translateX(' + this.setDimension(this.dockSize) + ')'\n      });\n    } else if (this.enableDock && this.position === 'Right' && !this.getState()) {\n      setStyleAttribute(this.element, {\n        'transform': 'translateX(' + 100 + '%) translateX(' + '-' + this.setDimension(this.dockSize) + ')'\n      });\n    }\n\n    if (this.element.classList.contains(CLOSE) && this.enableDock) {\n      setStyleAttribute(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    }\n  }\n\n  createBackDrop() {\n    if (this.target && this.showBackdrop && this.getState()) {\n      const sibling = document.querySelector('.e-main-content') || this.targetEle;\n      addClass([sibling], CONTEXTBACKDROP);\n    } else if (this.showBackdrop && !this.modal && this.getState()) {\n      this.modal = this.createElement('div');\n      this.modal.className = DEFAULTBACKDROP;\n      this.modal.style.display = 'block';\n      document.body.appendChild(this.modal);\n    }\n  }\n\n  getPersistData() {\n    return this.addOnPersist(['type', 'position', 'isOpen']);\n  }\n  /**\n   * Returns the current module name.\n   *\n   * @returns {string} - returns module name.\n   * @private\n   *\n   */\n\n\n  getModuleName() {\n    return 'sidebar';\n  }\n  /**\n   * Shows or hides the Sidebar based on the current state.\n   *\n   * @returns {void}\n   */\n\n\n  toggle() {\n    if (this.element.classList.contains(OPEN)) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  getState() {\n    return this.element.classList.contains(OPEN) ? true : false;\n  }\n\n  setMediaQuery() {\n    if (this.mediaQuery) {\n      let media = false;\n\n      if (typeof this.mediaQuery === 'string') {\n        media = window.matchMedia(this.mediaQuery).matches;\n      } else {\n        media = this.mediaQuery.matches;\n      }\n\n      if (media && this.windowWidth !== window.innerWidth) {\n        this.show();\n      } else if (this.getState() && this.windowWidth !== window.innerWidth) {\n        this.hide();\n      }\n    }\n  }\n\n  resize() {\n    if (this.type === 'Auto') {\n      if (Browser.isDevice) {\n        addClass([this.element], OVER);\n      } else {\n        addClass([this.element], PUSH);\n      }\n    }\n\n    this.setMediaQuery();\n\n    if (Browser.isDevice) {\n      this.windowWidth = window.innerWidth;\n    }\n  }\n\n  documentclickHandler(e) {\n    if (closest(e.target, '.' + CONTROL$1 + '' + '.' + ROOT$1)) {\n      return;\n    }\n\n    this.hide(e);\n  }\n\n  enableGestureHandler(args) {\n    if (!this.isOpen && this.position === 'Left' && args.swipeDirection === 'Right' && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {\n      this.show();\n    } else if (this.isOpen && this.position === 'Left' && args.swipeDirection === 'Left') {\n      this.hide();\n    } else if (this.isOpen && this.position === 'Right' && args.swipeDirection === 'Right') {\n      this.hide();\n    } else if (!this.isOpen && this.position === 'Right' && args.swipeDirection === 'Left' && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {\n      this.show();\n    }\n  }\n\n  setEnableGestures() {\n    if (this.enableGestures) {\n      this.mainContentEle = new Touch(document.body, {\n        swipe: this.enableGestureHandler.bind(this)\n      });\n      this.sidebarEle = new Touch(this.element, {\n        swipe: this.enableGestureHandler.bind(this)\n      });\n    } else {\n      if (this.mainContentEle && this.sidebarEle) {\n        this.mainContentEle.destroy();\n        this.sidebarEle.destroy();\n      }\n    }\n  }\n\n  wireEvents() {\n    this.setEnableGestures();\n    EventHandler.add(window, 'resize', this.resize, this);\n  }\n\n  unWireEvents() {\n    EventHandler.remove(window, 'resize', this.resize);\n    EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);\n\n    if (this.mainContentEle) {\n      this.mainContentEle.destroy();\n    }\n\n    if (this.sidebarEle) {\n      this.sidebarEle.destroy();\n    }\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {SidebarModel} newProp - specifies newProp value.\n   * @param {SidebarModel} oldProp - specifies oldProp value.\n   * @returns {void}\n   * @private\n   *\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    const sibling = document.querySelector('.e-main-content') || this.targetEle;\n    const isRendered = this.isServerRendered;\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'isOpen':\n          if (this.isOpen) {\n            this.show();\n          } else {\n            this.hide();\n          }\n\n          break;\n\n        case 'width':\n          this.setWidth();\n\n          if (!this.getState()) {\n            this.setDock();\n          }\n\n          break;\n\n        case 'animate':\n          this.setAnimation();\n          break;\n\n        case 'type':\n          this.checkType(false);\n          removeClass([this.element], [VISIBILITY]);\n          this.addClass();\n          addClass([this.element], this.type === 'Auto' ? Browser.isDevice ? ['e-over'] : ['e-push'] : ['e-' + this.type.toLowerCase()]);\n          break;\n\n        case 'position':\n          this.element.style.transform = '';\n          this.setDock();\n\n          if (sibling) {\n            sibling.style[this.position === 'Left' ? 'marginRight' : 'marginLeft'] = '0px';\n          }\n\n          if (this.position === 'Right') {\n            removeClass([this.element], LEFT);\n            addClass([this.element], RIGHT);\n          } else {\n            removeClass([this.element], RIGHT);\n            addClass([this.element], LEFT);\n          }\n\n          this.setType(this.type);\n          break;\n\n        case 'showBackdrop':\n          if (this.showBackdrop) {\n            this.createBackDrop();\n          } else {\n            if (this.modal) {\n              this.modal.style.display = 'none';\n              this.modal.outerHTML = '';\n              this.modal = null;\n            }\n          }\n\n          break;\n\n        case 'target':\n          if (typeof this.target === 'string') {\n            this.setProperties({\n              target: document.querySelector(this.target)\n            }, true);\n          }\n\n          if (isNullOrUndefined(this.target)) {\n            removeClass([this.element], SIDEBARABSOLUTE);\n            removeClass([oldProp.target], CONTEXT);\n            setStyleAttribute(sibling, {\n              'margin-left': 0,\n              'margin-right': 0\n            });\n            document.body.insertAdjacentElement('afterbegin', this.element);\n          }\n\n          this.isServerRendered = false;\n          super.refresh();\n          this.isServerRendered = isRendered;\n          break;\n\n        case 'closeOnDocumentClick':\n          this.setCloseOnDocumentClick();\n          break;\n\n        case 'enableDock':\n          if (!this.getState()) {\n            this.setDock();\n          }\n\n          break;\n\n        case 'zIndex':\n          this.setZindex();\n          break;\n\n        case 'mediaQuery':\n          this.setMediaQuery();\n          break;\n\n        case 'enableGestures':\n          this.setEnableGestures();\n          break;\n\n        case 'enableRtl':\n          this.setEnableRTL();\n          break;\n      }\n    }\n  }\n\n  setType(type) {\n    const elementWidth = this.element.getBoundingClientRect().width;\n    this.setZindex();\n    const sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (sibling) {\n      sibling.style.transform = 'translateX(' + 0 + 'px)';\n\n      if (!Browser.isDevice && this.type !== 'Auto' && !(this.type === 'Over' && this.enableDock)) {\n        sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = '0px';\n      }\n    }\n\n    const margin = this.position === 'Left' ? elementWidth + 'px' : elementWidth + 'px';\n    const eleWidth = this.position === 'Left' ? elementWidth : -elementWidth;\n    removeClass([this.element], [PUSH, OVER, SLIDE]);\n\n    switch (type) {\n      case 'Push':\n        addClass([this.element], [PUSH]);\n\n        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n          sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;\n        }\n\n        break;\n\n      case 'Slide':\n        addClass([this.element], [SLIDE]);\n\n        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n          sibling.style.transform = 'translateX(' + eleWidth + 'px)';\n        }\n\n        break;\n\n      case 'Over':\n        addClass([this.element], [OVER]);\n\n        if (this.enableDock && (this.element.classList.contains(CLOSE) || this.isOpen)) {\n          if (sibling) {\n            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = this.setDimension(this.dockSize);\n          }\n        }\n\n        break;\n\n      case 'Auto':\n        addClass([this.element], [TRASITION]);\n\n        if (Browser.isDevice) {\n          if (sibling && this.enableDock && !this.getState()) {\n            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;\n            addClass([this.element], PUSH);\n          } else {\n            addClass([this.element], OVER);\n          }\n        } else {\n          addClass([this.element], PUSH);\n\n          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;\n          }\n        }\n\n        this.createBackDrop();\n    }\n  }\n  /**\n   * Removes the control from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   *\n   * @returns {void}\n   *\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    if (this.target) {\n      removeClass([this.target], CONTEXT);\n    }\n\n    this.destroyBackDrop();\n\n    if (this.element) {\n      removeClass([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);\n      removeClass([this.element], SIDEBARABSOLUTE);\n      this.element.style.width = '';\n      this.element.style.zIndex = '';\n      this.element.style.transform = '';\n\n      if (!isNullOrUndefined(this.sidebarEleCopy.getAttribute('tabindex'))) {\n        this.element.setAttribute('tabindex', this.tabIndex);\n      } else {\n        this.element.removeAttribute('tabindex');\n      }\n    }\n\n    this.windowWidth = null;\n    const sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (!isNullOrUndefined(sibling)) {\n      sibling.style.margin = '';\n      sibling.style.transform = '';\n    }\n\n    this.unWireEvents();\n  }\n\n};\n\n__decorate$9([Property('auto')], Sidebar.prototype, \"dockSize\", void 0);\n\n__decorate$9([Property(null)], Sidebar.prototype, \"mediaQuery\", void 0);\n\n__decorate$9([Property(false)], Sidebar.prototype, \"enableDock\", void 0);\n\n__decorate$9([Property('en-US')], Sidebar.prototype, \"locale\", void 0);\n\n__decorate$9([Property(false)], Sidebar.prototype, \"enablePersistence\", void 0);\n\n__decorate$9([Property(true)], Sidebar.prototype, \"enableGestures\", void 0);\n\n__decorate$9([Property(false)], Sidebar.prototype, \"isOpen\", void 0);\n\n__decorate$9([Property(false)], Sidebar.prototype, \"enableRtl\", void 0);\n\n__decorate$9([Property(true)], Sidebar.prototype, \"animate\", void 0);\n\n__decorate$9([Property('auto')], Sidebar.prototype, \"height\", void 0);\n\n__decorate$9([Property(false)], Sidebar.prototype, \"closeOnDocumentClick\", void 0);\n\n__decorate$9([Property('Left')], Sidebar.prototype, \"position\", void 0);\n\n__decorate$9([Property(null)], Sidebar.prototype, \"target\", void 0);\n\n__decorate$9([Property(false)], Sidebar.prototype, \"showBackdrop\", void 0);\n\n__decorate$9([Property('Auto')], Sidebar.prototype, \"type\", void 0);\n\n__decorate$9([Property('auto')], Sidebar.prototype, \"width\", void 0);\n\n__decorate$9([Property(1000)], Sidebar.prototype, \"zIndex\", void 0);\n\n__decorate$9([Event()], Sidebar.prototype, \"created\", void 0);\n\n__decorate$9([Event()], Sidebar.prototype, \"close\", void 0);\n\n__decorate$9([Event()], Sidebar.prototype, \"open\", void 0);\n\n__decorate$9([Event()], Sidebar.prototype, \"change\", void 0);\n\n__decorate$9([Event()], Sidebar.prototype, \"destroyed\", void 0);\n\nSidebar = __decorate$9([NotifyPropertyChanges], Sidebar);\n/**\n * Sidebar modules\n */\n\nvar __decorate$10 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst ICONRIGHT = 'e-icon-right';\nconst ITEMTEXTCLASS = 'e-breadcrumb-text';\nconst ICONCLASS = 'e-breadcrumb-icon';\nconst MENUCLASS = 'e-breadcrumb-menu';\nconst ITEMCLASS = 'e-breadcrumb-item';\nconst POPUPCLASS = 'e-breadcrumb-popup';\nconst WRAPMODECLASS = 'e-breadcrumb-wrap-mode';\nconst SCROLLMODECLASS = 'e-breadcrumb-scroll-mode';\nconst TABINDEX = 'tabindex';\nconst DISABLEDCLASS = 'e-disabled';\nconst ARIADISABLED = 'aria-disabled';\nconst DOT = '.';\n\nclass BreadcrumbItem extends ChildProperty {}\n\n__decorate$10([Property('')], BreadcrumbItem.prototype, \"text\", void 0);\n\n__decorate$10([Property('')], BreadcrumbItem.prototype, \"url\", void 0);\n\n__decorate$10([Property(null)], BreadcrumbItem.prototype, \"iconCss\", void 0);\n\n__decorate$10([Property(false)], BreadcrumbItem.prototype, \"disabled\", void 0);\n/**\n * Breadcrumb is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.\n * The aim is to make the user aware of their current position in a hierarchy of website links.\n * ```html\n * <nav id='breadcrumb'></nav>\n * ```\n * ```typescript\n * <script>\n * var breadcrumbObj = new Breadcrumb({ items: [{ text: 'Home', url: '/' }, { text: 'Index', url: './index.html }]});\n * breadcrumbObj.appendTo(\"#breadcrumb\");\n * </script>\n * ```\n */\n\n\nlet Breadcrumb = class Breadcrumb extends Component {\n  /**\n   * Constructor for creating the widget.\n   *\n   * @private\n   * @param {BreadcrumbModel} options - Specifies the Breadcrumb model.\n   * @param {string | HTMLElement} element - Specifies the element.\n   */\n  constructor(options, element) {\n    super(options, element);\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {// pre render code\n  }\n  /**\n   * Initialize the control rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initialize();\n    this.renderItems(this.items);\n    this.wireEvents();\n  }\n\n  initialize() {\n    this._maxItems = this.maxItems;\n    this.element.setAttribute('aria-label', 'breadcrumb');\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n\n    if (this.enableRtl) {\n      this.element.classList.add('e-rtl');\n    }\n\n    if (this.disabled) {\n      this.element.classList.add(DISABLEDCLASS);\n      this.element.setAttribute(ARIADISABLED, 'true');\n    }\n\n    if (this.overflowMode === 'Wrap') {\n      this.element.classList.add(WRAPMODECLASS);\n    } else if (this.overflowMode === 'Scroll') {\n      this.element.classList.add(SCROLLMODECLASS);\n    }\n\n    this.initItems();\n    this.initPvtProps();\n  }\n\n  initPvtProps() {\n    if (this.overflowMode === 'Hidden' && this._maxItems > 0) {\n      this.endIndex = this.getEndIndex();\n      this.startIndex = this.endIndex + 1 - (this._maxItems - 1);\n    }\n\n    if (this.overflowMode === 'Menu') {\n      if (this._maxItems >= 0) {\n        this.startIndex = this._maxItems > 1 ? 1 : 0;\n        this.endIndex = this.getEndIndex();\n        this.popupUl = this.createElement('ul', {\n          attrs: {\n            TABINDEX: '0',\n            'role': 'menu'\n          }\n        });\n      } else {\n        this.startIndex = this.endIndex = null;\n      }\n    }\n  }\n\n  getEndIndex() {\n    let endIndex;\n\n    if (this.activeItem) {\n      this.items.forEach((item, idx) => {\n        if (item.url === this.activeItem || item.text === this.activeItem) {\n          endIndex = idx;\n        }\n      });\n    } else {\n      endIndex = this.items.length - 1;\n    }\n\n    return endIndex;\n  }\n\n  initItems() {\n    if (!this.items.length) {\n      let baseUri;\n      let uri;\n      const items = [];\n\n      if (this.url) {\n        const url = new URL(this.url, window.location.origin);\n        baseUri = url.origin + '/';\n        uri = url.href.split(baseUri)[1].split('/');\n      } else {\n        baseUri = window.location.origin + '/';\n        uri = window.location.href.split(baseUri)[1].split('/');\n      }\n\n      items.push({\n        iconCss: 'e-icons e-home',\n        url: baseUri\n      });\n\n      for (let i = 0; i < uri.length; i++) {\n        if (uri[i]) {\n          items.push({\n            text: uri[i],\n            url: baseUri + uri[i]\n          });\n          baseUri += uri[i] + '/';\n        }\n      }\n\n      this.setProperties({\n        items: items\n      }, true);\n    }\n  }\n\n  renderItems(items) {\n    let item;\n    let isSingleLevel;\n    const isIconRight = this.element.classList.contains(ICONRIGHT);\n    const itemsLength = items.length;\n\n    if (itemsLength) {\n      let isActiveItem;\n      let isLastItem;\n      let isLastItemInPopup;\n      let j = 0;\n      let wrapDiv;\n      const len = itemsLength * 2 - 1;\n      let isItemCancelled = false;\n      const ol = this.createElement('ol', {\n        className: this.overflowMode === 'Wrap' ? 'e-breadcrumb-wrapped-ol' : ''\n      });\n      const firstOl = this.createElement('ol', {\n        className: this.overflowMode === 'Wrap' ? 'e-breadcrumb-first-ol' : ''\n      });\n      const showIcon = this.hasField(items, 'iconCss');\n      const isCollasped = this.overflowMode === 'Collapsed' && this._maxItems > 0 && itemsLength > this._maxItems && !this.isExpanded;\n      const isDefaultOverflowMode = this.overflowMode === 'Hidden' && this._maxItems > 0;\n\n      if (this.overflowMode === 'Menu' && this.popupUl) {\n        this.popupUl.innerHTML = '';\n      }\n\n      const listBaseOptions = {\n        moduleName: this.getModuleName(),\n        showIcon: showIcon,\n        itemNavigable: true,\n        itemCreated: args => {\n          const isLastItem = args.curData.isLastItem;\n\n          if (isLastItem && args.item.children.length && !this.itemTemplate) {\n            delete args.curData.isLastItem;\n\n            if (!isLastItemInPopup && !this.enableActiveItemNavigation) {\n              args.item.innerHTML = this.createElement('span', {\n                className: ITEMTEXTCLASS,\n                innerHTML: args.item.children[0].innerHTML\n              }).outerHTML;\n            }\n          }\n\n          if (args.curData.iconCss && !args.curData.text && !this.itemTemplate) {\n            args.item.classList.add('e-icon-item');\n          }\n\n          if (isDefaultOverflowMode) {\n            args.item.setAttribute('item-index', j.toString());\n          }\n\n          const eventArgs = {\n            item: extend({}, args.curData.properties ? args.curData.properties : args.curData),\n            element: args.item,\n            cancel: false\n          };\n          this.trigger('beforeItemRender', eventArgs);\n          isItemCancelled = eventArgs.cancel;\n          const containsRightIcon = isIconRight || eventArgs.element.classList.contains(ICONRIGHT);\n\n          if (containsRightIcon && args.curData.iconCss && !this.itemTemplate) {\n            args.item.querySelector('.e-anchor-wrap').appendChild(args.item.querySelector(DOT + ICONCLASS));\n          }\n\n          if (eventArgs.item.disabled) {\n            args.item.setAttribute(ARIADISABLED, 'true');\n            args.item.classList.add(DISABLEDCLASS);\n          }\n\n          if ((eventArgs.item.disabled || this.disabled) && args.item.children.length && !this.itemTemplate) {\n            args.item.children[0].setAttribute(TABINDEX, '-1');\n          }\n\n          if (args.curData.isEmptyUrl) {\n            args.item.children[0].removeAttribute('href');\n\n            if ((!isLastItem || isLastItem && this.enableActiveItemNavigation) && !(eventArgs.item.disabled || this.disabled)) {\n              args.item.children[0].setAttribute(TABINDEX, '0');\n              EventHandler.add(args.item.children[0], 'keydown', this.keyDownHandler, this);\n            }\n          }\n\n          if (isLastItem) {\n            args.item.setAttribute('data-active-item', '');\n          }\n\n          if (!this.itemTemplate) {\n            this.beforeItemRenderChanges(args.curData, eventArgs.item, args.item, containsRightIcon);\n          }\n        }\n      };\n\n      for (let i = 0; i < len; i % 2 && j++, i++) {\n        isActiveItem = this.activeItem && (this.activeItem === items[j].url || this.activeItem === items[j].text);\n\n        if (isCollasped && i > 1 && i < len - 2) {\n          continue;\n        } else if (isDefaultOverflowMode && (j < this.startIndex || j > this.endIndex) && (i % 2 ? j !== this.startIndex - 1 : true) && j !== 0) {\n          continue;\n        }\n\n        if (i % 2) {\n          // separator item\n          wrapDiv = this.createElement('div', {\n            className: 'e-breadcrumb-item-wrapper'\n          });\n          listBaseOptions.template = this.separatorTemplate ? this.separatorTemplate : '/';\n          listBaseOptions.itemClass = 'e-breadcrumb-separator';\n          isSingleLevel = false;\n          item = [{\n            previousItem: items[j],\n            nextItem: items[j + 1]\n          }];\n        } else {\n          // list item\n          listBaseOptions.itemClass = '';\n\n          if (this.itemTemplate) {\n            listBaseOptions.template = this.itemTemplate;\n            isSingleLevel = false;\n          } else {\n            isSingleLevel = true;\n          }\n\n          item = [extend({}, items[j].properties ? items[j].properties : items[j])];\n\n          if (!item[0].url && !this.itemTemplate) {\n            item = [extend({}, item[0], {\n              isEmptyUrl: true,\n              url: '#'\n            })];\n          }\n\n          isLastItem = (isDefaultOverflowMode || this.overflowMode === 'Menu') && j === this.endIndex;\n\n          if ((i === len - 1 || isLastItem) && !this.itemTemplate || isActiveItem) {\n            item[0].isLastItem = true;\n          }\n        }\n\n        let parent = ol;\n        const lastPopupItemIdx = this.startIndex + this.endIndex - this._maxItems;\n\n        if (this.overflowMode === 'Menu' && (j >= this.startIndex && j <= lastPopupItemIdx && (i % 2 ? !(j === lastPopupItemIdx) : true) && this.endIndex >= this._maxItems && this._maxItems > 0 || this._maxItems === 0)) {\n          if (i % 2) {\n            continue;\n          } else {\n            parent = this.popupUl;\n\n            if (isLastItem) {\n              isLastItemInPopup = true;\n            }\n          }\n        } else if (this.overflowMode === 'Wrap') {\n          if (i === 0) {\n            parent = firstOl;\n          } else {\n            parent = wrapDiv;\n          }\n        }\n\n        const li = ListBase.createList(this.createElement, item, listBaseOptions, isSingleLevel, this).childNodes;\n\n        if (!isItemCancelled) {\n          append(li, parent);\n        } else if (isDefaultOverflowMode || isCollasped || this.overflowMode === 'Menu' || this.overflowMode === 'Wrap') {\n          items.splice(j, 1);\n          this.initPvtProps();\n          return this.reRenderItems();\n        } else if (i === len - 1 || isLastItem) {\n          remove(parent.lastElementChild);\n        }\n\n        if (this.overflowMode === 'Wrap' && i !== 0 && i % 2 === 0) {\n          ol.appendChild(wrapDiv);\n        }\n\n        if (isCollasped && i === 1) {\n          const li = this.createElement('li', {\n            className: 'e-icons e-breadcrumb-collapsed',\n            attrs: {\n              TABINDEX: '0'\n            }\n          });\n          EventHandler.add(li, 'keyup', this.expandHandler, this);\n          ol.appendChild(li);\n        }\n\n        if (this.overflowMode === 'Menu' && this.startIndex === i && this.endIndex >= this._maxItems && this._maxItems >= 0) {\n          const menu = this.getMenuElement();\n          EventHandler.add(menu, 'keyup', this.keyDownHandler, this);\n          ol.appendChild(menu);\n        }\n\n        if (isActiveItem || isLastItem) {\n          break;\n        }\n\n        if (isItemCancelled) {\n          i++;\n        }\n      }\n\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n\n      if (this.overflowMode === 'Wrap') {\n        this.element.appendChild(firstOl);\n      }\n\n      this.element.appendChild(ol);\n      this.calculateMaxItems();\n    }\n  }\n\n  calculateMaxItems() {\n    if (this.overflowMode === 'Hidden' || this.overflowMode === 'Collapsed' || this.overflowMode === 'Menu') {\n      let maxItems;\n      const width = this.element.offsetWidth;\n      const liElems = [].slice.call(this.element.children[0].children).reverse();\n      let liWidth = this.overflowMode === 'Menu' ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);\n\n      if (this.overflowMode === 'Menu') {\n        const menuEle = this.getMenuElement();\n        this.element.appendChild(menuEle);\n        liWidth += menuEle.offsetWidth;\n        remove(menuEle);\n      }\n\n      for (let i = 0; i < liElems.length - 2; i++) {\n        if (liWidth > width) {\n          maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === 'Menu' && i <= 2 ? 0 : 1);\n\n          if ((this.maxItems > maxItems && !(this.maxItems > -1 && maxItems == -1) || this.maxItems == -1) && this._maxItems != maxItems) {\n            this._maxItems = maxItems;\n            this.initPvtProps();\n            return this.reRenderItems();\n          } else {\n            break;\n          }\n        } else {\n          if (this.overflowMode === 'Menu' && i === 2) {\n            liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;\n\n            if (liWidth > width) {\n              this._maxItems = 1;\n              this.initPvtProps();\n              return this.reRenderItems();\n            }\n          }\n\n          if (!(this.overflowMode === 'Menu' && liElems[i].classList.contains(MENUCLASS))) {\n            liWidth += liElems[i].offsetWidth;\n          }\n        }\n      }\n    } else if ((this.overflowMode === 'Wrap' || this.overflowMode === 'Scroll') && this._maxItems > 0) {\n      let width = 0;\n      const liElems = this.element.querySelectorAll(DOT + ITEMCLASS);\n\n      if (liElems.length > this._maxItems + this._maxItems - 1) {\n        for (let i = this.overflowMode === 'Wrap' ? 1 : 0; i < this._maxItems + this._maxItems - 1; i++) {\n          width += liElems[i].offsetWidth;\n        }\n\n        width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;\n\n        if (this.overflowMode === 'Wrap') {\n          this.element.querySelector('.e-breadcrumb-wrapped-ol').style.width = width + 'px';\n        } else {\n          this.element.style.width = width + 'px';\n        }\n      }\n    }\n  }\n\n  hasField(items, field) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      if (items[i][field]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getMenuElement() {\n    return this.createElement('li', {\n      className: 'e-icons e-breadcrumb-menu',\n      attrs: {\n        TABINDEX: '0'\n      }\n    });\n  }\n\n  beforeItemRenderChanges(prevItem, currItem, elem, isRightIcon) {\n    const wrapElem = elem.querySelector('.e-anchor-wrap');\n\n    if (currItem.text !== prevItem.text) {\n      wrapElem.childNodes.forEach(child => {\n        if (child.nodeType === Node.TEXT_NODE) {\n          child.textContent = currItem.text;\n        }\n      });\n    }\n\n    if (currItem.iconCss !== prevItem.iconCss && wrapElem) {\n      // wrapElem - for checking it is item not a separator\n      const iconElem = elem.querySelector(DOT + ICONCLASS);\n\n      if (iconElem) {\n        if (currItem.iconCss) {\n          removeClass([iconElem], prevItem.iconCss.split(' '));\n          addClass([iconElem], currItem.iconCss.split(' '));\n        } else {\n          remove(iconElem);\n        }\n      } else if (currItem.iconCss) {\n        const iconElem = this.createElement('span', {\n          className: ICONCLASS + ' ' + currItem.iconCss\n        });\n\n        if (isRightIcon) {\n          append([iconElem], wrapElem);\n        } else {\n          wrapElem.insertBefore(iconElem, wrapElem.childNodes[0]);\n        }\n      }\n    }\n\n    if (currItem.url !== prevItem.url && this.enableNavigation) {\n      const anchor = elem.querySelector('a.' + ITEMTEXTCLASS);\n\n      if (anchor) {\n        if (currItem.url) {\n          anchor.setAttribute('href', currItem.url);\n        } else {\n          anchor.removeAttribute('href');\n        }\n      }\n    }\n  }\n\n  reRenderItems() {\n    this.element.innerHTML = '';\n    this.renderItems(this.items);\n  }\n\n  clickHandler(e) {\n    const li = closest(e.target, DOT + ITEMCLASS + ':not(.e-breadcrumb-separator)');\n\n    if (!this.enableNavigation) {\n      e.preventDefault();\n    }\n\n    if (li && (closest(e.target, DOT + ITEMTEXTCLASS) || this.itemTemplate)) {\n      let idx;\n\n      if (this.overflowMode === 'Wrap') {\n        idx = [].slice.call(this.element.querySelectorAll(DOT + ITEMCLASS)).indexOf(li);\n      } else {\n        idx = [].slice.call(li.parentElement.children).indexOf(li);\n      }\n\n      if (this.overflowMode === 'Menu') {\n        if (closest(e.target, DOT + POPUPCLASS)) {\n          idx += this.startIndex;\n          this.endIndex = idx;\n\n          if (e.type === 'keydown') {\n            this.documentClickHandler(e);\n          }\n        } else if (this.element.querySelector(DOT + MENUCLASS)) {\n          if (idx > [].slice.call(this.element.children[0].children).indexOf(this.element.querySelector(DOT + MENUCLASS))) {\n            idx += this.popupUl.childElementCount * 2 - 2;\n            idx = Math.floor(idx / 2);\n            this.endIndex = idx;\n          } else {\n            this.startIndex = this.endIndex = idx;\n          }\n        } else {\n          idx = Math.floor(idx / 2);\n          this.startIndex = this.endIndex = idx;\n        }\n      } else {\n        idx = Math.floor(idx / 2);\n      }\n\n      if (this.overflowMode === 'Hidden' && this._maxItems > 0 && this.endIndex !== 0) {\n        idx = parseInt(li.getAttribute('item-index'), 10);\n\n        if (this.startIndex > 1) {\n          this.startIndex -= this.endIndex - idx;\n        }\n\n        this.endIndex = idx;\n      }\n\n      this.trigger('itemClick', {\n        element: li,\n        item: this.items[idx],\n        event: e\n      });\n      this.activeItem = this.items[idx].url || this.items[idx].text;\n      this.dataBind();\n    }\n\n    if (e.target.classList.contains('e-breadcrumb-collapsed')) {\n      this.isExpanded = true;\n      this.reRenderItems();\n    }\n\n    if (e.target.classList.contains(MENUCLASS)) {\n      this.renderPopup();\n    }\n  }\n\n  renderPopup() {\n    const wrapper = this.createElement('div', {\n      className: POPUPCLASS + ' ' + this.cssClass + (this.enableRtl ? ' e-rtl' : '')\n    });\n    document.body.appendChild(wrapper);\n    this.popupObj = new Popup(wrapper, {\n      content: this.popupUl,\n      relateTo: this.element.querySelector(DOT + MENUCLASS),\n      enableRtl: this.enableRtl,\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      collision: {\n        X: 'fit',\n        Y: 'flip'\n      },\n      open: () => {\n        this.popupUl.focus();\n      }\n    });\n    this.popupWireEvents();\n    this.popupObj.show();\n  }\n\n  documentClickHandler(e) {\n    if (this.overflowMode === 'Menu' && this.popupObj && this.popupObj.element.classList.contains('e-popup-open') && !closest(e.target, DOT + MENUCLASS)) {\n      this.popupObj.hide();\n      this.popupObj.destroy();\n      detach(this.popupObj.element);\n    }\n  }\n\n  resize() {\n    this._maxItems = this.maxItems;\n    this.initPvtProps();\n    this.reRenderItems();\n  }\n\n  expandHandler(e) {\n    if (e.key === 'Enter') {\n      this.isExpanded = true;\n      this.reRenderItems();\n    }\n  }\n\n  keyDownHandler(e) {\n    if (e.key === 'Enter') {\n      this.clickHandler(e);\n    }\n  }\n\n  popupKeyDownHandler(e) {\n    if (e.key === 'Escape') {\n      this.documentClickHandler(e);\n    }\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @private\n   * @param {BreadcrumbModel} newProp - Specifies the new properties.\n   * @param {BreadcrumbModel} oldProp - Specifies the old properties.\n   * @returns {void}\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'items':\n        case 'enableActiveItemNavigation':\n          this.reRenderItems();\n          break;\n\n        case 'activeItem':\n          this._maxItems = this.maxItems;\n          this.initPvtProps();\n          this.reRenderItems();\n          break;\n\n        case 'overflowMode':\n        case 'maxItems':\n          this._maxItems = this.maxItems;\n          this.initPvtProps();\n          this.reRenderItems();\n\n          if (oldProp.overflowMode === 'Wrap') {\n            this.element.classList.remove(WRAPMODECLASS);\n          } else if (newProp.overflowMode === 'Wrap') {\n            this.element.classList.add(WRAPMODECLASS);\n          }\n\n          if (oldProp.overflowMode === 'Scroll') {\n            this.element.classList.remove(SCROLLMODECLASS);\n          } else if (newProp.overflowMode === 'Scroll') {\n            this.element.classList.add(SCROLLMODECLASS);\n          }\n\n          break;\n\n        case 'url':\n          this.initItems();\n          this.reRenderItems();\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n\n          if (oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1 && !(newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) || !(oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1) && newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) {\n            this.reRenderItems();\n          }\n\n          break;\n\n        case 'enableRtl':\n          this.element.classList.toggle('e-rtl');\n          break;\n\n        case 'disabled':\n          this.element.classList.toggle(DISABLEDCLASS);\n          this.element.setAttribute(ARIADISABLED, newProp.disabled + '');\n          break;\n      }\n    }\n  }\n\n  wireEvents() {\n    this.delegateClickHanlder = this.documentClickHandler.bind(this);\n    EventHandler.add(document, 'click', this.delegateClickHanlder, this);\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    window.addEventListener('resize', this.resize.bind(this));\n  }\n\n  popupWireEvents() {\n    EventHandler.add(this.popupObj.element, 'click', this.clickHandler, this);\n    EventHandler.add(this.popupObj.element, 'keydown', this.popupKeyDownHandler, this);\n  }\n\n  unWireEvents() {\n    EventHandler.remove(document, 'click', this.delegateClickHanlder);\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    window.removeEventListener('resize', this.resize.bind(this));\n\n    if (this.popupObj) {\n      EventHandler.remove(this.popupObj.element, 'click', this.clickHandler);\n      EventHandler.remove(this.popupObj.element, 'keydown', this.popupKeyDownHandler);\n    }\n  }\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n\n\n  getPersistData() {\n    return this.addOnPersist(['activeItem']);\n  }\n  /**\n   * Get module name.\n   *\n   * @private\n   * @returns {string} - Module Name\n   */\n\n\n  getModuleName() {\n    return 'breadcrumb';\n  }\n  /**\n   * Destroys the widget.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    let classes = [];\n    let attributes$$1 = ['aria-label'];\n\n    if (this.cssClass) {\n      classes.concat(this.cssClass.split(' '));\n    }\n\n    if (this.enableRtl) {\n      classes.push('e-rtl');\n    }\n\n    if (this.disabled) {\n      classes.push(DISABLEDCLASS);\n      attributes$$1.push(ARIADISABLED);\n    }\n\n    if (this.overflowMode === 'Wrap') {\n      classes.push(WRAPMODECLASS);\n    } else if (this.overflowMode === 'Scroll') {\n      classes.push(SCROLLMODECLASS);\n    }\n\n    this.unWireEvents();\n    this.element.innerHTML = '';\n    removeClass([this.element], classes);\n    attributes$$1.forEach(attribute => {\n      this.element.removeAttribute(attribute);\n    });\n    super.destroy();\n  }\n\n};\n\n__decorate$10([Property('')], Breadcrumb.prototype, \"url\", void 0);\n\n__decorate$10([Collection([], BreadcrumbItem)], Breadcrumb.prototype, \"items\", void 0);\n\n__decorate$10([Property('')], Breadcrumb.prototype, \"activeItem\", void 0);\n\n__decorate$10([Property(-1)], Breadcrumb.prototype, \"maxItems\", void 0);\n\n__decorate$10([Property('Menu')], Breadcrumb.prototype, \"overflowMode\", void 0);\n\n__decorate$10([Property('')], Breadcrumb.prototype, \"cssClass\", void 0);\n\n__decorate$10([Property(null)], Breadcrumb.prototype, \"itemTemplate\", void 0);\n\n__decorate$10([Property('/')], Breadcrumb.prototype, \"separatorTemplate\", void 0);\n\n__decorate$10([Property(true)], Breadcrumb.prototype, \"enableNavigation\", void 0);\n\n__decorate$10([Property(false)], Breadcrumb.prototype, \"enableActiveItemNavigation\", void 0);\n\n__decorate$10([Property(false)], Breadcrumb.prototype, \"disabled\", void 0);\n\n__decorate$10([Property('')], Breadcrumb.prototype, \"locale\", void 0);\n\n__decorate$10([Event()], Breadcrumb.prototype, \"beforeItemRender\", void 0);\n\n__decorate$10([Event()], Breadcrumb.prototype, \"itemClick\", void 0);\n\n__decorate$10([Event()], Breadcrumb.prototype, \"created\", void 0);\n\nBreadcrumb = __decorate$10([NotifyPropertyChanges], Breadcrumb);\n/**\n * Breadcrumb modules\n */\n\nvar __decorate$11 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// Constant variables\n\n\nconst CLS_CAROUSEL = 'e-carousel';\nconst CLS_ACTIVE$2 = 'e-active';\nconst CLS_RTL$5 = 'e-rtl';\nconst CLS_ITEMS$2 = 'e-carousel-items';\nconst CLS_ITEM$3 = 'e-carousel-item';\nconst CLS_PREVIOUS = 'e-previous';\nconst CLS_NEXT = 'e-next';\nconst CLS_PREV_ICON = 'e-previous-icon';\nconst CLS_NEXT_ICON = 'e-next-icon';\nconst CLS_NAVIGATORS = 'e-carousel-navigators';\nconst CLS_INDICATORS = 'e-carousel-indicators';\nconst CLS_INDICATOR_BARS = 'e-indicator-bars';\nconst CLS_INDICATOR_BAR = 'e-indicator-bar';\nconst CLS_INDICATOR$1 = 'e-indicator';\nconst CLS_ICON$1 = 'e-icons';\nconst CLS_PLAY_PAUSE = 'e-play-pause';\nconst CLS_PLAY_ICON = 'e-play-icon';\nconst CLS_PAUSE_ICON = 'e-pause-icon';\nconst CLS_PREV_BUTTON = 'e-previous-button';\nconst CLS_NEXT_BUTTON = 'e-next-button';\nconst CLS_PLAY_BUTTON = 'e-play-button';\nconst CLS_FLAT = 'e-flat';\nconst CLS_ROUND = 'e-round';\nconst CLS_HOVER_ARROWS = 'e-hover-arrows';\nconst CLS_HOVER = 'e-carousel-hover';\nconst CLS_TEMPLATE$2 = 'e-template';\nconst CLS_SLIDE_ANIMATION = 'e-carousel-slide-animation';\nconst CLS_FADE_ANIMATION = 'e-carousel-fade-animation';\nconst CLS_CUSTOM_ANIMATION = 'e-carousel-custom-animation';\nconst CLS_ANIMATION_NONE = \"e-carousel-animation-none\";\nconst CLS_PREV_SLIDE = 'e-prev';\nconst CLS_NEXT_SLIDE = 'e-next';\nconst CLS_TRANSITION_START = 'e-transition-start';\nconst CLS_TRANSITION_END = 'e-transition-end';\n/** Specifies the carousel individual item. */\n\nclass CarouselItem extends ChildProperty {}\n\n__decorate$11([Property()], CarouselItem.prototype, \"cssClass\", void 0);\n\n__decorate$11([Property()], CarouselItem.prototype, \"interval\", void 0);\n\n__decorate$11([Property()], CarouselItem.prototype, \"template\", void 0);\n\n__decorate$11([Property()], CarouselItem.prototype, \"htmlAttributes\", void 0);\n\nlet Carousel = class Carousel extends Component {\n  /**\n   * Constructor for creating the Carousel widget\n   *\n   * @param {CarouselModel} options Accepts the carousel model properties to initiate the rendering\n   * @param {string | HTMLElement} element Accepts the DOM element reference\n   */\n  constructor(options, element) {\n    super(options, element);\n  }\n\n  getModuleName() {\n    return CLS_CAROUSEL.replace('e-', '');\n  }\n\n  getPersistData() {\n    return this.addOnPersist(['selectedIndex']);\n  }\n\n  preRender() {\n    this.keyConfigs = {\n      home: 'home',\n      end: 'end',\n      space: 'space',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow'\n    };\n    const defaultLocale = {\n      nextSlide: 'Next slide',\n      of: 'of',\n      pauseSlideTransition: 'Pause slide transition',\n      playSlideTransition: 'Play slide transition',\n      previousSlide: 'Previous slide',\n      slide: 'Slide',\n      slideShow: 'Slide show'\n    };\n    this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);\n  }\n\n  render() {\n    this.initialize();\n    this.renderSlides();\n    this.renderNavigators();\n    this.renderPlayButton();\n    this.renderIndicators();\n    this.applyAnimation();\n    this.wireEvents();\n  }\n\n  onPropertyChanged(newProp, oldProp) {\n    let target;\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'animationEffect':\n          this.applyAnimation();\n          break;\n\n        case 'cssClass':\n          classList(this.element, [newProp.cssClass], [oldProp.cssClass]);\n          break;\n\n        case 'selectedIndex':\n          this.setActiveSlide(this.selectedIndex, oldProp.selectedIndex > this.selectedIndex ? 'Previous' : 'Next');\n          this.autoSlide();\n          break;\n\n        case 'htmlAttributes':\n          if (!isNullOrUndefined(this.htmlAttributes)) {\n            this.setHtmlAttributes(this.htmlAttributes, this.element);\n          }\n\n          break;\n\n        case 'enableTouchSwipe':\n          if (!this.enableTouchSwipe && this.touchModule) {\n            this.touchModule.destroy();\n          }\n\n          if (this.element.querySelector(`.${CLS_ITEMS$2}`)) {\n            this.renderTouchActions();\n          }\n\n          break;\n\n        case 'loop':\n          if (this.loop && isNullOrUndefined(this.autoSlideInterval)) {\n            this.applySlideInterval();\n          }\n\n          this.handleNavigatorsActions(this.selectedIndex);\n          break;\n\n        case 'enableRtl':\n          if (this.enableRtl) {\n            addClass([this.element], CLS_RTL$5);\n          } else {\n            removeClass([this.element], CLS_RTL$5);\n          }\n\n          break;\n\n        case 'buttonsVisibility':\n          target = this.element.querySelector(`.${CLS_NAVIGATORS}`);\n\n          if (target) {\n            switch (this.buttonsVisibility) {\n              case 'Hidden':\n                this.resetTemplates(['previousButtonTemplate', 'nextButtonTemplate']);\n                remove(target);\n                break;\n\n              case 'VisibleOnHover':\n                addClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);\n                break;\n\n              case 'Visible':\n                removeClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);\n                break;\n            }\n          } else {\n            this.renderNavigators();\n            this.renderPlayButton();\n          }\n\n          break;\n\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': formatUnit(this.width)\n          });\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(this.height)\n          });\n          break;\n\n        case 'autoPlay':\n          if (this.showPlayButton && isNullOrUndefined(this.playButtonTemplate)) {\n            this.playButtonClickHandler(null, true);\n          }\n\n          this.autoSlide();\n          break;\n\n        case 'interval':\n          this.autoSlide();\n          break;\n\n        case 'showIndicators':\n          target = this.element.querySelector(`.${CLS_INDICATORS}`);\n\n          if (!this.showIndicators && target) {\n            this.resetTemplates(['indicatorsTemplate']);\n            remove(target);\n          }\n\n          this.renderIndicators();\n          break;\n\n        case 'showPlayButton':\n          target = this.element.querySelector(`.${CLS_PLAY_PAUSE}`);\n\n          if (!this.showPlayButton && target) {\n            remove(target);\n            this.resetTemplates(['playButtonTemplate']);\n          }\n\n          this.renderPlayButton();\n          break;\n\n        case 'items':\n        case 'dataSource':\n          target = this.element.querySelector(`.${CLS_ITEMS$2}`);\n\n          if (target) {\n            this.resetTemplates(['itemTemplate']);\n            remove(target);\n          }\n\n          this.renderSlides();\n          break;\n      }\n    }\n  }\n\n  initialize() {\n    const carouselClasses = [];\n\n    if (this.cssClass) {\n      carouselClasses.push(this.cssClass);\n    }\n\n    if (this.enableRtl) {\n      carouselClasses.push(CLS_RTL$5);\n    }\n\n    addClass([this.element], carouselClasses);\n    setStyleAttribute(this.element, {\n      'width': formatUnit(this.width),\n      'height': formatUnit(this.height)\n    });\n    attributes(this.element, {\n      'tabindex': '0',\n      'aria-roledescription': 'carousel',\n      'aria-label': this.localeObj.getConstant('slideShow')\n    });\n\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      this.setHtmlAttributes(this.htmlAttributes, this.element);\n    }\n  }\n\n  renderSlides() {\n    const itemsContainer = this.createElement('div', {\n      className: CLS_ITEMS$2,\n      attrs: {\n        'aria-live': this.autoPlay ? 'off' : 'polite'\n      }\n    });\n    this.element.appendChild(itemsContainer);\n\n    if (this.items.length > 0) {\n      this.slideItems = this.items;\n      this.items.forEach((item, index) => {\n        this.renderSlide(item, item.template, index, itemsContainer);\n      });\n    } else if (this.dataSource.length > 0) {\n      this.slideItems = this.dataSource;\n      this.dataSource.forEach((item, index) => {\n        this.renderSlide(item, this.itemTemplate, index, itemsContainer);\n      });\n    }\n\n    this.renderTemplates();\n    this.autoSlide();\n    this.renderTouchActions();\n    this.renderKeyboardActions();\n  }\n\n  renderSlide(item, itemTemplate, index, container) {\n    const itemEle = this.createElement('div', {\n      id: getUniqueID('carousel_item'),\n      className: `${CLS_ITEM$3} ${item.cssClass ? item.cssClass : ''} ${this.selectedIndex === index ? CLS_ACTIVE$2 : ''}`,\n      attrs: {\n        'aria-hidden': this.selectedIndex === index ? 'false' : 'true',\n        'data-index': index.toString(),\n        'aria-role': 'group',\n        'aria-roledescription': 'slide'\n      }\n    });\n\n    if (!isNullOrUndefined(item.htmlAttributes)) {\n      this.setHtmlAttributes(item.htmlAttributes, itemEle);\n    }\n\n    const templateId = this.element.id + '_template';\n    const template = this.templateParser(itemTemplate)(item, this, 'itemTemplate', templateId, false);\n    append(template, itemEle);\n    container.appendChild(itemEle);\n  }\n\n  renderNavigators() {\n    if (this.buttonsVisibility === 'Hidden') {\n      return;\n    }\n\n    const navigators = this.createElement('div', {\n      className: CLS_NAVIGATORS\n    });\n    const itemsContainer = this.element.querySelector(`.${CLS_ITEMS$2}`);\n    itemsContainer.insertAdjacentElement('afterend', navigators);\n    this.renderNavigatorButton('Previous');\n    this.renderNavigatorButton('Next');\n    this.renderTemplates();\n  }\n\n  renderNavigatorButton(direction) {\n    const buttonContainer = this.createElement('div', {\n      className: (direction === 'Previous' ? CLS_PREVIOUS : CLS_NEXT) + ' ' + (this.buttonsVisibility === 'VisibleOnHover' ? CLS_HOVER_ARROWS : ''),\n      attrs: {\n        'aria-label': this.localeObj.getConstant(direction === 'Previous' ? 'previousSlide' : 'nextSlide')\n      }\n    });\n\n    if (direction === 'Previous' && this.previousButtonTemplate) {\n      addClass([buttonContainer], CLS_TEMPLATE$2);\n      const templateId = this.element.id + '_previousButtonTemplate';\n      const template = this.templateParser(this.previousButtonTemplate)({\n        type: 'Previous'\n      }, this, 'previousButtonTemplate', templateId, false);\n      append(template, buttonContainer);\n    } else if (direction === 'Next' && this.nextButtonTemplate) {\n      addClass([buttonContainer], CLS_TEMPLATE$2);\n      const templateId = this.element.id + '_nextButtonTemplate';\n      const template = this.templateParser(this.nextButtonTemplate)({\n        type: 'Next'\n      }, this, 'nextButtonTemplate', templateId, false);\n      append(template, buttonContainer);\n    } else {\n      const button = this.createElement('button');\n      const buttonObj = new Button({\n        cssClass: CLS_FLAT + ' ' + CLS_ROUND + ' ' + (direction === 'Previous' ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON),\n        iconCss: CLS_ICON$1 + ' ' + (direction === 'Previous' ? CLS_PREV_ICON : CLS_NEXT_ICON),\n        enableRtl: this.enableRtl,\n        disabled: !this.loop && this.selectedIndex === (direction === 'Previous' ? 0 : this.slideItems.length - 1)\n      });\n      buttonObj.appendTo(button);\n      buttonContainer.appendChild(button);\n    }\n\n    this.element.querySelector('.' + CLS_NAVIGATORS).appendChild(buttonContainer);\n    EventHandler.add(buttonContainer, 'click', this.navigatorClickHandler, this);\n  }\n\n  renderPlayButton() {\n    if (this.buttonsVisibility === 'Hidden' || !this.showPlayButton) {\n      return;\n    }\n\n    const playPauseWrap = this.createElement('div', {\n      className: CLS_PLAY_PAUSE + ' ' + (this.buttonsVisibility === 'VisibleOnHover' ? CLS_HOVER_ARROWS : '')\n    });\n\n    if (this.playButtonTemplate) {\n      addClass([playPauseWrap], CLS_TEMPLATE$2);\n      const templateId = this.element.id + '_playButtonTemplate';\n      const template = this.templateParser(this.playButtonTemplate)({}, this, 'playButtonTemplate', templateId, false);\n      append(template, playPauseWrap);\n    } else {\n      const playButton = this.createElement('button', {\n        attrs: {\n          'aria-label': this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition')\n        }\n      });\n      const isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;\n      const buttonObj = new Button({\n        cssClass: CLS_FLAT + ' ' + CLS_ROUND + ' ' + CLS_PLAY_BUTTON,\n        iconCss: CLS_ICON$1 + ' ' + (this.autoPlay && !isLastSlide ? CLS_PAUSE_ICON : CLS_PLAY_ICON),\n        isToggle: true,\n        enableRtl: this.enableRtl\n      });\n\n      if (isLastSlide) {\n        this.setProperties({\n          autoPlay: false\n        }, true);\n        playButton.setAttribute('aria-label', this.localeObj.getConstant('playSlideTransition'));\n        const itemsContainer = this.element.querySelector(`.${CLS_ITEMS$2}`);\n        itemsContainer.setAttribute('aria-live', 'polite');\n      }\n\n      buttonObj.appendTo(playButton);\n      playPauseWrap.appendChild(playButton);\n    }\n\n    const navigators = this.element.querySelector(`.${CLS_NAVIGATORS}`);\n    navigators.insertBefore(playPauseWrap, navigators.lastElementChild);\n    this.renderTemplates();\n    EventHandler.add(playPauseWrap, 'click', this.playButtonClickHandler, this);\n  }\n\n  renderIndicators() {\n    if (!this.showIndicators) {\n      return;\n    }\n\n    const indicatorWrap = this.createElement('div', {\n      className: CLS_INDICATORS\n    });\n    const indicatorBars = this.createElement('div', {\n      className: CLS_INDICATOR_BARS\n    });\n    indicatorWrap.appendChild(indicatorBars);\n\n    if (this.slideItems) {\n      this.slideItems.forEach((item, index) => {\n        const indicatorBar = this.createElement('div', {\n          className: CLS_INDICATOR_BAR + ' ' + (this.selectedIndex === index ? CLS_ACTIVE$2 : ''),\n          attrs: {\n            'data-index': index.toString(),\n            'aria-current': this.selectedIndex === index ? 'true' : 'false'\n          }\n        });\n\n        if (this.indicatorsTemplate) {\n          addClass([indicatorBar], CLS_TEMPLATE$2);\n          const templateId = this.element.id + '_indicatorsTemplate';\n          const template = this.templateParser(this.indicatorsTemplate)({\n            index: index,\n            selectedIndex: this.selectedIndex\n          }, this, 'indicatorsTemplate', templateId, false);\n          append(template, indicatorBar);\n        } else {\n          const indicator = this.createElement('button', {\n            className: CLS_INDICATOR$1\n          });\n          indicatorBar.appendChild(indicator);\n          indicator.appendChild(this.createElement('div', {\n            attrs: {\n              'aria-label': this.localeObj.getConstant('slide') + ' ' + (index + 1) + ' ' + this.localeObj.getConstant('of') + ' ' + this.slideItems.length\n            }\n          }));\n          const buttonObj = new Button({\n            cssClass: 'e-flat e-small'\n          });\n          buttonObj.appendTo(indicator);\n        }\n\n        indicatorBars.appendChild(indicatorBar);\n        EventHandler.add(indicatorBar, 'click', this.indicatorClickHandler, this);\n      });\n    }\n\n    this.element.appendChild(indicatorWrap);\n  }\n\n  renderKeyboardActions() {\n    this.keyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyHandler.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n  }\n\n  renderTouchActions() {\n    if (!this.enableTouchSwipe) {\n      return;\n    }\n\n    this.touchModule = new Touch(this.element, {\n      swipe: this.swipeHandler.bind(this)\n    });\n  }\n\n  applyAnimation() {\n    removeClass([this.element], [CLS_CUSTOM_ANIMATION, CLS_FADE_ANIMATION, CLS_SLIDE_ANIMATION, CLS_ANIMATION_NONE]);\n\n    switch (this.animationEffect) {\n      case 'Slide':\n        addClass([this.element], CLS_SLIDE_ANIMATION);\n        break;\n\n      case 'Fade':\n        addClass([this.element], CLS_FADE_ANIMATION);\n        break;\n\n      case 'None':\n        addClass([this.element], CLS_ANIMATION_NONE);\n        break;\n\n      case 'Custom':\n        addClass([this.element], CLS_CUSTOM_ANIMATION);\n        break;\n    }\n  }\n\n  autoSlide() {\n    this.resetSlideInterval();\n    this.applySlideInterval();\n  }\n\n  autoSlideChange() {\n    const activeSlide = this.element.querySelector(`.${CLS_ACTIVE$2}`);\n\n    if (isNullOrUndefined(activeSlide)) {\n      return;\n    }\n\n    const activeIndex = parseInt(activeSlide.dataset.index, 10);\n\n    if (!this.loop && activeIndex === this.slideItems.length - 1) {\n      this.resetSlideInterval();\n    } else {\n      const index = (activeIndex + 1) % this.slideItems.length;\n\n      if (!this.element.classList.contains(CLS_HOVER)) {\n        this.setActiveSlide(index, 'Next');\n      }\n\n      this.autoSlide();\n    }\n  }\n\n  applySlideInterval() {\n    if (!this.autoPlay || this.element.classList.contains(CLS_HOVER)) {\n      return;\n    }\n\n    let itemInterval = this.interval;\n\n    if (this.items.length > 0 && !isNullOrUndefined(this.items[this.selectedIndex].interval)) {\n      itemInterval = this.items[this.selectedIndex].interval;\n    }\n\n    this.autoSlideInterval = setInterval(() => this.autoSlideChange(), itemInterval);\n  }\n\n  resetSlideInterval() {\n    clearInterval(this.autoSlideInterval);\n    this.autoSlideInterval = null;\n  }\n\n  getSlideIndex(direction) {\n    let currentIndex = this.selectedIndex;\n\n    if (direction === 'Previous') {\n      currentIndex--;\n\n      if (currentIndex < 0) {\n        currentIndex = this.slideItems.length - 1;\n      }\n    } else {\n      currentIndex++;\n\n      if (currentIndex === this.slideItems.length) {\n        currentIndex = 0;\n      }\n    }\n\n    return currentIndex;\n  }\n\n  setActiveSlide(currentIndex, direction, isSwiped = false) {\n    if (this.element.querySelectorAll(`.${CLS_ITEM$3}.${CLS_PREV_SLIDE},.${CLS_ITEM$3}.${CLS_NEXT_SLIDE}`).length > 0) {\n      return;\n    }\n\n    const allSlides = [].slice.call(this.element.querySelectorAll(`.${CLS_ITEM$3}`));\n    const activeSlide = this.element.querySelector(`.${CLS_ITEM$3}.${CLS_ACTIVE$2}`);\n\n    if (isNullOrUndefined(activeSlide) && this.showIndicators) {\n      const activeIndicator = this.element.querySelector(`.${CLS_INDICATOR_BAR}.${CLS_ACTIVE$2}`);\n      const activeIndex = parseInt(activeIndicator.dataset.index, 10);\n      addClass([allSlides[activeIndex]], CLS_ACTIVE$2);\n      return;\n    } else if (isNullOrUndefined(activeSlide)) {\n      addClass([allSlides[currentIndex]], CLS_ACTIVE$2);\n      return;\n    }\n\n    const activeIndex = parseInt(activeSlide.dataset.index, 10);\n    const currentSlide = allSlides[currentIndex];\n    const eventArgs = {\n      currentIndex: activeIndex,\n      nextIndex: currentIndex,\n      currentSlide: activeSlide,\n      nextSlide: currentSlide,\n      slideDirection: direction,\n      isSwiped: isSwiped,\n      cancel: false\n    };\n    this.trigger('slideChanging', eventArgs, args => {\n      if (args.cancel) {\n        return;\n      }\n\n      this.setProperties({\n        selectedIndex: currentIndex\n      }, true);\n      attributes(args.currentSlide, {\n        'aria-hidden': 'true'\n      });\n      attributes(args.nextSlide, {\n        'aria-hidden': 'false'\n      });\n      const slideIndicators = [].slice.call(this.element.querySelectorAll(`.${CLS_INDICATOR_BAR}`));\n\n      if (slideIndicators.length > 0) {\n        attributes(slideIndicators[activeIndex], {\n          'aria-current': 'false'\n        });\n        attributes(slideIndicators[currentIndex], {\n          'aria-current': 'true'\n        });\n        removeClass(slideIndicators, CLS_ACTIVE$2);\n        addClass([slideIndicators[currentIndex]], CLS_ACTIVE$2);\n      }\n\n      this.slideChangedEventArgs = {\n        currentIndex: args.nextIndex,\n        previousIndex: args.currentIndex,\n        currentSlide: args.nextSlide,\n        previousSlide: args.currentSlide,\n        slideDirection: direction,\n        isSwiped: isSwiped\n      };\n      let slideHeight;\n\n      if (this.animationEffect === 'Slide') {\n        if (direction === 'Previous') {\n          addClass([args.nextSlide], CLS_PREV_SLIDE);\n          slideHeight = args.nextSlide.offsetHeight;\n          addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_END);\n        } else {\n          addClass([args.nextSlide], CLS_NEXT_SLIDE); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n          slideHeight = args.nextSlide.offsetHeight;\n          addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_START);\n        }\n      } else if (this.animationEffect === 'Fade') {\n        removeClass([args.currentSlide], CLS_ACTIVE$2);\n        addClass([args.nextSlide], CLS_ACTIVE$2);\n      } else if (this.animationEffect === 'Custom') {\n        if (direction === 'Previous') {\n          addClass([args.nextSlide], CLS_NEXT_SLIDE);\n          addClass([args.currentSlide], CLS_PREV_SLIDE);\n        } else {\n          addClass([args.currentSlide], CLS_PREV_SLIDE);\n          addClass([args.nextSlide], CLS_NEXT_SLIDE);\n        }\n      } else {\n        this.onTransitionEnd();\n      }\n\n      this.handleNavigatorsActions(currentIndex);\n    });\n  }\n\n  onTransitionEnd() {\n    if (this.slideChangedEventArgs) {\n      addClass([this.slideChangedEventArgs.currentSlide], CLS_ACTIVE$2);\n      removeClass([this.slideChangedEventArgs.previousSlide], CLS_ACTIVE$2);\n      this.trigger('slideChanged', this.slideChangedEventArgs, () => {\n        removeClass(this.element.querySelectorAll(`.${CLS_ITEM$3}`), [CLS_PREV_SLIDE, CLS_NEXT_SLIDE, CLS_TRANSITION_START, CLS_TRANSITION_END]);\n        this.slideChangedEventArgs = null;\n      });\n    }\n  }\n\n  setHtmlAttributes(attribute, element) {\n    const keys = Object.keys(attribute);\n\n    for (const key of keys) {\n      if (key === 'class') {\n        addClass([element], attribute[key]);\n      } else {\n        element.setAttribute(key, attribute[key]);\n      }\n    }\n  }\n\n  templateParser(template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (error) {\n        return compile(template);\n      }\n    }\n\n    return undefined;\n  }\n\n  getNavigatorState(target, isPrevious) {\n    const button = target.querySelector(`.${isPrevious ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON}`);\n\n    if (button) {\n      const buttonObj = getInstance(button, Button);\n      return buttonObj.disabled;\n    }\n\n    return false;\n  }\n\n  navigatorClickHandler(e) {\n    const target = e.currentTarget;\n    const isDisabled = this.getNavigatorState(target, target.classList.contains(CLS_PREVIOUS));\n\n    if (isDisabled) {\n      return;\n    }\n\n    const direction = target.classList.contains(CLS_PREVIOUS) ? 'Previous' : 'Next';\n    this.setActiveSlide(this.getSlideIndex(direction), direction);\n    this.autoSlide();\n  }\n\n  indicatorClickHandler(e) {\n    const target = closest(e.target, `.${CLS_INDICATOR_BAR}`);\n    const index = parseInt(target.dataset.index, 10);\n\n    if (this.selectedIndex !== index) {\n      this.setActiveSlide(index, this.selectedIndex > index ? 'Previous' : 'Next');\n      this.autoSlide();\n    }\n  }\n\n  playButtonClickHandler(e, isPropertyChange = false) {\n    const playButton = this.element.querySelector(`.${CLS_PLAY_BUTTON}`);\n\n    if (playButton) {\n      const buttonObj = getInstance(playButton, Button);\n\n      if (!isPropertyChange) {\n        this.setProperties({\n          autoPlay: !this.autoPlay\n        }, true);\n      }\n\n      playButton.setAttribute('aria-label', this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'));\n      buttonObj.iconCss = CLS_ICON$1 + ' ' + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);\n      buttonObj.dataBind();\n      const itemsContainer = this.element.querySelector(`.${CLS_ITEMS$2}`);\n      itemsContainer.setAttribute('aria-live', this.autoPlay ? 'off' : 'polite');\n\n      if (this.autoPlay && !this.loop && this.selectedIndex === this.slideItems.length - 1) {\n        this.setActiveSlide(0, 'Next');\n      }\n\n      this.autoSlide();\n    }\n  }\n\n  keyHandler(e) {\n    let direction;\n    let slideIndex;\n    let isSlideTransition = false;\n    const target = e.target;\n    e.preventDefault();\n\n    switch (e.action) {\n      case 'space':\n        if (this.showIndicators && target.classList.contains(CLS_INDICATOR$1)) {\n          target.click();\n        } else if (target.classList.contains(CLS_CAROUSEL) || target.classList.contains(CLS_PLAY_BUTTON)) {\n          this.playButtonClickHandler(e);\n        } else if (target.classList.contains(CLS_NEXT_BUTTON)) {\n          this.next();\n        } else if (target.classList.contains(CLS_PREV_BUTTON)) {\n          this.prev();\n        }\n\n        break;\n\n      case 'end':\n        slideIndex = this.slideItems.length - 1;\n        direction = 'Next';\n        isSlideTransition = true;\n        break;\n\n      case 'home':\n        slideIndex = 0;\n        direction = 'Previous';\n        isSlideTransition = true;\n        break;\n\n      case 'moveUp':\n      case 'moveLeft':\n      case 'moveDown':\n      case 'moveRight':\n        if (this.showIndicators && isNullOrUndefined(this.indicatorsTemplate)) {\n          this.element.focus();\n        }\n\n        direction = e.action === 'moveUp' || e.action === 'moveLeft' ? 'Previous' : 'Next';\n        slideIndex = this.getSlideIndex(direction);\n        isSlideTransition = !this.isSuspendSlideTransition(slideIndex, direction);\n        break;\n    }\n\n    if (isSlideTransition) {\n      this.setActiveSlide(slideIndex, direction);\n      this.autoSlide();\n      isSlideTransition = false;\n    }\n  }\n\n  swipeHandler(e) {\n    if (this.element.classList.contains(CLS_HOVER)) {\n      return;\n    }\n\n    const direction = e.swipeDirection === 'Right' ? 'Previous' : 'Next';\n    const slideIndex = this.getSlideIndex(direction);\n\n    if (!this.isSuspendSlideTransition(slideIndex, direction)) {\n      this.setActiveSlide(slideIndex, direction, true);\n      this.autoSlide();\n    }\n  }\n\n  isSuspendSlideTransition(index, direction) {\n    return !this.loop && (direction === 'Next' && index === 0 || direction === 'Previous' && index === this.slideItems.length - 1);\n  }\n\n  handleNavigatorsActions(index) {\n    if (this.buttonsVisibility === 'Hidden') {\n      return;\n    }\n\n    if (this.showPlayButton) {\n      const playButton = this.element.querySelector(`.${CLS_PLAY_BUTTON}`);\n      const isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;\n      let isButtonUpdate = isNullOrUndefined(this.playButtonTemplate) && playButton && isLastSlide;\n\n      if (isNullOrUndefined(this.playButtonTemplate) && playButton && !isLastSlide) {\n        isButtonUpdate = !playButton.classList.contains(CLS_ACTIVE$2);\n      }\n\n      if (isButtonUpdate) {\n        this.setProperties({\n          autoPlay: !isLastSlide\n        }, true);\n        playButton.setAttribute('aria-label', this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'));\n        const itemsContainer = this.element.querySelector(`.${CLS_ITEMS$2}`);\n        itemsContainer.setAttribute('aria-live', this.autoPlay ? 'off' : 'polite');\n        const buttonObj = getInstance(playButton, Button);\n        buttonObj.iconCss = CLS_ICON$1 + ' ' + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);\n        buttonObj.dataBind();\n      }\n    }\n\n    const prevButton = this.element.querySelector(`.${CLS_PREV_BUTTON}`);\n\n    if (prevButton && isNullOrUndefined(this.previousButtonTemplate)) {\n      const buttonObj = getInstance(prevButton, Button);\n      buttonObj.disabled = !this.loop && index === 0;\n      buttonObj.dataBind();\n    }\n\n    const nextButton = this.element.querySelector(`.${CLS_NEXT_BUTTON}`);\n\n    if (nextButton && isNullOrUndefined(this.nextButtonTemplate)) {\n      const buttonObj = getInstance(nextButton, Button);\n      buttonObj.disabled = !this.loop && index === this.slideItems.length - 1;\n      buttonObj.dataBind();\n    }\n  }\n\n  onHoverActions(e) {\n    const navigator = this.element.querySelector(`.${CLS_NAVIGATORS}`);\n\n    switch (e.type) {\n      case 'mouseenter':\n        if (this.buttonsVisibility === 'VisibleOnHover' && navigator) {\n          removeClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);\n        }\n\n        if (this.pauseOnHover) {\n          addClass([this.element], CLS_HOVER);\n        }\n\n        break;\n\n      case 'mouseleave':\n        if (this.buttonsVisibility === 'VisibleOnHover' && navigator) {\n          addClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);\n        }\n\n        removeClass([this.element], CLS_HOVER);\n        break;\n    }\n\n    this.autoSlide();\n  }\n\n  onFocusActions(e) {\n    switch (e.type) {\n      case 'focusin':\n        addClass([this.element], CLS_HOVER);\n        break;\n\n      case 'focusout':\n        removeClass([this.element], CLS_HOVER);\n        break;\n    }\n\n    this.autoSlide();\n  }\n\n  destroyButtons() {\n    const buttonCollections = [].slice.call(this.element.querySelectorAll('.e-control.e-btn'));\n\n    for (const button of buttonCollections) {\n      const instance = getInstance(button, Button);\n\n      if (instance) {\n        instance.destroy();\n      }\n    }\n  }\n\n  wireEvents() {\n    EventHandler.add(this.element, 'focusin focusout', this.onFocusActions, this);\n    EventHandler.add(this.element, 'mouseenter mouseleave', this.onHoverActions, this);\n    EventHandler.add(this.element.firstElementChild, 'animationend', this.onTransitionEnd, this);\n    EventHandler.add(this.element.firstElementChild, 'transitionend', this.onTransitionEnd, this);\n  }\n\n  unWireEvents() {\n    const indicators = [].slice.call(this.element.querySelectorAll(`.${CLS_INDICATOR_BAR}`));\n    indicators.forEach(indicator => {\n      EventHandler.remove(indicator, 'click', this.indicatorClickHandler);\n    });\n    const navigators = [].slice.call(this.element.querySelectorAll(`.${CLS_PREVIOUS},.${CLS_NEXT}`));\n    navigators.forEach(navigator => {\n      EventHandler.remove(navigator, 'click', this.navigatorClickHandler);\n    });\n    const playIcon = this.element.querySelector(`.${CLS_PLAY_PAUSE}`);\n\n    if (playIcon) {\n      EventHandler.remove(playIcon, 'click', this.playButtonClickHandler);\n    }\n\n    EventHandler.remove(this.element.firstElementChild, 'animationend', this.onTransitionEnd);\n    EventHandler.remove(this.element.firstElementChild, 'transitionend', this.onTransitionEnd);\n    EventHandler.clearEvents(this.element);\n  }\n  /**\n   * Method to transit from the current slide to the previous slide.\n   *\n   * @returns {void}\n   */\n\n\n  prev() {\n    if (!this.loop && this.selectedIndex === 0) {\n      return;\n    }\n\n    const index = this.selectedIndex === 0 ? this.slideItems.length - 1 : this.selectedIndex - 1;\n    this.setActiveSlide(index, 'Previous');\n    this.autoSlide();\n  }\n  /**\n   * Method to transit from the current slide to the next slide.\n   *\n   * @returns {void}\n   */\n\n\n  next() {\n    if (!this.loop && this.selectedIndex === this.slideItems.length - 1) {\n      return;\n    }\n\n    const index = this.selectedIndex === this.slideItems.length - 1 ? 0 : this.selectedIndex + 1;\n    this.setActiveSlide(index, 'Next');\n    this.autoSlide();\n  }\n  /**\n   * Method to play the slides programmatically.\n   *\n   * @returns {void}\n   */\n\n\n  play() {\n    const playIcon = this.element.querySelector(`.${CLS_PLAY_ICON}`);\n\n    if (this.showPlayButton && playIcon) {\n      classList(playIcon, [CLS_PAUSE_ICON], [CLS_PLAY_ICON]);\n      const playButton = this.element.querySelector(`.${CLS_PLAY_BUTTON}`);\n      playButton.setAttribute('aria-label', this.localeObj.getConstant('pauseSlideTransition'));\n    }\n\n    this.setProperties({\n      autoPlay: true\n    }, true);\n    const itemsContainer = this.element.querySelector(`.${CLS_ITEMS$2}`);\n    itemsContainer.setAttribute('aria-live', 'off');\n    this.applySlideInterval();\n  }\n  /**\n   * Method to pause the slides programmatically.\n   *\n   * @returns {void}\n   */\n\n\n  pause() {\n    const pauseIcon = this.element.querySelector(`.${CLS_PAUSE_ICON}`);\n\n    if (this.showPlayButton && pauseIcon) {\n      const playButton = this.element.querySelector(`.${CLS_PLAY_BUTTON}`);\n      playButton.setAttribute('aria-label', this.localeObj.getConstant('playSlideTransition'));\n      classList(pauseIcon, [CLS_PLAY_ICON], [CLS_PAUSE_ICON]);\n    }\n\n    this.setProperties({\n      autoPlay: false\n    }, true);\n    const itemsContainer = this.element.querySelector(`.${CLS_ITEMS$2}`);\n    itemsContainer.setAttribute('aria-live', 'off');\n    this.resetSlideInterval();\n  }\n  /**\n   * Method to render react and angular templates\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  renderTemplates() {\n    if (this.isAngular || this.isReact) {\n      this.renderReactTemplates();\n    }\n  }\n  /**\n   * Method to reset react and angular templates\n   *\n   * @param {string[]} templates Accepts the template ID\n   * @returns {void}\n   * @private\n   */\n\n\n  resetTemplates(templates) {\n    if (this.isAngular || this.isReact) {\n      this.clearTemplate(templates);\n    }\n  }\n  /**\n   * Method for destroy the carousel component.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    this.resetTemplates();\n\n    if (this.touchModule) {\n      this.touchModule.destroy();\n      this.touchModule = null;\n    }\n\n    this.keyModule.destroy();\n    this.keyModule = null;\n    this.resetSlideInterval();\n    this.destroyButtons();\n    this.unWireEvents();\n    [].slice.call(this.element.children).forEach(ele => {\n      this.element.removeChild(ele);\n    });\n    removeClass([this.element], [CLS_CAROUSEL, this.cssClass, CLS_RTL$5]);\n    ['tabindex', 'role', 'style'].forEach(attr => {\n      this.element.removeAttribute(attr);\n    });\n    super.destroy();\n  }\n\n};\n\n__decorate$11([Collection([], CarouselItem)], Carousel.prototype, \"items\", void 0);\n\n__decorate$11([Property('Slide')], Carousel.prototype, \"animationEffect\", void 0);\n\n__decorate$11([Property()], Carousel.prototype, \"previousButtonTemplate\", void 0);\n\n__decorate$11([Property()], Carousel.prototype, \"nextButtonTemplate\", void 0);\n\n__decorate$11([Property()], Carousel.prototype, \"indicatorsTemplate\", void 0);\n\n__decorate$11([Property()], Carousel.prototype, \"playButtonTemplate\", void 0);\n\n__decorate$11([Property()], Carousel.prototype, \"cssClass\", void 0);\n\n__decorate$11([Property([])], Carousel.prototype, \"dataSource\", void 0);\n\n__decorate$11([Property()], Carousel.prototype, \"itemTemplate\", void 0);\n\n__decorate$11([Property(0)], Carousel.prototype, \"selectedIndex\", void 0);\n\n__decorate$11([Property('100%')], Carousel.prototype, \"width\", void 0);\n\n__decorate$11([Property('100%')], Carousel.prototype, \"height\", void 0);\n\n__decorate$11([Property(5000)], Carousel.prototype, \"interval\", void 0);\n\n__decorate$11([Property(true)], Carousel.prototype, \"autoPlay\", void 0);\n\n__decorate$11([Property(true)], Carousel.prototype, \"pauseOnHover\", void 0);\n\n__decorate$11([Property(true)], Carousel.prototype, \"loop\", void 0);\n\n__decorate$11([Property(false)], Carousel.prototype, \"showPlayButton\", void 0);\n\n__decorate$11([Property(true)], Carousel.prototype, \"enableTouchSwipe\", void 0);\n\n__decorate$11([Property(true)], Carousel.prototype, \"showIndicators\", void 0);\n\n__decorate$11([Property('Visible')], Carousel.prototype, \"buttonsVisibility\", void 0);\n\n__decorate$11([Property()], Carousel.prototype, \"htmlAttributes\", void 0);\n\n__decorate$11([Event()], Carousel.prototype, \"slideChanging\", void 0);\n\n__decorate$11([Event()], Carousel.prototype, \"slideChanged\", void 0);\n\nCarousel = __decorate$11([NotifyPropertyChanges], Carousel);\n/** Carousel export modules */\n\n/**\n * Navigation all modules\n */\n\nexport { MenuAnimationSettings, MenuItem, HScroll, VScroll, addScrolling, destroyScroll, Item, Toolbar, AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion, ContextMenu, Menu, TabActionSettings, TabAnimationSettings, Header, TabItem, Tab, FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView, Sidebar, BreadcrumbItem, Breadcrumb, CarouselItem, Carousel }; //# sourceMappingURL=ej2-navigations.es2015.js.map","map":null,"metadata":{},"sourceType":"module"}