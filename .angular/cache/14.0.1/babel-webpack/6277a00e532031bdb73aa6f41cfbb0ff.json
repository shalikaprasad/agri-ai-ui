{"ast":null,"code":"import { Weather } from 'projects/public-user/src/app/shared/models/Weather';\nimport { first } from 'rxjs/operators';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"projects/tools/src/lib/other.service\";\nimport * as i3 from \"projects/tools/src/lib/alert.service\";\nimport * as i4 from \"@angular/common\";\n\nfunction WeatherPredictionComponent_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const district_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(district_r2);\n  }\n}\n\nfunction WeatherPredictionComponent_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const village_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(village_r3);\n  }\n}\n\nexport let WeatherPredictionComponent = /*#__PURE__*/(() => {\n  class WeatherPredictionComponent {\n    constructor(formBuilder, otherService, alertService) {\n      this.formBuilder = formBuilder;\n      this.otherService = otherService;\n      this.alertService = alertService;\n      this.weatherObj = new Weather();\n    }\n\n    ngOnInit() {\n      this.districtList = this.otherService.getDistrictList();\n      this.weatherPredictionForm = this.formBuilder.group({\n        villageName: ['', [Validators.required]],\n        districtName: ['', [Validators.required]]\n      });\n      this.addWeather('colombo');\n    }\n\n    onSubmit() {\n      // reset alerts on submit\n      this.alertService.clear(); // stop here if form is invalid\n\n      if (this.weatherPredictionForm.invalid) {\n        return;\n      }\n\n      const village = this.f.villageName.value;\n\n      if (village !== 'Village') {\n        this.addWeather(village);\n      }\n    }\n\n    get f() {\n      return this.weatherPredictionForm.controls;\n    }\n\n    addWeather(city) {\n      this.otherService.getWeather(city).pipe(first()).subscribe(data => {\n        this.weather = data;\n        this.weatherObj.city = this.weather.name;\n        this.weatherObj.tempMax = this.weather.main.temp_max;\n        this.weatherObj.tempMin = this.weather.main.temp_min;\n        this.weatherObj.temp = this.weather.main.temp;\n        this.weatherObj.pressure = this.weather.main.pressure;\n        this.weatherObj.humidity = this.weather.main.humidity;\n        this.weatherObj.windSpeed = this.weather.wind.speed;\n        this.weatherObj.precipitation = this.weather.visibility;\n        this.weatherObj.cloudCover = this.weather.clouds.all;\n        this.weatherObj.heatIndex = this.getHeatIndex(this.weatherObj.temp, this.weatherObj.humidity);\n      }, error => {\n        this.alertService.error(error);\n      });\n    }\n\n    getHeatIndex(temp, hum) {\n      return -42.379 + 2.04901523 * temp + 10.14333127 * hum - .22475541 * temp * hum - .00683783 * temp * temp - (.05481717 * hum * hum + .00122874 * temp * temp * hum + .00085282 * temp * hum * hum) - .00000199 * temp * temp * hum * hum;\n    }\n\n    getVillage(districtName) {\n      this.villageList = this.otherService.getVillageList(districtName.target.value);\n    }\n\n  }\n\n  WeatherPredictionComponent.ɵfac = function WeatherPredictionComponent_Factory(t) {\n    return new (t || WeatherPredictionComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.OtherService), i0.ɵɵdirectiveInject(i3.AlertService));\n  };\n\n  WeatherPredictionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WeatherPredictionComponent,\n    selectors: [[\"app-weather-prediction\"]],\n    decls: 53,\n    vars: 10,\n    consts: [[1, \"container\", 2, \"margin\", \"35px auto\"], [1, \"row\"], [1, \"col-lg-2\"], [1, \"col-lg-8\"], [1, \"col\", \"text-center\"], [1, \"section_title\"], [1, \"section_subtitle\"], [1, \"form-row\", \"align-items-center\"], [1, \"col-12\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\", 2, \"margin-top\", \"50px\"], [\"formControlName\", \"districtName\", \"id\", \"districtName\", 1, \"form-control\", \"selectpicker\", 3, \"change\"], [\"value\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"villageName\", \"id\", \"villageName\", 1, \"form-control\", \"selectpicker\"], [1, \"row\", 2, \"margin-top\", \"25px\"], [\"type\", \"submit\", \"value\", \"Calculate\", 1, \"btn\", \"btn-primary\", \"btn-block\"], [1, \"col-12\", 2, \"margin-top\", \"25px\"], [1, \"col\", \"mb-6\"], [\"id\", \"crop_card_ul\", 2, \"margin-bottom\", \"20px\"], [2, \"list-style\", \"none\", \"text-align\", \"center\", \"display\", \"block\", \"padding\", \"0 25px\", \"border-right\", \"1px solid rgba(0,0,0,.5)\"], [\"data-text\", \"Rise\", 1, \"name\", 2, \"font-size\", \"25px\", \"font-weight\", \"bold\"], [\"data-text\", \"Rise\", 1, \"name\"], [2, \"list-style\", \"none\", \"text-align\", \"center\", \"display\", \"block\", \"padding\", \"0 20px\", \"border-right\", \"1px solid rgba(0,0,0,.5)\"], [2, \"font-size\", \"10px\", \"margin\", \"0\"], [2, \"list-style\", \"none\", \"text-align\", \"center\", \"display\", \"block\", \"padding\", \"0 40px\"]],\n    template: function WeatherPredictionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 1)(5, \"div\", 4)(6, \"div\", 5)(7, \"h2\");\n        i0.ɵɵtext(8, \"Weather Result\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵtext(10, \" Optimized weather result Generated. Please refer the list given and make tour choice. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"br\")(12, \"br\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"div\", 8)(15, \"form\", 9);\n        i0.ɵɵlistener(\"ngSubmit\", function WeatherPredictionComponent_Template_form_ngSubmit_15_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(16, \"div\", 10)(17, \"select\", 11);\n        i0.ɵɵlistener(\"change\", function WeatherPredictionComponent_Template_select_change_17_listener($event) {\n          return ctx.getVillage($event);\n        });\n        i0.ɵɵelementStart(18, \"option\", 12);\n        i0.ɵɵtext(19, \"colombo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(20, WeatherPredictionComponent_option_20_Template, 2, 1, \"option\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 10)(22, \"select\", 14)(23, \"option\", 12);\n        i0.ɵɵtext(24, \"colombo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, WeatherPredictionComponent_option_25_Template, 2, 1, \"option\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 15)(27, \"div\", 8);\n        i0.ɵɵelement(28, \"input\", 16);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(29, \"div\", 17)(30, \"div\", 18)(31, \"ul\", 19)(32, \"li\", 20)(33, \"div\", 21);\n        i0.ɵɵtext(34);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(35, \"li\", 20)(36, \"div\", 22);\n        i0.ɵɵtext(37, \" Temperature \");\n        i0.ɵɵelement(38, \"br\");\n        i0.ɵɵtext(39);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(40, \"li\", 23)(41, \"div\", 22);\n        i0.ɵɵtext(42, \" Rainfall prediction \");\n        i0.ɵɵelementStart(43, \"p\", 24);\n        i0.ɵɵtext(44);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(45, \"p\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(46, \"li\", 25)(47, \"div\", 22);\n        i0.ɵɵtext(48, \"Last year this month Rainfall \");\n        i0.ɵɵelementStart(49, \"p\", 24);\n        i0.ɵɵtext(50);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(51, \"p\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelement(52, \"div\", 2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"formGroup\", ctx.weatherPredictionForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.districtList);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.villageList);\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate1(\" \", ctx.weatherObj.city, \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate2(\"Hi: \", ctx.weatherObj.tempMax, \" \\u00A0 Lo: \", ctx.weatherObj.tempMin, \"\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate2(\"Today: \", ctx.weatherObj.precipitation, \"mm Month: \", ctx.weatherObj.precipitation, \"mm\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate2(\"This day: \", ctx.weatherObj.precipitation, \"mm This month: \", ctx.weatherObj.precipitation, \"mm\");\n      }\n    },\n    dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n  });\n  return WeatherPredictionComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}