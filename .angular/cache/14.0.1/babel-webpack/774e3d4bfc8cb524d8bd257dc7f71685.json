{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { User } from 'projects/public-user/src/app/shared/models/User';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"projects/tools/src/lib/authentication.service\";\nimport * as i4 from \"projects/tools/src/lib/alert.service\";\nimport * as i5 from \"projects/tools/src/lib/user.service\";\nimport * as i6 from \"projects/tools/src/lib/project.service\";\nimport * as i7 from \"projects/tools/src/lib/dashboard.service\";\nimport * as i8 from \"angular-bootstrap-md\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(formBuilder, route, router, authenticationService, alertService, userService, projectService, dashboardService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.authenticationService = authenticationService;\n      this.alertService = alertService;\n      this.userService = userService;\n      this.projectService = projectService;\n      this.dashboardService = dashboardService;\n      this.loading = false;\n      this.submitted = false;\n      this.user = new User();\n      this.bigChart = [];\n      this.pieChartFarmerProjects = [];\n      this.pieChartCropCounts = [];\n      this.pieChartCropProfits = [];\n      this.tableProjectCountFarmer = []; // redirect to home if already logged in\n\n      if (this.authenticationService.isUserLoggedIn()) {\n        this.router.navigate(['/dashboard/project-status']);\n      }\n    }\n\n    ngOnInit() {\n      this.loginForm = this.formBuilder.group({\n        loginFormUserName: ['', [Validators.required]],\n        loginFormPassword: ['', Validators.required]\n      });\n    } // convenience getter for easy access to form fields\n\n\n    get f() {\n      return this.loginForm.controls;\n    }\n\n    onSubmit() {\n      this.submitted = true; // reset alerts on submit\n\n      this.alertService.clear(); // stop here if form is invalid\n\n      if (this.loginForm.invalid) {\n        return;\n      }\n\n      this.loading = true;\n      this.user.userName = this.f.loginFormUserName.value;\n      this.user.password = this.f.loginFormPassword.value;\n      this.authenticationService.login(this.user).pipe(first()).subscribe(data => {\n        window.sessionStorage.setItem('token', JSON.stringify(data));\n        localStorage.setItem('currentUserName', this.user.userName);\n        this.userService.getUser().pipe(first()).subscribe(userData => {\n          this.user = userData['body'];\n          this.projectService.getProjectsForRequiredMonth().subscribe(data2 => {\n            this.bigChart = this.dashboardService.bigChart(data2['body']);\n            this.projectService.getProjectCountByFarmerID().subscribe(data3 => {\n              this.pieChartFarmerProjects = this.dashboardService.pieChartFarmerProjects(data3['body']);\n              this.projectService.getCropCounts().subscribe(data4 => {\n                this.pieChartCropCounts = this.dashboardService.pieChartCropCounts(data4['body']);\n                this.projectService.getProfitCounts().subscribe(data5 => {\n                  this.pieChartCropProfits = this.dashboardService.pieChartProfitCounts(data5['body']);\n                  this.tableProjectCountFarmer = this.dashboardService.matTableFarmerProjects();\n                  localStorage.setItem('currentUser', JSON.stringify(this.user));\n                  localStorage.setItem('bigChart', JSON.stringify(this.bigChart));\n                  localStorage.setItem('pieChartFarmerProjects', JSON.stringify(this.pieChartFarmerProjects));\n                  localStorage.setItem('pieChartCropCounts', JSON.stringify(this.pieChartCropCounts));\n                  localStorage.setItem('pieChartCropProfits', JSON.stringify(this.pieChartCropProfits));\n                  localStorage.setItem('tableProjectCountFarmer', JSON.stringify(this.tableProjectCountFarmer));\n                  this.router.navigate(['/dashboard/home']);\n                });\n              });\n            });\n          });\n        });\n      }, error => {\n        this.alertService.error(error);\n        this.loading = false;\n      });\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthenticationService), i0.ɵɵdirectiveInject(i4.AlertService), i0.ɵɵdirectiveInject(i5.UserService), i0.ɵɵdirectiveInject(i6.ProjectService), i0.ɵɵdirectiveInject(i7.DashboardService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 40,\n    vars: 1,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"row\"], [1, \"col-md-6\", \"mx-auto\", \"my-5\"], [1, \"form-elegant\"], [2, \"width\", \"35rem\", \"background-size\", \"cover\"], [1, \"mx-4\"], [1, \"text-center\"], [1, \"dark-grey-text\", \"mb-5\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"md-form\"], [\"type\", \"text\", \"id\", \"loginFormUserName\", \"formControlName\", \"loginFormUserName\", \"mdbInput\", \"\", 1, \"form-control\"], [\"for\", \"loginFormUserName\"], [1, \"md-form\", \"pb-3\"], [\"type\", \"password\", \"id\", \"loginFormPassword\", \"formControlName\", \"loginFormPassword\", \"mdbInput\", \"\", 1, \"form-control\"], [\"for\", \"loginFormPassword\"], [1, \"font-small\", \"blue-text\", \"d-flex\", \"justify-content-end\"], [\"href\", \"#\", 1, \"blue-text\", \"ml-1\"], [1, \"text-center\", \"mb-3\"], [\"type\", \"submit\", \"mdbBtn\", \"\", \"gradient\", \"blue\", \"block\", \"true\", \"rounded\", \"true\", \"mdbWavesEffect\", \"\", 1, \"z-depth-1a\", \"waves-light\"], [1, \"font-small\", \"dark-grey-text\", \"text-right\", \"d-flex\", \"justify-content-center\", \"mb-3\", \"pt-2\"], [1, \"row\", \"my-3\", \"d-flex\", \"justify-content-center\"], [\"type\", \"button\", \"mdbBtn\", \"\", \"color\", \"white\", \"rounded\", \"true\", \"mdbWavesEffect\", \"\", 1, \"mr-md-3\", \"z-depth-1a\", \"waves-light\"], [\"fab\", \"\", \"icon\", \"facebook\", 1, \"blue-text\", \"text-center\"], [\"fab\", \"\", \"icon\", \"twitter\", 1, \"blue-text\"], [\"type\", \"button\", \"mdbBtn\", \"\", \"color\", \"white\", \"rounded\", \"true\", \"mdbWavesEffect\", \"\", 1, \"z-depth-1a\", \"waves-light\"], [\"fab\", \"\", \"icon\", \"google-plus\", 1, \"blue-text\"], [1, \"modal-footer\", \"mx-5\", \"pt-3\", \"mb-1\"], [1, \"font-small\", \"grey-text\", \"d-flex\", \"justify-content-end\"], [\"href\", \"http://localhost:4200/\", 1, \"blue-text\", \"ml-1\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"section\", 3)(4, \"mdb-card\", 4)(5, \"mdb-card-body\", 5)(6, \"div\", 6)(7, \"h3\", 7)(8, \"strong\");\n        i0.ɵɵtext(9, \"Sign in\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"form\", 8);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵelement(12, \"input\", 10);\n        i0.ɵɵelementStart(13, \"label\", 11);\n        i0.ɵɵtext(14, \"Your username\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 12);\n        i0.ɵɵelement(16, \"input\", 13);\n        i0.ɵɵelementStart(17, \"label\", 14);\n        i0.ɵɵtext(18, \"Your password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"p\", 15);\n        i0.ɵɵtext(20, \"Forgot \");\n        i0.ɵɵelementStart(21, \"a\", 16);\n        i0.ɵɵtext(22, \" Password?\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 17)(24, \"button\", 18);\n        i0.ɵɵtext(25, \"Sign in\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(26, \"p\", 19);\n        i0.ɵɵtext(27, \" or Sign in with:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 20)(29, \"button\", 21);\n        i0.ɵɵelement(30, \"mdb-icon\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"button\", 21);\n        i0.ɵɵelement(32, \"mdb-icon\", 23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"button\", 24);\n        i0.ɵɵelement(34, \"mdb-icon\", 25);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(35, \"div\", 26)(36, \"p\", 27);\n        i0.ɵɵtext(37, \"Public User? \");\n        i0.ɵɵelementStart(38, \"a\", 28);\n        i0.ɵɵtext(39, \" Public Site \");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i8.MdbBtnDirective, i8.MdbCardComponent, i8.MdbCardBodyComponent, i8.WavesDirective, i8.MdbInput, i8.MdbIconComponent, i8.FabDirective],\n    styles: [\".container[_ngcontent-%COMP%]{margin-top:13.8%;margin-bottom:13.8%}.form-elegant[_ngcontent-%COMP%]   .font-small[_ngcontent-%COMP%]{font-size:.8rem}.form-elegant[_ngcontent-%COMP%]   .z-depth-1a[_ngcontent-%COMP%]{box-shadow:0 2px 5px #37a1ff42,0 4px 12px #799bfe40}.form-elegant[_ngcontent-%COMP%]   .z-depth-1-half[_ngcontent-%COMP%], .form-elegant[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:hover{box-shadow:0 5px 11px #55b6ff47,0 4px 15px #2485ff26}.form-elegant[_ngcontent-%COMP%]{border-top-left-radius:.3rem;border-top-right-radius:.3rem}.form-elegant[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{border-radius:2rem}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}