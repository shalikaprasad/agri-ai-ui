{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Crop } from 'projects/public-user/src/app/shared/models/Crop';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"projects/tools/src/lib/crop-prediction.service\";\nimport * as i4 from \"projects/tools/src/lib/alert.service\";\nimport * as i5 from \"projects/tools/src/lib/other.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction CropPredictionComponent_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const type_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r4);\n  }\n}\n\nfunction CropPredictionComponent_option_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const fruit_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(fruit_r5);\n  }\n}\n\nfunction CropPredictionComponent_option_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dis_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(dis_r6);\n  }\n}\n\nfunction CropPredictionComponent_option_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const vig_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(vig_r7);\n  }\n}\n\nexport let CropPredictionComponent = /*#__PURE__*/(() => {\n  class CropPredictionComponent {\n    constructor(formBuilder, route, router, cropPredictionService, alertService, otherService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.cropPredictionService = cropPredictionService;\n      this.alertService = alertService;\n      this.otherService = otherService;\n      this.loading = false;\n      this.submitted = false;\n      this.crop = new Crop();\n\n      this.handleError = (controlName, errorName) => {\n        return this.cropPredictionForm.controls[controlName].hasError(errorName);\n      };\n    } // convenience getter for easy access to form fields\n\n\n    get f() {\n      return this.cropPredictionForm.controls;\n    }\n\n    onSubmit() {\n      this.submitted = true; // reset alerts on submit\n\n      this.alertService.clear(); // stop here if form is invalid\n\n      if (this.cropPredictionForm.invalid) {\n        return;\n      }\n\n      this.loading = true;\n      this.crop.cropName = this.f.cropName.value;\n      this.crop.cropSpecially = this.f.cropSpecially.value;\n      this.crop.district = this.f.districtName.value;\n      this.crop.village = this.f.villageName.value;\n      this.crop.cropStartDate = this.f.cropStartDate.value;\n      this.crop.extent = this.f.cropLandSize.value * 0.002529285264;\n      this.crop.year = Number(this.crop.cropStartDate.split('-')[0]);\n      this.crop.month = Number(this.crop.cropStartDate.split('-')[1]);\n      this.otherService.getWeather(this.crop.village).pipe(first()).subscribe(data => {\n        this.weather = data;\n        this.crop.tempMax = this.weather.main.temp_max;\n        this.crop.tempMin = this.weather.main.temp_min;\n        this.crop.temp = this.weather.main.temp;\n        this.crop.pressure = this.weather.main.pressure;\n        this.crop.humidity = this.weather.main.humidity;\n        this.crop.windSpeed = this.weather.wind.speed;\n        this.crop.precipitation = this.weather.visibility;\n        this.crop.cloudCover = this.weather.clouds.all;\n        this.cropPredictionService.getCropPredictionResult(this.crop).pipe(first()).subscribe(data2 => {\n          localStorage.setItem('predictedPrice', JSON.stringify(data2['body']));\n          this.router.navigate(['/home/crop-prediction-result']);\n        }, error => {\n          this.alertService.error(error);\n          this.loading = false;\n        });\n      }, error => {\n        this.alertService.error(error);\n        this.loading = false;\n      });\n    }\n\n    ngOnInit() {\n      this.cropTypeList = this.otherService.getCropTypeList();\n      this.districtList = this.otherService.getDistrictList();\n      this.cropPredictionForm = this.formBuilder.group({\n        cropName: ['', [Validators.required]],\n        cropSpecially: ['', [Validators.required]],\n        districtName: ['', [Validators.required]],\n        villageName: ['', [Validators.required]],\n        cropStartDate: ['', [Validators.required]],\n        cropLandSize: ['', [Validators.required]]\n      });\n    }\n\n    getVillage(district) {\n      this.villageList = this.otherService.getVillageList(district.target.value);\n    }\n\n    getCropsList(type) {\n      this.fruitsList = this.otherService.getCropsList(type.target.value);\n    }\n\n  }\n\n  CropPredictionComponent.ɵfac = function CropPredictionComponent_Factory(t) {\n    return new (t || CropPredictionComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CropPredictionService), i0.ɵɵdirectiveInject(i4.AlertService), i0.ɵɵdirectiveInject(i5.OtherService));\n  };\n\n  CropPredictionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CropPredictionComponent,\n    selectors: [[\"app-crop-prediction\"]],\n    decls: 75,\n    vars: 27,\n    consts: [[1, \"container\", 2, \"margin\", \"35px auto\"], [1, \"row\"], [1, \"col-lg-2\"], [1, \"col-lg-8\"], [1, \"col\", \"text-center\"], [1, \"section_title\"], [1, \"section_subtitle\"], [1, \"form-row\", \"align-items-center\"], [1, \"col-12\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\", 2, \"margin-top\", \"25px\"], [1, \"col-3\"], [\"for\", \"cropSpecially\"], [1, \"col-9\"], [\"formControlName\", \"cropSpecially\", \"id\", \"cropSpecially\", 1, \"form-control\", \"selectpicker\", 3, \"change\"], [\"value\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"for\", \"cropName\"], [\"formControlName\", \"cropName\", \"id\", \"cropName\", 1, \"form-control\", \"selectpicker\"], [\"for\", \"district\"], [\"formControlName\", \"districtName\", \"id\", \"district\", 1, \"form-control\", \"selectpicker\", 3, \"change\"], [\"for\", \"village\"], [\"formControlName\", \"villageName\", \"id\", \"village\", 1, \"form-control\", \"selectpicker\"], [\"for\", \"cropStartDate\"], [\"type\", \"date\", \"id\", \"cropStartDate\", \"name\", \"cropStartDate\", \"formControlName\", \"cropStartDate\", 1, \"form-control\", 3, \"ngModel\"], [\"for\", \"cropLandSize\"], [\"type\", \"number\", \"id\", \"cropLandSize\", \"formControlName\", \"cropLandSize\", 1, \"form-control\", \"mb-4\"], [\"type\", \"submit\", \"value\", \"Calculate\", 1, \"btn\", \"btn-primary\", \"btn-block\"]],\n    template: function CropPredictionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 1)(5, \"div\", 4)(6, \"div\", 5)(7, \"h2\");\n        i0.ɵɵtext(8, \"Crop Yield Prediction Calculator\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵtext(10, \" Please input following information and click on calculation to get your crop yield predictions. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"br\")(12, \"br\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"div\", 8)(15, \"form\", 9);\n        i0.ɵɵlistener(\"ngSubmit\", function CropPredictionComponent_Template_form_ngSubmit_15_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(16, \"div\", 10)(17, \"div\", 11)(18, \"label\", 12);\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 13)(22, \"select\", 14);\n        i0.ɵɵlistener(\"change\", function CropPredictionComponent_Template_select_change_22_listener($event) {\n          return ctx.getCropsList($event);\n        });\n        i0.ɵɵelementStart(23, \"option\", 15);\n        i0.ɵɵtext(24, \"Choose Crop Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, CropPredictionComponent_option_25_Template, 2, 1, \"option\", 16);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(26, \"div\", 10)(27, \"div\", 11)(28, \"label\", 17);\n        i0.ɵɵtext(29);\n        i0.ɵɵpipe(30, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"div\", 13)(32, \"select\", 18)(33, \"option\", 15);\n        i0.ɵɵtext(34, \"Choose Crop\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(35, CropPredictionComponent_option_35_Template, 2, 1, \"option\", 16);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(36, \"div\", 10)(37, \"div\", 11)(38, \"label\", 19);\n        i0.ɵɵtext(39);\n        i0.ɵɵpipe(40, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(41, \"div\", 13)(42, \"select\", 20);\n        i0.ɵɵlistener(\"change\", function CropPredictionComponent_Template_select_change_42_listener($event) {\n          return ctx.getVillage($event);\n        });\n        i0.ɵɵelementStart(43, \"option\", 15);\n        i0.ɵɵtext(44, \"Choose District\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(45, CropPredictionComponent_option_45_Template, 2, 1, \"option\", 16);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(46, \"div\", 10)(47, \"div\", 11)(48, \"label\", 21);\n        i0.ɵɵtext(49);\n        i0.ɵɵpipe(50, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(51, \"div\", 13)(52, \"select\", 22)(53, \"option\", 15);\n        i0.ɵɵtext(54, \"Choose Village\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(55, CropPredictionComponent_option_55_Template, 2, 1, \"option\", 16);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(56, \"div\", 10)(57, \"div\", 11)(58, \"label\", 23);\n        i0.ɵɵtext(59);\n        i0.ɵɵpipe(60, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(61, \"div\", 13);\n        i0.ɵɵelement(62, \"input\", 24);\n        i0.ɵɵpipe(63, \"date\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(64, \"div\", 10)(65, \"div\", 11)(66, \"label\", 25);\n        i0.ɵɵtext(67);\n        i0.ɵɵpipe(68, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(69, \"div\", 13);\n        i0.ɵɵelement(70, \"input\", 26);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(71, \"div\", 10)(72, \"div\", 8);\n        i0.ɵɵelement(73, \"input\", 27);\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelement(74, \"div\", 2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"formGroup\", ctx.cropPredictionForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(20, 12, \"crop_yield.crop_specially\"), \" :\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.cropTypeList);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(30, 14, \"crop_yield.crop\"), \" :\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.fruitsList);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(40, 16, \"crop_yield.district\"), \" :\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.districtList);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(50, 18, \"crop_yield.village\"), \" :\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.villageList);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(60, 20, \"crop_yield.start_date\"), \" :\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", i0.ɵɵpipeBind2(63, 22, ctx.cropStartDate, \"yyyy-MM-dd\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(68, 25, \"crop_yield.size\"), \" :\");\n      }\n    },\n    dependencies: [i6.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.DatePipe, i7.TranslatePipe]\n  });\n  return CropPredictionComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}