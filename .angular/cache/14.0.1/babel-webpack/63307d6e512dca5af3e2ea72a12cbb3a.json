{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http; // private currentUserSubject: BehaviorSubject<User>;\n      // public currentUser: Observable<User>;\n\n      this.baseUrl = 'http://localhost:8081/oauth'; // if (this.isUserLoggedIn()) {\n      //   this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n      //   this.currentUser = this.currentUserSubject.asObservable();\n      // }\n    } // public get currentUserValue(): User {\n    //   if (this.currentUserSubject != null) { return this.currentUserSubject.value; }\n    // }\n\n\n    login(user) {\n      const params = new URLSearchParams();\n      params.append('username', user.userName);\n      params.append('password', user.password);\n      params.append('grant_type', 'password');\n      const headers = {\n        Authorization: 'Basic ' + btoa('prediction_system:pin'),\n        'Content-type': 'application/x-www-form-urlencoded'\n      };\n      return this.http.post(`${this.baseUrl}/token`, params.toString(), {\n        headers\n      });\n    }\n\n    logOut() {\n      // remove user from local storage and set current user to null\n      localStorage.removeItem('currentUserName'); // this.currentUserSubject.next(null);\n    }\n\n    isUserLoggedIn() {\n      const userName = localStorage.getItem('currentUserName');\n      return !(userName === 'undefined' || userName === null);\n    }\n\n    getAccessToken() {\n      if (this.isUserLoggedIn()) {\n        return JSON.parse(window.sessionStorage.getItem('token')).access_token;\n      } else {\n        return null;\n      }\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}